import { type Infer, type ObjectType, type Validator, type Value } from "convex/values";
export declare const vProviderOptions: import("convex/values").VRecord<Record<string, Record<string, any>>, import("convex/values").VString<string, "required">, import("convex/values").VRecord<Record<string, any>, import("convex/values").VString<string, "required">, import("convex/values").VAny<any, "required", string>, "required", string>, "required", string>;
declare const providerOptions: import("convex/values").VRecord<Record<string, Record<string, any>> | undefined, import("convex/values").VString<string, "required">, import("convex/values").VRecord<Record<string, any>, import("convex/values").VString<string, "required">, import("convex/values").VAny<any, "required", string>, "required", string>, "optional", string>;
export type ProviderOptions = Infer<typeof providerOptions>;
export declare const vProviderMetadata: import("convex/values").VRecord<Record<string, Record<string, any>>, import("convex/values").VString<string, "required">, import("convex/values").VRecord<Record<string, any>, import("convex/values").VString<string, "required">, import("convex/values").VAny<any, "required", string>, "required", string>, "required", string>;
declare const providerMetadata: import("convex/values").VRecord<Record<string, Record<string, any>> | undefined, import("convex/values").VString<string, "required">, import("convex/values").VRecord<Record<string, any>, import("convex/values").VString<string, "required">, import("convex/values").VAny<any, "required", string>, "required", string>, "optional", string>;
export type ProviderMetadata = Infer<typeof providerMetadata>;
export declare const vThreadStatus: import("convex/values").VUnion<"active" | "archived", [import("convex/values").VLiteral<"active", "required">, import("convex/values").VLiteral<"archived", "required">], "required", never>;
export declare const vMessageStatus: import("convex/values").VUnion<"pending" | "success" | "failed", [import("convex/values").VLiteral<"pending", "required">, import("convex/values").VLiteral<"success", "required">, import("convex/values").VLiteral<"failed", "required">], "required", never>;
export type MessageStatus = Infer<typeof vMessageStatus>;
export declare const vRole: import("convex/values").VUnion<"user" | "assistant" | "tool" | "system", [import("convex/values").VLiteral<"system", "required">, import("convex/values").VLiteral<"user", "required">, import("convex/values").VLiteral<"assistant", "required">, import("convex/values").VLiteral<"tool", "required">], "required", never>;
export declare const vTextPart: import("convex/values").VObject<{
    providerOptions?: Record<string, Record<string, any>> | undefined;
    type: "text";
    text: string;
}, {
    type: import("convex/values").VLiteral<"text", "required">;
    text: import("convex/values").VString<string, "required">;
    providerOptions: import("convex/values").VRecord<Record<string, Record<string, any>> | undefined, import("convex/values").VString<string, "required">, import("convex/values").VRecord<Record<string, any>, import("convex/values").VString<string, "required">, import("convex/values").VAny<any, "required", string>, "required", string>, "optional", string>;
}, "required", "type" | "providerOptions" | "text" | `providerOptions.${string}`>;
export declare const vImagePart: import("convex/values").VObject<{
    providerOptions?: Record<string, Record<string, any>> | undefined;
    mimeType?: string | undefined;
    type: "image";
    image: string | ArrayBuffer;
}, {
    type: import("convex/values").VLiteral<"image", "required">;
    image: import("convex/values").VUnion<string | ArrayBuffer, [import("convex/values").VString<string, "required">, import("convex/values").VBytes<ArrayBuffer, "required">], "required", never>;
    mimeType: import("convex/values").VString<string | undefined, "optional">;
    providerOptions: import("convex/values").VRecord<Record<string, Record<string, any>> | undefined, import("convex/values").VString<string, "required">, import("convex/values").VRecord<Record<string, any>, import("convex/values").VString<string, "required">, import("convex/values").VAny<any, "required", string>, "required", string>, "optional", string>;
}, "required", "type" | "providerOptions" | `providerOptions.${string}` | "image" | "mimeType">;
export declare const vFilePart: import("convex/values").VObject<{
    providerOptions?: Record<string, Record<string, any>> | undefined;
    filename?: string | undefined;
    type: "file";
    mimeType: string;
    data: string | ArrayBuffer;
}, {
    type: import("convex/values").VLiteral<"file", "required">;
    data: import("convex/values").VUnion<string | ArrayBuffer, [import("convex/values").VString<string, "required">, import("convex/values").VBytes<ArrayBuffer, "required">], "required", never>;
    filename: import("convex/values").VString<string | undefined, "optional">;
    mimeType: import("convex/values").VString<string, "required">;
    providerOptions: import("convex/values").VRecord<Record<string, Record<string, any>> | undefined, import("convex/values").VString<string, "required">, import("convex/values").VRecord<Record<string, any>, import("convex/values").VString<string, "required">, import("convex/values").VAny<any, "required", string>, "required", string>, "optional", string>;
}, "required", "type" | "providerOptions" | `providerOptions.${string}` | "mimeType" | "data" | "filename">;
export declare const vUserContent: import("convex/values").VUnion<string | ({
    providerOptions?: Record<string, Record<string, any>> | undefined;
    type: "text";
    text: string;
} | {
    providerOptions?: Record<string, Record<string, any>> | undefined;
    mimeType?: string | undefined;
    type: "image";
    image: string | ArrayBuffer;
} | {
    providerOptions?: Record<string, Record<string, any>> | undefined;
    filename?: string | undefined;
    type: "file";
    mimeType: string;
    data: string | ArrayBuffer;
})[], [import("convex/values").VString<string, "required">, import("convex/values").VArray<({
    providerOptions?: Record<string, Record<string, any>> | undefined;
    type: "text";
    text: string;
} | {
    providerOptions?: Record<string, Record<string, any>> | undefined;
    mimeType?: string | undefined;
    type: "image";
    image: string | ArrayBuffer;
} | {
    providerOptions?: Record<string, Record<string, any>> | undefined;
    filename?: string | undefined;
    type: "file";
    mimeType: string;
    data: string | ArrayBuffer;
})[], import("convex/values").VUnion<{
    providerOptions?: Record<string, Record<string, any>> | undefined;
    type: "text";
    text: string;
} | {
    providerOptions?: Record<string, Record<string, any>> | undefined;
    mimeType?: string | undefined;
    type: "image";
    image: string | ArrayBuffer;
} | {
    providerOptions?: Record<string, Record<string, any>> | undefined;
    filename?: string | undefined;
    type: "file";
    mimeType: string;
    data: string | ArrayBuffer;
}, [import("convex/values").VObject<{
    providerOptions?: Record<string, Record<string, any>> | undefined;
    type: "text";
    text: string;
}, {
    type: import("convex/values").VLiteral<"text", "required">;
    text: import("convex/values").VString<string, "required">;
    providerOptions: import("convex/values").VRecord<Record<string, Record<string, any>> | undefined, import("convex/values").VString<string, "required">, import("convex/values").VRecord<Record<string, any>, import("convex/values").VString<string, "required">, import("convex/values").VAny<any, "required", string>, "required", string>, "optional", string>;
}, "required", "type" | "providerOptions" | "text" | `providerOptions.${string}`>, import("convex/values").VObject<{
    providerOptions?: Record<string, Record<string, any>> | undefined;
    mimeType?: string | undefined;
    type: "image";
    image: string | ArrayBuffer;
}, {
    type: import("convex/values").VLiteral<"image", "required">;
    image: import("convex/values").VUnion<string | ArrayBuffer, [import("convex/values").VString<string, "required">, import("convex/values").VBytes<ArrayBuffer, "required">], "required", never>;
    mimeType: import("convex/values").VString<string | undefined, "optional">;
    providerOptions: import("convex/values").VRecord<Record<string, Record<string, any>> | undefined, import("convex/values").VString<string, "required">, import("convex/values").VRecord<Record<string, any>, import("convex/values").VString<string, "required">, import("convex/values").VAny<any, "required", string>, "required", string>, "optional", string>;
}, "required", "type" | "providerOptions" | `providerOptions.${string}` | "image" | "mimeType">, import("convex/values").VObject<{
    providerOptions?: Record<string, Record<string, any>> | undefined;
    filename?: string | undefined;
    type: "file";
    mimeType: string;
    data: string | ArrayBuffer;
}, {
    type: import("convex/values").VLiteral<"file", "required">;
    data: import("convex/values").VUnion<string | ArrayBuffer, [import("convex/values").VString<string, "required">, import("convex/values").VBytes<ArrayBuffer, "required">], "required", never>;
    filename: import("convex/values").VString<string | undefined, "optional">;
    mimeType: import("convex/values").VString<string, "required">;
    providerOptions: import("convex/values").VRecord<Record<string, Record<string, any>> | undefined, import("convex/values").VString<string, "required">, import("convex/values").VRecord<Record<string, any>, import("convex/values").VString<string, "required">, import("convex/values").VAny<any, "required", string>, "required", string>, "optional", string>;
}, "required", "type" | "providerOptions" | `providerOptions.${string}` | "mimeType" | "data" | "filename">], "required", "type" | "providerOptions" | "text" | `providerOptions.${string}` | "image" | "mimeType" | "data" | "filename">, "required">], "required", never>;
export declare const vReasoningPart: import("convex/values").VObject<{
    providerOptions?: Record<string, Record<string, any>> | undefined;
    signature?: string | undefined;
    type: "reasoning";
    text: string;
}, {
    type: import("convex/values").VLiteral<"reasoning", "required">;
    text: import("convex/values").VString<string, "required">;
    signature: import("convex/values").VString<string | undefined, "optional">;
    providerOptions: import("convex/values").VRecord<Record<string, Record<string, any>> | undefined, import("convex/values").VString<string, "required">, import("convex/values").VRecord<Record<string, any>, import("convex/values").VString<string, "required">, import("convex/values").VAny<any, "required", string>, "required", string>, "optional", string>;
}, "required", "type" | "providerOptions" | "text" | `providerOptions.${string}` | "signature">;
export declare const vRedactedReasoningPart: import("convex/values").VObject<{
    providerOptions?: Record<string, Record<string, any>> | undefined;
    type: "redacted-reasoning";
    data: string;
}, {
    type: import("convex/values").VLiteral<"redacted-reasoning", "required">;
    data: import("convex/values").VString<string, "required">;
    providerOptions: import("convex/values").VRecord<Record<string, Record<string, any>> | undefined, import("convex/values").VString<string, "required">, import("convex/values").VRecord<Record<string, any>, import("convex/values").VString<string, "required">, import("convex/values").VAny<any, "required", string>, "required", string>, "optional", string>;
}, "required", "type" | "providerOptions" | `providerOptions.${string}` | "data">;
export declare const vReasoningDetails: import("convex/values").VArray<({
    signature?: string | undefined;
    type: "text";
    text: string;
} | {
    type: "redacted";
    data: string;
})[], import("convex/values").VUnion<{
    signature?: string | undefined;
    type: "text";
    text: string;
} | {
    type: "redacted";
    data: string;
}, [import("convex/values").VObject<{
    signature?: string | undefined;
    type: "text";
    text: string;
}, {
    type: import("convex/values").VLiteral<"text", "required">;
    text: import("convex/values").VString<string, "required">;
    signature: import("convex/values").VString<string | undefined, "optional">;
}, "required", "type" | "text" | "signature">, import("convex/values").VObject<{
    type: "redacted";
    data: string;
}, {
    type: import("convex/values").VLiteral<"redacted", "required">;
    data: import("convex/values").VString<string, "required">;
}, "required", "type" | "data">], "required", "type" | "text" | "data" | "signature">, "required">;
export declare const vToolCallPart: import("convex/values").VObject<{
    providerOptions?: Record<string, Record<string, any>> | undefined;
    type: "tool-call";
    toolCallId: string;
    toolName: string;
    args: any;
}, {
    type: import("convex/values").VLiteral<"tool-call", "required">;
    toolCallId: import("convex/values").VString<string, "required">;
    toolName: import("convex/values").VString<string, "required">;
    args: import("convex/values").VAny<any, "required", string>;
    providerOptions: import("convex/values").VRecord<Record<string, Record<string, any>> | undefined, import("convex/values").VString<string, "required">, import("convex/values").VRecord<Record<string, any>, import("convex/values").VString<string, "required">, import("convex/values").VAny<any, "required", string>, "required", string>, "optional", string>;
}, "required", "type" | "providerOptions" | `providerOptions.${string}` | "toolCallId" | "toolName" | "args" | `args.${string}`>;
export declare const vAssistantContent: import("convex/values").VUnion<string | ({
    providerOptions?: Record<string, Record<string, any>> | undefined;
    type: "text";
    text: string;
} | {
    providerOptions?: Record<string, Record<string, any>> | undefined;
    filename?: string | undefined;
    type: "file";
    mimeType: string;
    data: string | ArrayBuffer;
} | {
    providerOptions?: Record<string, Record<string, any>> | undefined;
    signature?: string | undefined;
    type: "reasoning";
    text: string;
} | {
    providerOptions?: Record<string, Record<string, any>> | undefined;
    type: "redacted-reasoning";
    data: string;
} | {
    providerOptions?: Record<string, Record<string, any>> | undefined;
    type: "tool-call";
    toolCallId: string;
    toolName: string;
    args: any;
})[], [import("convex/values").VString<string, "required">, import("convex/values").VArray<({
    providerOptions?: Record<string, Record<string, any>> | undefined;
    type: "text";
    text: string;
} | {
    providerOptions?: Record<string, Record<string, any>> | undefined;
    filename?: string | undefined;
    type: "file";
    mimeType: string;
    data: string | ArrayBuffer;
} | {
    providerOptions?: Record<string, Record<string, any>> | undefined;
    signature?: string | undefined;
    type: "reasoning";
    text: string;
} | {
    providerOptions?: Record<string, Record<string, any>> | undefined;
    type: "redacted-reasoning";
    data: string;
} | {
    providerOptions?: Record<string, Record<string, any>> | undefined;
    type: "tool-call";
    toolCallId: string;
    toolName: string;
    args: any;
})[], import("convex/values").VUnion<{
    providerOptions?: Record<string, Record<string, any>> | undefined;
    type: "text";
    text: string;
} | {
    providerOptions?: Record<string, Record<string, any>> | undefined;
    filename?: string | undefined;
    type: "file";
    mimeType: string;
    data: string | ArrayBuffer;
} | {
    providerOptions?: Record<string, Record<string, any>> | undefined;
    signature?: string | undefined;
    type: "reasoning";
    text: string;
} | {
    providerOptions?: Record<string, Record<string, any>> | undefined;
    type: "redacted-reasoning";
    data: string;
} | {
    providerOptions?: Record<string, Record<string, any>> | undefined;
    type: "tool-call";
    toolCallId: string;
    toolName: string;
    args: any;
}, [import("convex/values").VObject<{
    providerOptions?: Record<string, Record<string, any>> | undefined;
    type: "text";
    text: string;
}, {
    type: import("convex/values").VLiteral<"text", "required">;
    text: import("convex/values").VString<string, "required">;
    providerOptions: import("convex/values").VRecord<Record<string, Record<string, any>> | undefined, import("convex/values").VString<string, "required">, import("convex/values").VRecord<Record<string, any>, import("convex/values").VString<string, "required">, import("convex/values").VAny<any, "required", string>, "required", string>, "optional", string>;
}, "required", "type" | "providerOptions" | "text" | `providerOptions.${string}`>, import("convex/values").VObject<{
    providerOptions?: Record<string, Record<string, any>> | undefined;
    filename?: string | undefined;
    type: "file";
    mimeType: string;
    data: string | ArrayBuffer;
}, {
    type: import("convex/values").VLiteral<"file", "required">;
    data: import("convex/values").VUnion<string | ArrayBuffer, [import("convex/values").VString<string, "required">, import("convex/values").VBytes<ArrayBuffer, "required">], "required", never>;
    filename: import("convex/values").VString<string | undefined, "optional">;
    mimeType: import("convex/values").VString<string, "required">;
    providerOptions: import("convex/values").VRecord<Record<string, Record<string, any>> | undefined, import("convex/values").VString<string, "required">, import("convex/values").VRecord<Record<string, any>, import("convex/values").VString<string, "required">, import("convex/values").VAny<any, "required", string>, "required", string>, "optional", string>;
}, "required", "type" | "providerOptions" | `providerOptions.${string}` | "mimeType" | "data" | "filename">, import("convex/values").VObject<{
    providerOptions?: Record<string, Record<string, any>> | undefined;
    signature?: string | undefined;
    type: "reasoning";
    text: string;
}, {
    type: import("convex/values").VLiteral<"reasoning", "required">;
    text: import("convex/values").VString<string, "required">;
    signature: import("convex/values").VString<string | undefined, "optional">;
    providerOptions: import("convex/values").VRecord<Record<string, Record<string, any>> | undefined, import("convex/values").VString<string, "required">, import("convex/values").VRecord<Record<string, any>, import("convex/values").VString<string, "required">, import("convex/values").VAny<any, "required", string>, "required", string>, "optional", string>;
}, "required", "type" | "providerOptions" | "text" | `providerOptions.${string}` | "signature">, import("convex/values").VObject<{
    providerOptions?: Record<string, Record<string, any>> | undefined;
    type: "redacted-reasoning";
    data: string;
}, {
    type: import("convex/values").VLiteral<"redacted-reasoning", "required">;
    data: import("convex/values").VString<string, "required">;
    providerOptions: import("convex/values").VRecord<Record<string, Record<string, any>> | undefined, import("convex/values").VString<string, "required">, import("convex/values").VRecord<Record<string, any>, import("convex/values").VString<string, "required">, import("convex/values").VAny<any, "required", string>, "required", string>, "optional", string>;
}, "required", "type" | "providerOptions" | `providerOptions.${string}` | "data">, import("convex/values").VObject<{
    providerOptions?: Record<string, Record<string, any>> | undefined;
    type: "tool-call";
    toolCallId: string;
    toolName: string;
    args: any;
}, {
    type: import("convex/values").VLiteral<"tool-call", "required">;
    toolCallId: import("convex/values").VString<string, "required">;
    toolName: import("convex/values").VString<string, "required">;
    args: import("convex/values").VAny<any, "required", string>;
    providerOptions: import("convex/values").VRecord<Record<string, Record<string, any>> | undefined, import("convex/values").VString<string, "required">, import("convex/values").VRecord<Record<string, any>, import("convex/values").VString<string, "required">, import("convex/values").VAny<any, "required", string>, "required", string>, "optional", string>;
}, "required", "type" | "providerOptions" | `providerOptions.${string}` | "toolCallId" | "toolName" | "args" | `args.${string}`>], "required", "type" | "providerOptions" | "text" | `providerOptions.${string}` | "mimeType" | "data" | "filename" | "signature" | "toolCallId" | "toolName" | "args" | `args.${string}`>, "required">], "required", never>;
export declare const vToolContent: import("convex/values").VArray<{
    providerOptions?: Record<string, Record<string, any>> | undefined;
    args?: any;
    experimental_content?: ({
        type: "text";
        text: string;
    } | {
        mimeType?: string | undefined;
        type: "image";
        data: string;
    })[] | undefined;
    isError?: boolean | undefined;
    type: "tool-result";
    toolCallId: string;
    toolName: string;
    result: any;
}[], import("convex/values").VObject<{
    providerOptions?: Record<string, Record<string, any>> | undefined;
    args?: any;
    experimental_content?: ({
        type: "text";
        text: string;
    } | {
        mimeType?: string | undefined;
        type: "image";
        data: string;
    })[] | undefined;
    isError?: boolean | undefined;
    type: "tool-result";
    toolCallId: string;
    toolName: string;
    result: any;
}, {
    type: import("convex/values").VLiteral<"tool-result", "required">;
    toolCallId: import("convex/values").VString<string, "required">;
    toolName: import("convex/values").VString<string, "required">;
    result: import("convex/values").VAny<any, "required", string>;
    args: import("convex/values").VAny<any, "optional", string>;
    experimental_content: import("convex/values").VArray<({
        type: "text";
        text: string;
    } | {
        mimeType?: string | undefined;
        type: "image";
        data: string;
    })[] | undefined, import("convex/values").VUnion<{
        type: "text";
        text: string;
    } | {
        mimeType?: string | undefined;
        type: "image";
        data: string;
    }, [import("convex/values").VObject<{
        type: "text";
        text: string;
    }, {
        type: import("convex/values").VLiteral<"text", "required">;
        text: import("convex/values").VString<string, "required">;
    }, "required", "type" | "text">, import("convex/values").VObject<{
        mimeType?: string | undefined;
        type: "image";
        data: string;
    }, {
        type: import("convex/values").VLiteral<"image", "required">;
        data: import("convex/values").VString<string, "required">;
        mimeType: import("convex/values").VString<string | undefined, "optional">;
    }, "required", "type" | "mimeType" | "data">], "required", "type" | "text" | "mimeType" | "data">, "optional">;
    isError: import("convex/values").VBoolean<boolean | undefined, "optional">;
    providerOptions: import("convex/values").VRecord<Record<string, Record<string, any>> | undefined, import("convex/values").VString<string, "required">, import("convex/values").VRecord<Record<string, any>, import("convex/values").VString<string, "required">, import("convex/values").VAny<any, "required", string>, "required", string>, "optional", string>;
}, "required", "type" | "providerOptions" | `providerOptions.${string}` | "toolCallId" | "toolName" | "args" | `args.${string}` | "result" | "experimental_content" | "isError" | `result.${string}`>, "required">;
export declare const vContent: import("convex/values").VUnion<string | ({
    providerOptions?: Record<string, Record<string, any>> | undefined;
    type: "text";
    text: string;
} | {
    providerOptions?: Record<string, Record<string, any>> | undefined;
    mimeType?: string | undefined;
    type: "image";
    image: string | ArrayBuffer;
} | {
    providerOptions?: Record<string, Record<string, any>> | undefined;
    filename?: string | undefined;
    type: "file";
    mimeType: string;
    data: string | ArrayBuffer;
})[] | ({
    providerOptions?: Record<string, Record<string, any>> | undefined;
    type: "text";
    text: string;
} | {
    providerOptions?: Record<string, Record<string, any>> | undefined;
    filename?: string | undefined;
    type: "file";
    mimeType: string;
    data: string | ArrayBuffer;
} | {
    providerOptions?: Record<string, Record<string, any>> | undefined;
    signature?: string | undefined;
    type: "reasoning";
    text: string;
} | {
    providerOptions?: Record<string, Record<string, any>> | undefined;
    type: "redacted-reasoning";
    data: string;
} | {
    providerOptions?: Record<string, Record<string, any>> | undefined;
    type: "tool-call";
    toolCallId: string;
    toolName: string;
    args: any;
})[] | {
    providerOptions?: Record<string, Record<string, any>> | undefined;
    args?: any;
    experimental_content?: ({
        type: "text";
        text: string;
    } | {
        mimeType?: string | undefined;
        type: "image";
        data: string;
    })[] | undefined;
    isError?: boolean | undefined;
    type: "tool-result";
    toolCallId: string;
    toolName: string;
    result: any;
}[], [import("convex/values").VUnion<string | ({
    providerOptions?: Record<string, Record<string, any>> | undefined;
    type: "text";
    text: string;
} | {
    providerOptions?: Record<string, Record<string, any>> | undefined;
    mimeType?: string | undefined;
    type: "image";
    image: string | ArrayBuffer;
} | {
    providerOptions?: Record<string, Record<string, any>> | undefined;
    filename?: string | undefined;
    type: "file";
    mimeType: string;
    data: string | ArrayBuffer;
})[], [import("convex/values").VString<string, "required">, import("convex/values").VArray<({
    providerOptions?: Record<string, Record<string, any>> | undefined;
    type: "text";
    text: string;
} | {
    providerOptions?: Record<string, Record<string, any>> | undefined;
    mimeType?: string | undefined;
    type: "image";
    image: string | ArrayBuffer;
} | {
    providerOptions?: Record<string, Record<string, any>> | undefined;
    filename?: string | undefined;
    type: "file";
    mimeType: string;
    data: string | ArrayBuffer;
})[], import("convex/values").VUnion<{
    providerOptions?: Record<string, Record<string, any>> | undefined;
    type: "text";
    text: string;
} | {
    providerOptions?: Record<string, Record<string, any>> | undefined;
    mimeType?: string | undefined;
    type: "image";
    image: string | ArrayBuffer;
} | {
    providerOptions?: Record<string, Record<string, any>> | undefined;
    filename?: string | undefined;
    type: "file";
    mimeType: string;
    data: string | ArrayBuffer;
}, [import("convex/values").VObject<{
    providerOptions?: Record<string, Record<string, any>> | undefined;
    type: "text";
    text: string;
}, {
    type: import("convex/values").VLiteral<"text", "required">;
    text: import("convex/values").VString<string, "required">;
    providerOptions: import("convex/values").VRecord<Record<string, Record<string, any>> | undefined, import("convex/values").VString<string, "required">, import("convex/values").VRecord<Record<string, any>, import("convex/values").VString<string, "required">, import("convex/values").VAny<any, "required", string>, "required", string>, "optional", string>;
}, "required", "type" | "providerOptions" | "text" | `providerOptions.${string}`>, import("convex/values").VObject<{
    providerOptions?: Record<string, Record<string, any>> | undefined;
    mimeType?: string | undefined;
    type: "image";
    image: string | ArrayBuffer;
}, {
    type: import("convex/values").VLiteral<"image", "required">;
    image: import("convex/values").VUnion<string | ArrayBuffer, [import("convex/values").VString<string, "required">, import("convex/values").VBytes<ArrayBuffer, "required">], "required", never>;
    mimeType: import("convex/values").VString<string | undefined, "optional">;
    providerOptions: import("convex/values").VRecord<Record<string, Record<string, any>> | undefined, import("convex/values").VString<string, "required">, import("convex/values").VRecord<Record<string, any>, import("convex/values").VString<string, "required">, import("convex/values").VAny<any, "required", string>, "required", string>, "optional", string>;
}, "required", "type" | "providerOptions" | `providerOptions.${string}` | "image" | "mimeType">, import("convex/values").VObject<{
    providerOptions?: Record<string, Record<string, any>> | undefined;
    filename?: string | undefined;
    type: "file";
    mimeType: string;
    data: string | ArrayBuffer;
}, {
    type: import("convex/values").VLiteral<"file", "required">;
    data: import("convex/values").VUnion<string | ArrayBuffer, [import("convex/values").VString<string, "required">, import("convex/values").VBytes<ArrayBuffer, "required">], "required", never>;
    filename: import("convex/values").VString<string | undefined, "optional">;
    mimeType: import("convex/values").VString<string, "required">;
    providerOptions: import("convex/values").VRecord<Record<string, Record<string, any>> | undefined, import("convex/values").VString<string, "required">, import("convex/values").VRecord<Record<string, any>, import("convex/values").VString<string, "required">, import("convex/values").VAny<any, "required", string>, "required", string>, "optional", string>;
}, "required", "type" | "providerOptions" | `providerOptions.${string}` | "mimeType" | "data" | "filename">], "required", "type" | "providerOptions" | "text" | `providerOptions.${string}` | "image" | "mimeType" | "data" | "filename">, "required">], "required", never>, import("convex/values").VUnion<string | ({
    providerOptions?: Record<string, Record<string, any>> | undefined;
    type: "text";
    text: string;
} | {
    providerOptions?: Record<string, Record<string, any>> | undefined;
    filename?: string | undefined;
    type: "file";
    mimeType: string;
    data: string | ArrayBuffer;
} | {
    providerOptions?: Record<string, Record<string, any>> | undefined;
    signature?: string | undefined;
    type: "reasoning";
    text: string;
} | {
    providerOptions?: Record<string, Record<string, any>> | undefined;
    type: "redacted-reasoning";
    data: string;
} | {
    providerOptions?: Record<string, Record<string, any>> | undefined;
    type: "tool-call";
    toolCallId: string;
    toolName: string;
    args: any;
})[], [import("convex/values").VString<string, "required">, import("convex/values").VArray<({
    providerOptions?: Record<string, Record<string, any>> | undefined;
    type: "text";
    text: string;
} | {
    providerOptions?: Record<string, Record<string, any>> | undefined;
    filename?: string | undefined;
    type: "file";
    mimeType: string;
    data: string | ArrayBuffer;
} | {
    providerOptions?: Record<string, Record<string, any>> | undefined;
    signature?: string | undefined;
    type: "reasoning";
    text: string;
} | {
    providerOptions?: Record<string, Record<string, any>> | undefined;
    type: "redacted-reasoning";
    data: string;
} | {
    providerOptions?: Record<string, Record<string, any>> | undefined;
    type: "tool-call";
    toolCallId: string;
    toolName: string;
    args: any;
})[], import("convex/values").VUnion<{
    providerOptions?: Record<string, Record<string, any>> | undefined;
    type: "text";
    text: string;
} | {
    providerOptions?: Record<string, Record<string, any>> | undefined;
    filename?: string | undefined;
    type: "file";
    mimeType: string;
    data: string | ArrayBuffer;
} | {
    providerOptions?: Record<string, Record<string, any>> | undefined;
    signature?: string | undefined;
    type: "reasoning";
    text: string;
} | {
    providerOptions?: Record<string, Record<string, any>> | undefined;
    type: "redacted-reasoning";
    data: string;
} | {
    providerOptions?: Record<string, Record<string, any>> | undefined;
    type: "tool-call";
    toolCallId: string;
    toolName: string;
    args: any;
}, [import("convex/values").VObject<{
    providerOptions?: Record<string, Record<string, any>> | undefined;
    type: "text";
    text: string;
}, {
    type: import("convex/values").VLiteral<"text", "required">;
    text: import("convex/values").VString<string, "required">;
    providerOptions: import("convex/values").VRecord<Record<string, Record<string, any>> | undefined, import("convex/values").VString<string, "required">, import("convex/values").VRecord<Record<string, any>, import("convex/values").VString<string, "required">, import("convex/values").VAny<any, "required", string>, "required", string>, "optional", string>;
}, "required", "type" | "providerOptions" | "text" | `providerOptions.${string}`>, import("convex/values").VObject<{
    providerOptions?: Record<string, Record<string, any>> | undefined;
    filename?: string | undefined;
    type: "file";
    mimeType: string;
    data: string | ArrayBuffer;
}, {
    type: import("convex/values").VLiteral<"file", "required">;
    data: import("convex/values").VUnion<string | ArrayBuffer, [import("convex/values").VString<string, "required">, import("convex/values").VBytes<ArrayBuffer, "required">], "required", never>;
    filename: import("convex/values").VString<string | undefined, "optional">;
    mimeType: import("convex/values").VString<string, "required">;
    providerOptions: import("convex/values").VRecord<Record<string, Record<string, any>> | undefined, import("convex/values").VString<string, "required">, import("convex/values").VRecord<Record<string, any>, import("convex/values").VString<string, "required">, import("convex/values").VAny<any, "required", string>, "required", string>, "optional", string>;
}, "required", "type" | "providerOptions" | `providerOptions.${string}` | "mimeType" | "data" | "filename">, import("convex/values").VObject<{
    providerOptions?: Record<string, Record<string, any>> | undefined;
    signature?: string | undefined;
    type: "reasoning";
    text: string;
}, {
    type: import("convex/values").VLiteral<"reasoning", "required">;
    text: import("convex/values").VString<string, "required">;
    signature: import("convex/values").VString<string | undefined, "optional">;
    providerOptions: import("convex/values").VRecord<Record<string, Record<string, any>> | undefined, import("convex/values").VString<string, "required">, import("convex/values").VRecord<Record<string, any>, import("convex/values").VString<string, "required">, import("convex/values").VAny<any, "required", string>, "required", string>, "optional", string>;
}, "required", "type" | "providerOptions" | "text" | `providerOptions.${string}` | "signature">, import("convex/values").VObject<{
    providerOptions?: Record<string, Record<string, any>> | undefined;
    type: "redacted-reasoning";
    data: string;
}, {
    type: import("convex/values").VLiteral<"redacted-reasoning", "required">;
    data: import("convex/values").VString<string, "required">;
    providerOptions: import("convex/values").VRecord<Record<string, Record<string, any>> | undefined, import("convex/values").VString<string, "required">, import("convex/values").VRecord<Record<string, any>, import("convex/values").VString<string, "required">, import("convex/values").VAny<any, "required", string>, "required", string>, "optional", string>;
}, "required", "type" | "providerOptions" | `providerOptions.${string}` | "data">, import("convex/values").VObject<{
    providerOptions?: Record<string, Record<string, any>> | undefined;
    type: "tool-call";
    toolCallId: string;
    toolName: string;
    args: any;
}, {
    type: import("convex/values").VLiteral<"tool-call", "required">;
    toolCallId: import("convex/values").VString<string, "required">;
    toolName: import("convex/values").VString<string, "required">;
    args: import("convex/values").VAny<any, "required", string>;
    providerOptions: import("convex/values").VRecord<Record<string, Record<string, any>> | undefined, import("convex/values").VString<string, "required">, import("convex/values").VRecord<Record<string, any>, import("convex/values").VString<string, "required">, import("convex/values").VAny<any, "required", string>, "required", string>, "optional", string>;
}, "required", "type" | "providerOptions" | `providerOptions.${string}` | "toolCallId" | "toolName" | "args" | `args.${string}`>], "required", "type" | "providerOptions" | "text" | `providerOptions.${string}` | "mimeType" | "data" | "filename" | "signature" | "toolCallId" | "toolName" | "args" | `args.${string}`>, "required">], "required", never>, import("convex/values").VArray<{
    providerOptions?: Record<string, Record<string, any>> | undefined;
    args?: any;
    experimental_content?: ({
        type: "text";
        text: string;
    } | {
        mimeType?: string | undefined;
        type: "image";
        data: string;
    })[] | undefined;
    isError?: boolean | undefined;
    type: "tool-result";
    toolCallId: string;
    toolName: string;
    result: any;
}[], import("convex/values").VObject<{
    providerOptions?: Record<string, Record<string, any>> | undefined;
    args?: any;
    experimental_content?: ({
        type: "text";
        text: string;
    } | {
        mimeType?: string | undefined;
        type: "image";
        data: string;
    })[] | undefined;
    isError?: boolean | undefined;
    type: "tool-result";
    toolCallId: string;
    toolName: string;
    result: any;
}, {
    type: import("convex/values").VLiteral<"tool-result", "required">;
    toolCallId: import("convex/values").VString<string, "required">;
    toolName: import("convex/values").VString<string, "required">;
    result: import("convex/values").VAny<any, "required", string>;
    args: import("convex/values").VAny<any, "optional", string>;
    experimental_content: import("convex/values").VArray<({
        type: "text";
        text: string;
    } | {
        mimeType?: string | undefined;
        type: "image";
        data: string;
    })[] | undefined, import("convex/values").VUnion<{
        type: "text";
        text: string;
    } | {
        mimeType?: string | undefined;
        type: "image";
        data: string;
    }, [import("convex/values").VObject<{
        type: "text";
        text: string;
    }, {
        type: import("convex/values").VLiteral<"text", "required">;
        text: import("convex/values").VString<string, "required">;
    }, "required", "type" | "text">, import("convex/values").VObject<{
        mimeType?: string | undefined;
        type: "image";
        data: string;
    }, {
        type: import("convex/values").VLiteral<"image", "required">;
        data: import("convex/values").VString<string, "required">;
        mimeType: import("convex/values").VString<string | undefined, "optional">;
    }, "required", "type" | "mimeType" | "data">], "required", "type" | "text" | "mimeType" | "data">, "optional">;
    isError: import("convex/values").VBoolean<boolean | undefined, "optional">;
    providerOptions: import("convex/values").VRecord<Record<string, Record<string, any>> | undefined, import("convex/values").VString<string, "required">, import("convex/values").VRecord<Record<string, any>, import("convex/values").VString<string, "required">, import("convex/values").VAny<any, "required", string>, "required", string>, "optional", string>;
}, "required", "type" | "providerOptions" | `providerOptions.${string}` | "toolCallId" | "toolName" | "args" | `args.${string}` | "result" | "experimental_content" | "isError" | `result.${string}`>, "required">], "required", never>;
export type Content = Infer<typeof vContent>;
export declare const vUserMessage: import("convex/values").VObject<{
    providerOptions?: Record<string, Record<string, any>> | undefined;
    role: "user";
    content: string | ({
        providerOptions?: Record<string, Record<string, any>> | undefined;
        type: "text";
        text: string;
    } | {
        providerOptions?: Record<string, Record<string, any>> | undefined;
        mimeType?: string | undefined;
        type: "image";
        image: string | ArrayBuffer;
    } | {
        providerOptions?: Record<string, Record<string, any>> | undefined;
        filename?: string | undefined;
        type: "file";
        mimeType: string;
        data: string | ArrayBuffer;
    })[];
}, {
    role: import("convex/values").VLiteral<"user", "required">;
    content: import("convex/values").VUnion<string | ({
        providerOptions?: Record<string, Record<string, any>> | undefined;
        type: "text";
        text: string;
    } | {
        providerOptions?: Record<string, Record<string, any>> | undefined;
        mimeType?: string | undefined;
        type: "image";
        image: string | ArrayBuffer;
    } | {
        providerOptions?: Record<string, Record<string, any>> | undefined;
        filename?: string | undefined;
        type: "file";
        mimeType: string;
        data: string | ArrayBuffer;
    })[], [import("convex/values").VString<string, "required">, import("convex/values").VArray<({
        providerOptions?: Record<string, Record<string, any>> | undefined;
        type: "text";
        text: string;
    } | {
        providerOptions?: Record<string, Record<string, any>> | undefined;
        mimeType?: string | undefined;
        type: "image";
        image: string | ArrayBuffer;
    } | {
        providerOptions?: Record<string, Record<string, any>> | undefined;
        filename?: string | undefined;
        type: "file";
        mimeType: string;
        data: string | ArrayBuffer;
    })[], import("convex/values").VUnion<{
        providerOptions?: Record<string, Record<string, any>> | undefined;
        type: "text";
        text: string;
    } | {
        providerOptions?: Record<string, Record<string, any>> | undefined;
        mimeType?: string | undefined;
        type: "image";
        image: string | ArrayBuffer;
    } | {
        providerOptions?: Record<string, Record<string, any>> | undefined;
        filename?: string | undefined;
        type: "file";
        mimeType: string;
        data: string | ArrayBuffer;
    }, [import("convex/values").VObject<{
        providerOptions?: Record<string, Record<string, any>> | undefined;
        type: "text";
        text: string;
    }, {
        type: import("convex/values").VLiteral<"text", "required">;
        text: import("convex/values").VString<string, "required">;
        providerOptions: import("convex/values").VRecord<Record<string, Record<string, any>> | undefined, import("convex/values").VString<string, "required">, import("convex/values").VRecord<Record<string, any>, import("convex/values").VString<string, "required">, import("convex/values").VAny<any, "required", string>, "required", string>, "optional", string>;
    }, "required", "type" | "providerOptions" | "text" | `providerOptions.${string}`>, import("convex/values").VObject<{
        providerOptions?: Record<string, Record<string, any>> | undefined;
        mimeType?: string | undefined;
        type: "image";
        image: string | ArrayBuffer;
    }, {
        type: import("convex/values").VLiteral<"image", "required">;
        image: import("convex/values").VUnion<string | ArrayBuffer, [import("convex/values").VString<string, "required">, import("convex/values").VBytes<ArrayBuffer, "required">], "required", never>;
        mimeType: import("convex/values").VString<string | undefined, "optional">;
        providerOptions: import("convex/values").VRecord<Record<string, Record<string, any>> | undefined, import("convex/values").VString<string, "required">, import("convex/values").VRecord<Record<string, any>, import("convex/values").VString<string, "required">, import("convex/values").VAny<any, "required", string>, "required", string>, "optional", string>;
    }, "required", "type" | "providerOptions" | `providerOptions.${string}` | "image" | "mimeType">, import("convex/values").VObject<{
        providerOptions?: Record<string, Record<string, any>> | undefined;
        filename?: string | undefined;
        type: "file";
        mimeType: string;
        data: string | ArrayBuffer;
    }, {
        type: import("convex/values").VLiteral<"file", "required">;
        data: import("convex/values").VUnion<string | ArrayBuffer, [import("convex/values").VString<string, "required">, import("convex/values").VBytes<ArrayBuffer, "required">], "required", never>;
        filename: import("convex/values").VString<string | undefined, "optional">;
        mimeType: import("convex/values").VString<string, "required">;
        providerOptions: import("convex/values").VRecord<Record<string, Record<string, any>> | undefined, import("convex/values").VString<string, "required">, import("convex/values").VRecord<Record<string, any>, import("convex/values").VString<string, "required">, import("convex/values").VAny<any, "required", string>, "required", string>, "optional", string>;
    }, "required", "type" | "providerOptions" | `providerOptions.${string}` | "mimeType" | "data" | "filename">], "required", "type" | "providerOptions" | "text" | `providerOptions.${string}` | "image" | "mimeType" | "data" | "filename">, "required">], "required", never>;
    providerOptions: import("convex/values").VRecord<Record<string, Record<string, any>> | undefined, import("convex/values").VString<string, "required">, import("convex/values").VRecord<Record<string, any>, import("convex/values").VString<string, "required">, import("convex/values").VAny<any, "required", string>, "required", string>, "optional", string>;
}, "required", "providerOptions" | "role" | `providerOptions.${string}` | "content">;
export declare const vAssistantMessage: import("convex/values").VObject<{
    providerOptions?: Record<string, Record<string, any>> | undefined;
    role: "assistant";
    content: string | ({
        providerOptions?: Record<string, Record<string, any>> | undefined;
        type: "text";
        text: string;
    } | {
        providerOptions?: Record<string, Record<string, any>> | undefined;
        filename?: string | undefined;
        type: "file";
        mimeType: string;
        data: string | ArrayBuffer;
    } | {
        providerOptions?: Record<string, Record<string, any>> | undefined;
        signature?: string | undefined;
        type: "reasoning";
        text: string;
    } | {
        providerOptions?: Record<string, Record<string, any>> | undefined;
        type: "redacted-reasoning";
        data: string;
    } | {
        providerOptions?: Record<string, Record<string, any>> | undefined;
        type: "tool-call";
        toolCallId: string;
        toolName: string;
        args: any;
    })[];
}, {
    role: import("convex/values").VLiteral<"assistant", "required">;
    content: import("convex/values").VUnion<string | ({
        providerOptions?: Record<string, Record<string, any>> | undefined;
        type: "text";
        text: string;
    } | {
        providerOptions?: Record<string, Record<string, any>> | undefined;
        filename?: string | undefined;
        type: "file";
        mimeType: string;
        data: string | ArrayBuffer;
    } | {
        providerOptions?: Record<string, Record<string, any>> | undefined;
        signature?: string | undefined;
        type: "reasoning";
        text: string;
    } | {
        providerOptions?: Record<string, Record<string, any>> | undefined;
        type: "redacted-reasoning";
        data: string;
    } | {
        providerOptions?: Record<string, Record<string, any>> | undefined;
        type: "tool-call";
        toolCallId: string;
        toolName: string;
        args: any;
    })[], [import("convex/values").VString<string, "required">, import("convex/values").VArray<({
        providerOptions?: Record<string, Record<string, any>> | undefined;
        type: "text";
        text: string;
    } | {
        providerOptions?: Record<string, Record<string, any>> | undefined;
        filename?: string | undefined;
        type: "file";
        mimeType: string;
        data: string | ArrayBuffer;
    } | {
        providerOptions?: Record<string, Record<string, any>> | undefined;
        signature?: string | undefined;
        type: "reasoning";
        text: string;
    } | {
        providerOptions?: Record<string, Record<string, any>> | undefined;
        type: "redacted-reasoning";
        data: string;
    } | {
        providerOptions?: Record<string, Record<string, any>> | undefined;
        type: "tool-call";
        toolCallId: string;
        toolName: string;
        args: any;
    })[], import("convex/values").VUnion<{
        providerOptions?: Record<string, Record<string, any>> | undefined;
        type: "text";
        text: string;
    } | {
        providerOptions?: Record<string, Record<string, any>> | undefined;
        filename?: string | undefined;
        type: "file";
        mimeType: string;
        data: string | ArrayBuffer;
    } | {
        providerOptions?: Record<string, Record<string, any>> | undefined;
        signature?: string | undefined;
        type: "reasoning";
        text: string;
    } | {
        providerOptions?: Record<string, Record<string, any>> | undefined;
        type: "redacted-reasoning";
        data: string;
    } | {
        providerOptions?: Record<string, Record<string, any>> | undefined;
        type: "tool-call";
        toolCallId: string;
        toolName: string;
        args: any;
    }, [import("convex/values").VObject<{
        providerOptions?: Record<string, Record<string, any>> | undefined;
        type: "text";
        text: string;
    }, {
        type: import("convex/values").VLiteral<"text", "required">;
        text: import("convex/values").VString<string, "required">;
        providerOptions: import("convex/values").VRecord<Record<string, Record<string, any>> | undefined, import("convex/values").VString<string, "required">, import("convex/values").VRecord<Record<string, any>, import("convex/values").VString<string, "required">, import("convex/values").VAny<any, "required", string>, "required", string>, "optional", string>;
    }, "required", "type" | "providerOptions" | "text" | `providerOptions.${string}`>, import("convex/values").VObject<{
        providerOptions?: Record<string, Record<string, any>> | undefined;
        filename?: string | undefined;
        type: "file";
        mimeType: string;
        data: string | ArrayBuffer;
    }, {
        type: import("convex/values").VLiteral<"file", "required">;
        data: import("convex/values").VUnion<string | ArrayBuffer, [import("convex/values").VString<string, "required">, import("convex/values").VBytes<ArrayBuffer, "required">], "required", never>;
        filename: import("convex/values").VString<string | undefined, "optional">;
        mimeType: import("convex/values").VString<string, "required">;
        providerOptions: import("convex/values").VRecord<Record<string, Record<string, any>> | undefined, import("convex/values").VString<string, "required">, import("convex/values").VRecord<Record<string, any>, import("convex/values").VString<string, "required">, import("convex/values").VAny<any, "required", string>, "required", string>, "optional", string>;
    }, "required", "type" | "providerOptions" | `providerOptions.${string}` | "mimeType" | "data" | "filename">, import("convex/values").VObject<{
        providerOptions?: Record<string, Record<string, any>> | undefined;
        signature?: string | undefined;
        type: "reasoning";
        text: string;
    }, {
        type: import("convex/values").VLiteral<"reasoning", "required">;
        text: import("convex/values").VString<string, "required">;
        signature: import("convex/values").VString<string | undefined, "optional">;
        providerOptions: import("convex/values").VRecord<Record<string, Record<string, any>> | undefined, import("convex/values").VString<string, "required">, import("convex/values").VRecord<Record<string, any>, import("convex/values").VString<string, "required">, import("convex/values").VAny<any, "required", string>, "required", string>, "optional", string>;
    }, "required", "type" | "providerOptions" | "text" | `providerOptions.${string}` | "signature">, import("convex/values").VObject<{
        providerOptions?: Record<string, Record<string, any>> | undefined;
        type: "redacted-reasoning";
        data: string;
    }, {
        type: import("convex/values").VLiteral<"redacted-reasoning", "required">;
        data: import("convex/values").VString<string, "required">;
        providerOptions: import("convex/values").VRecord<Record<string, Record<string, any>> | undefined, import("convex/values").VString<string, "required">, import("convex/values").VRecord<Record<string, any>, import("convex/values").VString<string, "required">, import("convex/values").VAny<any, "required", string>, "required", string>, "optional", string>;
    }, "required", "type" | "providerOptions" | `providerOptions.${string}` | "data">, import("convex/values").VObject<{
        providerOptions?: Record<string, Record<string, any>> | undefined;
        type: "tool-call";
        toolCallId: string;
        toolName: string;
        args: any;
    }, {
        type: import("convex/values").VLiteral<"tool-call", "required">;
        toolCallId: import("convex/values").VString<string, "required">;
        toolName: import("convex/values").VString<string, "required">;
        args: import("convex/values").VAny<any, "required", string>;
        providerOptions: import("convex/values").VRecord<Record<string, Record<string, any>> | undefined, import("convex/values").VString<string, "required">, import("convex/values").VRecord<Record<string, any>, import("convex/values").VString<string, "required">, import("convex/values").VAny<any, "required", string>, "required", string>, "optional", string>;
    }, "required", "type" | "providerOptions" | `providerOptions.${string}` | "toolCallId" | "toolName" | "args" | `args.${string}`>], "required", "type" | "providerOptions" | "text" | `providerOptions.${string}` | "mimeType" | "data" | "filename" | "signature" | "toolCallId" | "toolName" | "args" | `args.${string}`>, "required">], "required", never>;
    providerOptions: import("convex/values").VRecord<Record<string, Record<string, any>> | undefined, import("convex/values").VString<string, "required">, import("convex/values").VRecord<Record<string, any>, import("convex/values").VString<string, "required">, import("convex/values").VAny<any, "required", string>, "required", string>, "optional", string>;
}, "required", "providerOptions" | "role" | `providerOptions.${string}` | "content">;
export declare const vToolMessage: import("convex/values").VObject<{
    providerOptions?: Record<string, Record<string, any>> | undefined;
    role: "tool";
    content: {
        providerOptions?: Record<string, Record<string, any>> | undefined;
        args?: any;
        experimental_content?: ({
            type: "text";
            text: string;
        } | {
            mimeType?: string | undefined;
            type: "image";
            data: string;
        })[] | undefined;
        isError?: boolean | undefined;
        type: "tool-result";
        toolCallId: string;
        toolName: string;
        result: any;
    }[];
}, {
    role: import("convex/values").VLiteral<"tool", "required">;
    content: import("convex/values").VArray<{
        providerOptions?: Record<string, Record<string, any>> | undefined;
        args?: any;
        experimental_content?: ({
            type: "text";
            text: string;
        } | {
            mimeType?: string | undefined;
            type: "image";
            data: string;
        })[] | undefined;
        isError?: boolean | undefined;
        type: "tool-result";
        toolCallId: string;
        toolName: string;
        result: any;
    }[], import("convex/values").VObject<{
        providerOptions?: Record<string, Record<string, any>> | undefined;
        args?: any;
        experimental_content?: ({
            type: "text";
            text: string;
        } | {
            mimeType?: string | undefined;
            type: "image";
            data: string;
        })[] | undefined;
        isError?: boolean | undefined;
        type: "tool-result";
        toolCallId: string;
        toolName: string;
        result: any;
    }, {
        type: import("convex/values").VLiteral<"tool-result", "required">;
        toolCallId: import("convex/values").VString<string, "required">;
        toolName: import("convex/values").VString<string, "required">;
        result: import("convex/values").VAny<any, "required", string>;
        args: import("convex/values").VAny<any, "optional", string>;
        experimental_content: import("convex/values").VArray<({
            type: "text";
            text: string;
        } | {
            mimeType?: string | undefined;
            type: "image";
            data: string;
        })[] | undefined, import("convex/values").VUnion<{
            type: "text";
            text: string;
        } | {
            mimeType?: string | undefined;
            type: "image";
            data: string;
        }, [import("convex/values").VObject<{
            type: "text";
            text: string;
        }, {
            type: import("convex/values").VLiteral<"text", "required">;
            text: import("convex/values").VString<string, "required">;
        }, "required", "type" | "text">, import("convex/values").VObject<{
            mimeType?: string | undefined;
            type: "image";
            data: string;
        }, {
            type: import("convex/values").VLiteral<"image", "required">;
            data: import("convex/values").VString<string, "required">;
            mimeType: import("convex/values").VString<string | undefined, "optional">;
        }, "required", "type" | "mimeType" | "data">], "required", "type" | "text" | "mimeType" | "data">, "optional">;
        isError: import("convex/values").VBoolean<boolean | undefined, "optional">;
        providerOptions: import("convex/values").VRecord<Record<string, Record<string, any>> | undefined, import("convex/values").VString<string, "required">, import("convex/values").VRecord<Record<string, any>, import("convex/values").VString<string, "required">, import("convex/values").VAny<any, "required", string>, "required", string>, "optional", string>;
    }, "required", "type" | "providerOptions" | `providerOptions.${string}` | "toolCallId" | "toolName" | "args" | `args.${string}` | "result" | "experimental_content" | "isError" | `result.${string}`>, "required">;
    providerOptions: import("convex/values").VRecord<Record<string, Record<string, any>> | undefined, import("convex/values").VString<string, "required">, import("convex/values").VRecord<Record<string, any>, import("convex/values").VString<string, "required">, import("convex/values").VAny<any, "required", string>, "required", string>, "optional", string>;
}, "required", "providerOptions" | "role" | `providerOptions.${string}` | "content">;
export declare const vSystemMessage: import("convex/values").VObject<{
    providerOptions?: Record<string, Record<string, any>> | undefined;
    role: "system";
    content: string;
}, {
    role: import("convex/values").VLiteral<"system", "required">;
    content: import("convex/values").VString<string, "required">;
    providerOptions: import("convex/values").VRecord<Record<string, Record<string, any>> | undefined, import("convex/values").VString<string, "required">, import("convex/values").VRecord<Record<string, any>, import("convex/values").VString<string, "required">, import("convex/values").VAny<any, "required", string>, "required", string>, "optional", string>;
}, "required", "providerOptions" | "role" | `providerOptions.${string}` | "content">;
export declare const vMessage: import("convex/values").VUnion<{
    providerOptions?: Record<string, Record<string, any>> | undefined;
    role: "user";
    content: string | ({
        providerOptions?: Record<string, Record<string, any>> | undefined;
        type: "text";
        text: string;
    } | {
        providerOptions?: Record<string, Record<string, any>> | undefined;
        mimeType?: string | undefined;
        type: "image";
        image: string | ArrayBuffer;
    } | {
        providerOptions?: Record<string, Record<string, any>> | undefined;
        filename?: string | undefined;
        type: "file";
        mimeType: string;
        data: string | ArrayBuffer;
    })[];
} | {
    providerOptions?: Record<string, Record<string, any>> | undefined;
    role: "assistant";
    content: string | ({
        providerOptions?: Record<string, Record<string, any>> | undefined;
        type: "text";
        text: string;
    } | {
        providerOptions?: Record<string, Record<string, any>> | undefined;
        filename?: string | undefined;
        type: "file";
        mimeType: string;
        data: string | ArrayBuffer;
    } | {
        providerOptions?: Record<string, Record<string, any>> | undefined;
        signature?: string | undefined;
        type: "reasoning";
        text: string;
    } | {
        providerOptions?: Record<string, Record<string, any>> | undefined;
        type: "redacted-reasoning";
        data: string;
    } | {
        providerOptions?: Record<string, Record<string, any>> | undefined;
        type: "tool-call";
        toolCallId: string;
        toolName: string;
        args: any;
    })[];
} | {
    providerOptions?: Record<string, Record<string, any>> | undefined;
    role: "tool";
    content: {
        providerOptions?: Record<string, Record<string, any>> | undefined;
        args?: any;
        experimental_content?: ({
            type: "text";
            text: string;
        } | {
            mimeType?: string | undefined;
            type: "image";
            data: string;
        })[] | undefined;
        isError?: boolean | undefined;
        type: "tool-result";
        toolCallId: string;
        toolName: string;
        result: any;
    }[];
} | {
    providerOptions?: Record<string, Record<string, any>> | undefined;
    role: "system";
    content: string;
}, [import("convex/values").VObject<{
    providerOptions?: Record<string, Record<string, any>> | undefined;
    role: "user";
    content: string | ({
        providerOptions?: Record<string, Record<string, any>> | undefined;
        type: "text";
        text: string;
    } | {
        providerOptions?: Record<string, Record<string, any>> | undefined;
        mimeType?: string | undefined;
        type: "image";
        image: string | ArrayBuffer;
    } | {
        providerOptions?: Record<string, Record<string, any>> | undefined;
        filename?: string | undefined;
        type: "file";
        mimeType: string;
        data: string | ArrayBuffer;
    })[];
}, {
    role: import("convex/values").VLiteral<"user", "required">;
    content: import("convex/values").VUnion<string | ({
        providerOptions?: Record<string, Record<string, any>> | undefined;
        type: "text";
        text: string;
    } | {
        providerOptions?: Record<string, Record<string, any>> | undefined;
        mimeType?: string | undefined;
        type: "image";
        image: string | ArrayBuffer;
    } | {
        providerOptions?: Record<string, Record<string, any>> | undefined;
        filename?: string | undefined;
        type: "file";
        mimeType: string;
        data: string | ArrayBuffer;
    })[], [import("convex/values").VString<string, "required">, import("convex/values").VArray<({
        providerOptions?: Record<string, Record<string, any>> | undefined;
        type: "text";
        text: string;
    } | {
        providerOptions?: Record<string, Record<string, any>> | undefined;
        mimeType?: string | undefined;
        type: "image";
        image: string | ArrayBuffer;
    } | {
        providerOptions?: Record<string, Record<string, any>> | undefined;
        filename?: string | undefined;
        type: "file";
        mimeType: string;
        data: string | ArrayBuffer;
    })[], import("convex/values").VUnion<{
        providerOptions?: Record<string, Record<string, any>> | undefined;
        type: "text";
        text: string;
    } | {
        providerOptions?: Record<string, Record<string, any>> | undefined;
        mimeType?: string | undefined;
        type: "image";
        image: string | ArrayBuffer;
    } | {
        providerOptions?: Record<string, Record<string, any>> | undefined;
        filename?: string | undefined;
        type: "file";
        mimeType: string;
        data: string | ArrayBuffer;
    }, [import("convex/values").VObject<{
        providerOptions?: Record<string, Record<string, any>> | undefined;
        type: "text";
        text: string;
    }, {
        type: import("convex/values").VLiteral<"text", "required">;
        text: import("convex/values").VString<string, "required">;
        providerOptions: import("convex/values").VRecord<Record<string, Record<string, any>> | undefined, import("convex/values").VString<string, "required">, import("convex/values").VRecord<Record<string, any>, import("convex/values").VString<string, "required">, import("convex/values").VAny<any, "required", string>, "required", string>, "optional", string>;
    }, "required", "type" | "providerOptions" | "text" | `providerOptions.${string}`>, import("convex/values").VObject<{
        providerOptions?: Record<string, Record<string, any>> | undefined;
        mimeType?: string | undefined;
        type: "image";
        image: string | ArrayBuffer;
    }, {
        type: import("convex/values").VLiteral<"image", "required">;
        image: import("convex/values").VUnion<string | ArrayBuffer, [import("convex/values").VString<string, "required">, import("convex/values").VBytes<ArrayBuffer, "required">], "required", never>;
        mimeType: import("convex/values").VString<string | undefined, "optional">;
        providerOptions: import("convex/values").VRecord<Record<string, Record<string, any>> | undefined, import("convex/values").VString<string, "required">, import("convex/values").VRecord<Record<string, any>, import("convex/values").VString<string, "required">, import("convex/values").VAny<any, "required", string>, "required", string>, "optional", string>;
    }, "required", "type" | "providerOptions" | `providerOptions.${string}` | "image" | "mimeType">, import("convex/values").VObject<{
        providerOptions?: Record<string, Record<string, any>> | undefined;
        filename?: string | undefined;
        type: "file";
        mimeType: string;
        data: string | ArrayBuffer;
    }, {
        type: import("convex/values").VLiteral<"file", "required">;
        data: import("convex/values").VUnion<string | ArrayBuffer, [import("convex/values").VString<string, "required">, import("convex/values").VBytes<ArrayBuffer, "required">], "required", never>;
        filename: import("convex/values").VString<string | undefined, "optional">;
        mimeType: import("convex/values").VString<string, "required">;
        providerOptions: import("convex/values").VRecord<Record<string, Record<string, any>> | undefined, import("convex/values").VString<string, "required">, import("convex/values").VRecord<Record<string, any>, import("convex/values").VString<string, "required">, import("convex/values").VAny<any, "required", string>, "required", string>, "optional", string>;
    }, "required", "type" | "providerOptions" | `providerOptions.${string}` | "mimeType" | "data" | "filename">], "required", "type" | "providerOptions" | "text" | `providerOptions.${string}` | "image" | "mimeType" | "data" | "filename">, "required">], "required", never>;
    providerOptions: import("convex/values").VRecord<Record<string, Record<string, any>> | undefined, import("convex/values").VString<string, "required">, import("convex/values").VRecord<Record<string, any>, import("convex/values").VString<string, "required">, import("convex/values").VAny<any, "required", string>, "required", string>, "optional", string>;
}, "required", "providerOptions" | "role" | `providerOptions.${string}` | "content">, import("convex/values").VObject<{
    providerOptions?: Record<string, Record<string, any>> | undefined;
    role: "assistant";
    content: string | ({
        providerOptions?: Record<string, Record<string, any>> | undefined;
        type: "text";
        text: string;
    } | {
        providerOptions?: Record<string, Record<string, any>> | undefined;
        filename?: string | undefined;
        type: "file";
        mimeType: string;
        data: string | ArrayBuffer;
    } | {
        providerOptions?: Record<string, Record<string, any>> | undefined;
        signature?: string | undefined;
        type: "reasoning";
        text: string;
    } | {
        providerOptions?: Record<string, Record<string, any>> | undefined;
        type: "redacted-reasoning";
        data: string;
    } | {
        providerOptions?: Record<string, Record<string, any>> | undefined;
        type: "tool-call";
        toolCallId: string;
        toolName: string;
        args: any;
    })[];
}, {
    role: import("convex/values").VLiteral<"assistant", "required">;
    content: import("convex/values").VUnion<string | ({
        providerOptions?: Record<string, Record<string, any>> | undefined;
        type: "text";
        text: string;
    } | {
        providerOptions?: Record<string, Record<string, any>> | undefined;
        filename?: string | undefined;
        type: "file";
        mimeType: string;
        data: string | ArrayBuffer;
    } | {
        providerOptions?: Record<string, Record<string, any>> | undefined;
        signature?: string | undefined;
        type: "reasoning";
        text: string;
    } | {
        providerOptions?: Record<string, Record<string, any>> | undefined;
        type: "redacted-reasoning";
        data: string;
    } | {
        providerOptions?: Record<string, Record<string, any>> | undefined;
        type: "tool-call";
        toolCallId: string;
        toolName: string;
        args: any;
    })[], [import("convex/values").VString<string, "required">, import("convex/values").VArray<({
        providerOptions?: Record<string, Record<string, any>> | undefined;
        type: "text";
        text: string;
    } | {
        providerOptions?: Record<string, Record<string, any>> | undefined;
        filename?: string | undefined;
        type: "file";
        mimeType: string;
        data: string | ArrayBuffer;
    } | {
        providerOptions?: Record<string, Record<string, any>> | undefined;
        signature?: string | undefined;
        type: "reasoning";
        text: string;
    } | {
        providerOptions?: Record<string, Record<string, any>> | undefined;
        type: "redacted-reasoning";
        data: string;
    } | {
        providerOptions?: Record<string, Record<string, any>> | undefined;
        type: "tool-call";
        toolCallId: string;
        toolName: string;
        args: any;
    })[], import("convex/values").VUnion<{
        providerOptions?: Record<string, Record<string, any>> | undefined;
        type: "text";
        text: string;
    } | {
        providerOptions?: Record<string, Record<string, any>> | undefined;
        filename?: string | undefined;
        type: "file";
        mimeType: string;
        data: string | ArrayBuffer;
    } | {
        providerOptions?: Record<string, Record<string, any>> | undefined;
        signature?: string | undefined;
        type: "reasoning";
        text: string;
    } | {
        providerOptions?: Record<string, Record<string, any>> | undefined;
        type: "redacted-reasoning";
        data: string;
    } | {
        providerOptions?: Record<string, Record<string, any>> | undefined;
        type: "tool-call";
        toolCallId: string;
        toolName: string;
        args: any;
    }, [import("convex/values").VObject<{
        providerOptions?: Record<string, Record<string, any>> | undefined;
        type: "text";
        text: string;
    }, {
        type: import("convex/values").VLiteral<"text", "required">;
        text: import("convex/values").VString<string, "required">;
        providerOptions: import("convex/values").VRecord<Record<string, Record<string, any>> | undefined, import("convex/values").VString<string, "required">, import("convex/values").VRecord<Record<string, any>, import("convex/values").VString<string, "required">, import("convex/values").VAny<any, "required", string>, "required", string>, "optional", string>;
    }, "required", "type" | "providerOptions" | "text" | `providerOptions.${string}`>, import("convex/values").VObject<{
        providerOptions?: Record<string, Record<string, any>> | undefined;
        filename?: string | undefined;
        type: "file";
        mimeType: string;
        data: string | ArrayBuffer;
    }, {
        type: import("convex/values").VLiteral<"file", "required">;
        data: import("convex/values").VUnion<string | ArrayBuffer, [import("convex/values").VString<string, "required">, import("convex/values").VBytes<ArrayBuffer, "required">], "required", never>;
        filename: import("convex/values").VString<string | undefined, "optional">;
        mimeType: import("convex/values").VString<string, "required">;
        providerOptions: import("convex/values").VRecord<Record<string, Record<string, any>> | undefined, import("convex/values").VString<string, "required">, import("convex/values").VRecord<Record<string, any>, import("convex/values").VString<string, "required">, import("convex/values").VAny<any, "required", string>, "required", string>, "optional", string>;
    }, "required", "type" | "providerOptions" | `providerOptions.${string}` | "mimeType" | "data" | "filename">, import("convex/values").VObject<{
        providerOptions?: Record<string, Record<string, any>> | undefined;
        signature?: string | undefined;
        type: "reasoning";
        text: string;
    }, {
        type: import("convex/values").VLiteral<"reasoning", "required">;
        text: import("convex/values").VString<string, "required">;
        signature: import("convex/values").VString<string | undefined, "optional">;
        providerOptions: import("convex/values").VRecord<Record<string, Record<string, any>> | undefined, import("convex/values").VString<string, "required">, import("convex/values").VRecord<Record<string, any>, import("convex/values").VString<string, "required">, import("convex/values").VAny<any, "required", string>, "required", string>, "optional", string>;
    }, "required", "type" | "providerOptions" | "text" | `providerOptions.${string}` | "signature">, import("convex/values").VObject<{
        providerOptions?: Record<string, Record<string, any>> | undefined;
        type: "redacted-reasoning";
        data: string;
    }, {
        type: import("convex/values").VLiteral<"redacted-reasoning", "required">;
        data: import("convex/values").VString<string, "required">;
        providerOptions: import("convex/values").VRecord<Record<string, Record<string, any>> | undefined, import("convex/values").VString<string, "required">, import("convex/values").VRecord<Record<string, any>, import("convex/values").VString<string, "required">, import("convex/values").VAny<any, "required", string>, "required", string>, "optional", string>;
    }, "required", "type" | "providerOptions" | `providerOptions.${string}` | "data">, import("convex/values").VObject<{
        providerOptions?: Record<string, Record<string, any>> | undefined;
        type: "tool-call";
        toolCallId: string;
        toolName: string;
        args: any;
    }, {
        type: import("convex/values").VLiteral<"tool-call", "required">;
        toolCallId: import("convex/values").VString<string, "required">;
        toolName: import("convex/values").VString<string, "required">;
        args: import("convex/values").VAny<any, "required", string>;
        providerOptions: import("convex/values").VRecord<Record<string, Record<string, any>> | undefined, import("convex/values").VString<string, "required">, import("convex/values").VRecord<Record<string, any>, import("convex/values").VString<string, "required">, import("convex/values").VAny<any, "required", string>, "required", string>, "optional", string>;
    }, "required", "type" | "providerOptions" | `providerOptions.${string}` | "toolCallId" | "toolName" | "args" | `args.${string}`>], "required", "type" | "providerOptions" | "text" | `providerOptions.${string}` | "mimeType" | "data" | "filename" | "signature" | "toolCallId" | "toolName" | "args" | `args.${string}`>, "required">], "required", never>;
    providerOptions: import("convex/values").VRecord<Record<string, Record<string, any>> | undefined, import("convex/values").VString<string, "required">, import("convex/values").VRecord<Record<string, any>, import("convex/values").VString<string, "required">, import("convex/values").VAny<any, "required", string>, "required", string>, "optional", string>;
}, "required", "providerOptions" | "role" | `providerOptions.${string}` | "content">, import("convex/values").VObject<{
    providerOptions?: Record<string, Record<string, any>> | undefined;
    role: "tool";
    content: {
        providerOptions?: Record<string, Record<string, any>> | undefined;
        args?: any;
        experimental_content?: ({
            type: "text";
            text: string;
        } | {
            mimeType?: string | undefined;
            type: "image";
            data: string;
        })[] | undefined;
        isError?: boolean | undefined;
        type: "tool-result";
        toolCallId: string;
        toolName: string;
        result: any;
    }[];
}, {
    role: import("convex/values").VLiteral<"tool", "required">;
    content: import("convex/values").VArray<{
        providerOptions?: Record<string, Record<string, any>> | undefined;
        args?: any;
        experimental_content?: ({
            type: "text";
            text: string;
        } | {
            mimeType?: string | undefined;
            type: "image";
            data: string;
        })[] | undefined;
        isError?: boolean | undefined;
        type: "tool-result";
        toolCallId: string;
        toolName: string;
        result: any;
    }[], import("convex/values").VObject<{
        providerOptions?: Record<string, Record<string, any>> | undefined;
        args?: any;
        experimental_content?: ({
            type: "text";
            text: string;
        } | {
            mimeType?: string | undefined;
            type: "image";
            data: string;
        })[] | undefined;
        isError?: boolean | undefined;
        type: "tool-result";
        toolCallId: string;
        toolName: string;
        result: any;
    }, {
        type: import("convex/values").VLiteral<"tool-result", "required">;
        toolCallId: import("convex/values").VString<string, "required">;
        toolName: import("convex/values").VString<string, "required">;
        result: import("convex/values").VAny<any, "required", string>;
        args: import("convex/values").VAny<any, "optional", string>;
        experimental_content: import("convex/values").VArray<({
            type: "text";
            text: string;
        } | {
            mimeType?: string | undefined;
            type: "image";
            data: string;
        })[] | undefined, import("convex/values").VUnion<{
            type: "text";
            text: string;
        } | {
            mimeType?: string | undefined;
            type: "image";
            data: string;
        }, [import("convex/values").VObject<{
            type: "text";
            text: string;
        }, {
            type: import("convex/values").VLiteral<"text", "required">;
            text: import("convex/values").VString<string, "required">;
        }, "required", "type" | "text">, import("convex/values").VObject<{
            mimeType?: string | undefined;
            type: "image";
            data: string;
        }, {
            type: import("convex/values").VLiteral<"image", "required">;
            data: import("convex/values").VString<string, "required">;
            mimeType: import("convex/values").VString<string | undefined, "optional">;
        }, "required", "type" | "mimeType" | "data">], "required", "type" | "text" | "mimeType" | "data">, "optional">;
        isError: import("convex/values").VBoolean<boolean | undefined, "optional">;
        providerOptions: import("convex/values").VRecord<Record<string, Record<string, any>> | undefined, import("convex/values").VString<string, "required">, import("convex/values").VRecord<Record<string, any>, import("convex/values").VString<string, "required">, import("convex/values").VAny<any, "required", string>, "required", string>, "optional", string>;
    }, "required", "type" | "providerOptions" | `providerOptions.${string}` | "toolCallId" | "toolName" | "args" | `args.${string}` | "result" | "experimental_content" | "isError" | `result.${string}`>, "required">;
    providerOptions: import("convex/values").VRecord<Record<string, Record<string, any>> | undefined, import("convex/values").VString<string, "required">, import("convex/values").VRecord<Record<string, any>, import("convex/values").VString<string, "required">, import("convex/values").VAny<any, "required", string>, "required", string>, "optional", string>;
}, "required", "providerOptions" | "role" | `providerOptions.${string}` | "content">, import("convex/values").VObject<{
    providerOptions?: Record<string, Record<string, any>> | undefined;
    role: "system";
    content: string;
}, {
    role: import("convex/values").VLiteral<"system", "required">;
    content: import("convex/values").VString<string, "required">;
    providerOptions: import("convex/values").VRecord<Record<string, Record<string, any>> | undefined, import("convex/values").VString<string, "required">, import("convex/values").VRecord<Record<string, any>, import("convex/values").VString<string, "required">, import("convex/values").VAny<any, "required", string>, "required", string>, "optional", string>;
}, "required", "providerOptions" | "role" | `providerOptions.${string}` | "content">], "required", "providerOptions" | "role" | `providerOptions.${string}` | "content">;
export type Message = Infer<typeof vMessage>;
export declare const vSource: import("convex/values").VObject<{
    title?: string | undefined;
    providerOptions?: Record<string, Record<string, any>> | undefined;
    id: string;
    sourceType: "url";
    url: string;
}, {
    sourceType: import("convex/values").VLiteral<"url", "required">;
    id: import("convex/values").VString<string, "required">;
    url: import("convex/values").VString<string, "required">;
    title: import("convex/values").VString<string | undefined, "optional">;
    providerOptions: import("convex/values").VRecord<Record<string, Record<string, any>> | undefined, import("convex/values").VString<string, "required">, import("convex/values").VRecord<Record<string, any>, import("convex/values").VString<string, "required">, import("convex/values").VAny<any, "required", string>, "required", string>, "optional", string>;
}, "required", "id" | "title" | "providerOptions" | `providerOptions.${string}` | "sourceType" | "url">;
export declare const vRequest: import("convex/values").VObject<{
    url?: string | undefined;
    body?: any;
    headers?: Record<string, string> | undefined;
    method?: string | undefined;
}, {
    body: import("convex/values").VAny<any, "optional", string>;
    headers: import("convex/values").VRecord<Record<string, string> | undefined, import("convex/values").VString<string, "required">, import("convex/values").VString<string, "required">, "optional", string>;
    method: import("convex/values").VString<string | undefined, "optional">;
    url: import("convex/values").VString<string | undefined, "optional">;
}, "required", "url" | "body" | "headers" | "method" | `body.${string}` | `headers.${string}`>;
export declare const vResponse: import("convex/values").VObject<{
    body?: any;
    headers?: Record<string, string> | undefined;
    id: string;
    messages: {
        id?: string | undefined;
        fileId?: import("convex/values").GenericId<"files"> | undefined;
        message: {
            providerOptions?: Record<string, Record<string, any>> | undefined;
            role: "user";
            content: string | ({
                providerOptions?: Record<string, Record<string, any>> | undefined;
                type: "text";
                text: string;
            } | {
                providerOptions?: Record<string, Record<string, any>> | undefined;
                mimeType?: string | undefined;
                type: "image";
                image: string | ArrayBuffer;
            } | {
                providerOptions?: Record<string, Record<string, any>> | undefined;
                filename?: string | undefined;
                type: "file";
                mimeType: string;
                data: string | ArrayBuffer;
            })[];
        } | {
            providerOptions?: Record<string, Record<string, any>> | undefined;
            role: "assistant";
            content: string | ({
                providerOptions?: Record<string, Record<string, any>> | undefined;
                type: "text";
                text: string;
            } | {
                providerOptions?: Record<string, Record<string, any>> | undefined;
                filename?: string | undefined;
                type: "file";
                mimeType: string;
                data: string | ArrayBuffer;
            } | {
                providerOptions?: Record<string, Record<string, any>> | undefined;
                signature?: string | undefined;
                type: "reasoning";
                text: string;
            } | {
                providerOptions?: Record<string, Record<string, any>> | undefined;
                type: "redacted-reasoning";
                data: string;
            } | {
                providerOptions?: Record<string, Record<string, any>> | undefined;
                type: "tool-call";
                toolCallId: string;
                toolName: string;
                args: any;
            })[];
        } | {
            providerOptions?: Record<string, Record<string, any>> | undefined;
            role: "tool";
            content: {
                providerOptions?: Record<string, Record<string, any>> | undefined;
                args?: any;
                experimental_content?: ({
                    type: "text";
                    text: string;
                } | {
                    mimeType?: string | undefined;
                    type: "image";
                    data: string;
                })[] | undefined;
                isError?: boolean | undefined;
                type: "tool-result";
                toolCallId: string;
                toolName: string;
                result: any;
            }[];
        } | {
            providerOptions?: Record<string, Record<string, any>> | undefined;
            role: "system";
            content: string;
        };
    }[];
    timestamp: number;
    modelId: string;
}, {
    id: import("convex/values").VString<string, "required">;
    timestamp: import("convex/values").VFloat64<number, "required">;
    modelId: import("convex/values").VString<string, "required">;
    headers: import("convex/values").VRecord<Record<string, string> | undefined, import("convex/values").VString<string, "required">, import("convex/values").VString<string, "required">, "optional", string>;
    messages: import("convex/values").VArray<{
        id?: string | undefined;
        fileId?: import("convex/values").GenericId<"files"> | undefined;
        message: {
            providerOptions?: Record<string, Record<string, any>> | undefined;
            role: "user";
            content: string | ({
                providerOptions?: Record<string, Record<string, any>> | undefined;
                type: "text";
                text: string;
            } | {
                providerOptions?: Record<string, Record<string, any>> | undefined;
                mimeType?: string | undefined;
                type: "image";
                image: string | ArrayBuffer;
            } | {
                providerOptions?: Record<string, Record<string, any>> | undefined;
                filename?: string | undefined;
                type: "file";
                mimeType: string;
                data: string | ArrayBuffer;
            })[];
        } | {
            providerOptions?: Record<string, Record<string, any>> | undefined;
            role: "assistant";
            content: string | ({
                providerOptions?: Record<string, Record<string, any>> | undefined;
                type: "text";
                text: string;
            } | {
                providerOptions?: Record<string, Record<string, any>> | undefined;
                filename?: string | undefined;
                type: "file";
                mimeType: string;
                data: string | ArrayBuffer;
            } | {
                providerOptions?: Record<string, Record<string, any>> | undefined;
                signature?: string | undefined;
                type: "reasoning";
                text: string;
            } | {
                providerOptions?: Record<string, Record<string, any>> | undefined;
                type: "redacted-reasoning";
                data: string;
            } | {
                providerOptions?: Record<string, Record<string, any>> | undefined;
                type: "tool-call";
                toolCallId: string;
                toolName: string;
                args: any;
            })[];
        } | {
            providerOptions?: Record<string, Record<string, any>> | undefined;
            role: "tool";
            content: {
                providerOptions?: Record<string, Record<string, any>> | undefined;
                args?: any;
                experimental_content?: ({
                    type: "text";
                    text: string;
                } | {
                    mimeType?: string | undefined;
                    type: "image";
                    data: string;
                })[] | undefined;
                isError?: boolean | undefined;
                type: "tool-result";
                toolCallId: string;
                toolName: string;
                result: any;
            }[];
        } | {
            providerOptions?: Record<string, Record<string, any>> | undefined;
            role: "system";
            content: string;
        };
    }[], import("convex/values").VObject<{
        id?: string | undefined;
        fileId?: import("convex/values").GenericId<"files"> | undefined;
        message: {
            providerOptions?: Record<string, Record<string, any>> | undefined;
            role: "user";
            content: string | ({
                providerOptions?: Record<string, Record<string, any>> | undefined;
                type: "text";
                text: string;
            } | {
                providerOptions?: Record<string, Record<string, any>> | undefined;
                mimeType?: string | undefined;
                type: "image";
                image: string | ArrayBuffer;
            } | {
                providerOptions?: Record<string, Record<string, any>> | undefined;
                filename?: string | undefined;
                type: "file";
                mimeType: string;
                data: string | ArrayBuffer;
            })[];
        } | {
            providerOptions?: Record<string, Record<string, any>> | undefined;
            role: "assistant";
            content: string | ({
                providerOptions?: Record<string, Record<string, any>> | undefined;
                type: "text";
                text: string;
            } | {
                providerOptions?: Record<string, Record<string, any>> | undefined;
                filename?: string | undefined;
                type: "file";
                mimeType: string;
                data: string | ArrayBuffer;
            } | {
                providerOptions?: Record<string, Record<string, any>> | undefined;
                signature?: string | undefined;
                type: "reasoning";
                text: string;
            } | {
                providerOptions?: Record<string, Record<string, any>> | undefined;
                type: "redacted-reasoning";
                data: string;
            } | {
                providerOptions?: Record<string, Record<string, any>> | undefined;
                type: "tool-call";
                toolCallId: string;
                toolName: string;
                args: any;
            })[];
        } | {
            providerOptions?: Record<string, Record<string, any>> | undefined;
            role: "tool";
            content: {
                providerOptions?: Record<string, Record<string, any>> | undefined;
                args?: any;
                experimental_content?: ({
                    type: "text";
                    text: string;
                } | {
                    mimeType?: string | undefined;
                    type: "image";
                    data: string;
                })[] | undefined;
                isError?: boolean | undefined;
                type: "tool-result";
                toolCallId: string;
                toolName: string;
                result: any;
            }[];
        } | {
            providerOptions?: Record<string, Record<string, any>> | undefined;
            role: "system";
            content: string;
        };
    }, {
        id: import("convex/values").VString<string | undefined, "optional">;
        message: import("convex/values").VUnion<{
            providerOptions?: Record<string, Record<string, any>> | undefined;
            role: "user";
            content: string | ({
                providerOptions?: Record<string, Record<string, any>> | undefined;
                type: "text";
                text: string;
            } | {
                providerOptions?: Record<string, Record<string, any>> | undefined;
                mimeType?: string | undefined;
                type: "image";
                image: string | ArrayBuffer;
            } | {
                providerOptions?: Record<string, Record<string, any>> | undefined;
                filename?: string | undefined;
                type: "file";
                mimeType: string;
                data: string | ArrayBuffer;
            })[];
        } | {
            providerOptions?: Record<string, Record<string, any>> | undefined;
            role: "assistant";
            content: string | ({
                providerOptions?: Record<string, Record<string, any>> | undefined;
                type: "text";
                text: string;
            } | {
                providerOptions?: Record<string, Record<string, any>> | undefined;
                filename?: string | undefined;
                type: "file";
                mimeType: string;
                data: string | ArrayBuffer;
            } | {
                providerOptions?: Record<string, Record<string, any>> | undefined;
                signature?: string | undefined;
                type: "reasoning";
                text: string;
            } | {
                providerOptions?: Record<string, Record<string, any>> | undefined;
                type: "redacted-reasoning";
                data: string;
            } | {
                providerOptions?: Record<string, Record<string, any>> | undefined;
                type: "tool-call";
                toolCallId: string;
                toolName: string;
                args: any;
            })[];
        } | {
            providerOptions?: Record<string, Record<string, any>> | undefined;
            role: "tool";
            content: {
                providerOptions?: Record<string, Record<string, any>> | undefined;
                args?: any;
                experimental_content?: ({
                    type: "text";
                    text: string;
                } | {
                    mimeType?: string | undefined;
                    type: "image";
                    data: string;
                })[] | undefined;
                isError?: boolean | undefined;
                type: "tool-result";
                toolCallId: string;
                toolName: string;
                result: any;
            }[];
        } | {
            providerOptions?: Record<string, Record<string, any>> | undefined;
            role: "system";
            content: string;
        }, [import("convex/values").VObject<{
            providerOptions?: Record<string, Record<string, any>> | undefined;
            role: "user";
            content: string | ({
                providerOptions?: Record<string, Record<string, any>> | undefined;
                type: "text";
                text: string;
            } | {
                providerOptions?: Record<string, Record<string, any>> | undefined;
                mimeType?: string | undefined;
                type: "image";
                image: string | ArrayBuffer;
            } | {
                providerOptions?: Record<string, Record<string, any>> | undefined;
                filename?: string | undefined;
                type: "file";
                mimeType: string;
                data: string | ArrayBuffer;
            })[];
        }, {
            role: import("convex/values").VLiteral<"user", "required">;
            content: import("convex/values").VUnion<string | ({
                providerOptions?: Record<string, Record<string, any>> | undefined;
                type: "text";
                text: string;
            } | {
                providerOptions?: Record<string, Record<string, any>> | undefined;
                mimeType?: string | undefined;
                type: "image";
                image: string | ArrayBuffer;
            } | {
                providerOptions?: Record<string, Record<string, any>> | undefined;
                filename?: string | undefined;
                type: "file";
                mimeType: string;
                data: string | ArrayBuffer;
            })[], [import("convex/values").VString<string, "required">, import("convex/values").VArray<({
                providerOptions?: Record<string, Record<string, any>> | undefined;
                type: "text";
                text: string;
            } | {
                providerOptions?: Record<string, Record<string, any>> | undefined;
                mimeType?: string | undefined;
                type: "image";
                image: string | ArrayBuffer;
            } | {
                providerOptions?: Record<string, Record<string, any>> | undefined;
                filename?: string | undefined;
                type: "file";
                mimeType: string;
                data: string | ArrayBuffer;
            })[], import("convex/values").VUnion<{
                providerOptions?: Record<string, Record<string, any>> | undefined;
                type: "text";
                text: string;
            } | {
                providerOptions?: Record<string, Record<string, any>> | undefined;
                mimeType?: string | undefined;
                type: "image";
                image: string | ArrayBuffer;
            } | {
                providerOptions?: Record<string, Record<string, any>> | undefined;
                filename?: string | undefined;
                type: "file";
                mimeType: string;
                data: string | ArrayBuffer;
            }, [import("convex/values").VObject<{
                providerOptions?: Record<string, Record<string, any>> | undefined;
                type: "text";
                text: string;
            }, {
                type: import("convex/values").VLiteral<"text", "required">;
                text: import("convex/values").VString<string, "required">;
                providerOptions: import("convex/values").VRecord<Record<string, Record<string, any>> | undefined, import("convex/values").VString<string, "required">, import("convex/values").VRecord<Record<string, any>, import("convex/values").VString<string, "required">, import("convex/values").VAny<any, "required", string>, "required", string>, "optional", string>;
            }, "required", "type" | "providerOptions" | "text" | `providerOptions.${string}`>, import("convex/values").VObject<{
                providerOptions?: Record<string, Record<string, any>> | undefined;
                mimeType?: string | undefined;
                type: "image";
                image: string | ArrayBuffer;
            }, {
                type: import("convex/values").VLiteral<"image", "required">;
                image: import("convex/values").VUnion<string | ArrayBuffer, [import("convex/values").VString<string, "required">, import("convex/values").VBytes<ArrayBuffer, "required">], "required", never>;
                mimeType: import("convex/values").VString<string | undefined, "optional">;
                providerOptions: import("convex/values").VRecord<Record<string, Record<string, any>> | undefined, import("convex/values").VString<string, "required">, import("convex/values").VRecord<Record<string, any>, import("convex/values").VString<string, "required">, import("convex/values").VAny<any, "required", string>, "required", string>, "optional", string>;
            }, "required", "type" | "providerOptions" | `providerOptions.${string}` | "image" | "mimeType">, import("convex/values").VObject<{
                providerOptions?: Record<string, Record<string, any>> | undefined;
                filename?: string | undefined;
                type: "file";
                mimeType: string;
                data: string | ArrayBuffer;
            }, {
                type: import("convex/values").VLiteral<"file", "required">;
                data: import("convex/values").VUnion<string | ArrayBuffer, [import("convex/values").VString<string, "required">, import("convex/values").VBytes<ArrayBuffer, "required">], "required", never>;
                filename: import("convex/values").VString<string | undefined, "optional">;
                mimeType: import("convex/values").VString<string, "required">;
                providerOptions: import("convex/values").VRecord<Record<string, Record<string, any>> | undefined, import("convex/values").VString<string, "required">, import("convex/values").VRecord<Record<string, any>, import("convex/values").VString<string, "required">, import("convex/values").VAny<any, "required", string>, "required", string>, "optional", string>;
            }, "required", "type" | "providerOptions" | `providerOptions.${string}` | "mimeType" | "data" | "filename">], "required", "type" | "providerOptions" | "text" | `providerOptions.${string}` | "image" | "mimeType" | "data" | "filename">, "required">], "required", never>;
            providerOptions: import("convex/values").VRecord<Record<string, Record<string, any>> | undefined, import("convex/values").VString<string, "required">, import("convex/values").VRecord<Record<string, any>, import("convex/values").VString<string, "required">, import("convex/values").VAny<any, "required", string>, "required", string>, "optional", string>;
        }, "required", "providerOptions" | "role" | `providerOptions.${string}` | "content">, import("convex/values").VObject<{
            providerOptions?: Record<string, Record<string, any>> | undefined;
            role: "assistant";
            content: string | ({
                providerOptions?: Record<string, Record<string, any>> | undefined;
                type: "text";
                text: string;
            } | {
                providerOptions?: Record<string, Record<string, any>> | undefined;
                filename?: string | undefined;
                type: "file";
                mimeType: string;
                data: string | ArrayBuffer;
            } | {
                providerOptions?: Record<string, Record<string, any>> | undefined;
                signature?: string | undefined;
                type: "reasoning";
                text: string;
            } | {
                providerOptions?: Record<string, Record<string, any>> | undefined;
                type: "redacted-reasoning";
                data: string;
            } | {
                providerOptions?: Record<string, Record<string, any>> | undefined;
                type: "tool-call";
                toolCallId: string;
                toolName: string;
                args: any;
            })[];
        }, {
            role: import("convex/values").VLiteral<"assistant", "required">;
            content: import("convex/values").VUnion<string | ({
                providerOptions?: Record<string, Record<string, any>> | undefined;
                type: "text";
                text: string;
            } | {
                providerOptions?: Record<string, Record<string, any>> | undefined;
                filename?: string | undefined;
                type: "file";
                mimeType: string;
                data: string | ArrayBuffer;
            } | {
                providerOptions?: Record<string, Record<string, any>> | undefined;
                signature?: string | undefined;
                type: "reasoning";
                text: string;
            } | {
                providerOptions?: Record<string, Record<string, any>> | undefined;
                type: "redacted-reasoning";
                data: string;
            } | {
                providerOptions?: Record<string, Record<string, any>> | undefined;
                type: "tool-call";
                toolCallId: string;
                toolName: string;
                args: any;
            })[], [import("convex/values").VString<string, "required">, import("convex/values").VArray<({
                providerOptions?: Record<string, Record<string, any>> | undefined;
                type: "text";
                text: string;
            } | {
                providerOptions?: Record<string, Record<string, any>> | undefined;
                filename?: string | undefined;
                type: "file";
                mimeType: string;
                data: string | ArrayBuffer;
            } | {
                providerOptions?: Record<string, Record<string, any>> | undefined;
                signature?: string | undefined;
                type: "reasoning";
                text: string;
            } | {
                providerOptions?: Record<string, Record<string, any>> | undefined;
                type: "redacted-reasoning";
                data: string;
            } | {
                providerOptions?: Record<string, Record<string, any>> | undefined;
                type: "tool-call";
                toolCallId: string;
                toolName: string;
                args: any;
            })[], import("convex/values").VUnion<{
                providerOptions?: Record<string, Record<string, any>> | undefined;
                type: "text";
                text: string;
            } | {
                providerOptions?: Record<string, Record<string, any>> | undefined;
                filename?: string | undefined;
                type: "file";
                mimeType: string;
                data: string | ArrayBuffer;
            } | {
                providerOptions?: Record<string, Record<string, any>> | undefined;
                signature?: string | undefined;
                type: "reasoning";
                text: string;
            } | {
                providerOptions?: Record<string, Record<string, any>> | undefined;
                type: "redacted-reasoning";
                data: string;
            } | {
                providerOptions?: Record<string, Record<string, any>> | undefined;
                type: "tool-call";
                toolCallId: string;
                toolName: string;
                args: any;
            }, [import("convex/values").VObject<{
                providerOptions?: Record<string, Record<string, any>> | undefined;
                type: "text";
                text: string;
            }, {
                type: import("convex/values").VLiteral<"text", "required">;
                text: import("convex/values").VString<string, "required">;
                providerOptions: import("convex/values").VRecord<Record<string, Record<string, any>> | undefined, import("convex/values").VString<string, "required">, import("convex/values").VRecord<Record<string, any>, import("convex/values").VString<string, "required">, import("convex/values").VAny<any, "required", string>, "required", string>, "optional", string>;
            }, "required", "type" | "providerOptions" | "text" | `providerOptions.${string}`>, import("convex/values").VObject<{
                providerOptions?: Record<string, Record<string, any>> | undefined;
                filename?: string | undefined;
                type: "file";
                mimeType: string;
                data: string | ArrayBuffer;
            }, {
                type: import("convex/values").VLiteral<"file", "required">;
                data: import("convex/values").VUnion<string | ArrayBuffer, [import("convex/values").VString<string, "required">, import("convex/values").VBytes<ArrayBuffer, "required">], "required", never>;
                filename: import("convex/values").VString<string | undefined, "optional">;
                mimeType: import("convex/values").VString<string, "required">;
                providerOptions: import("convex/values").VRecord<Record<string, Record<string, any>> | undefined, import("convex/values").VString<string, "required">, import("convex/values").VRecord<Record<string, any>, import("convex/values").VString<string, "required">, import("convex/values").VAny<any, "required", string>, "required", string>, "optional", string>;
            }, "required", "type" | "providerOptions" | `providerOptions.${string}` | "mimeType" | "data" | "filename">, import("convex/values").VObject<{
                providerOptions?: Record<string, Record<string, any>> | undefined;
                signature?: string | undefined;
                type: "reasoning";
                text: string;
            }, {
                type: import("convex/values").VLiteral<"reasoning", "required">;
                text: import("convex/values").VString<string, "required">;
                signature: import("convex/values").VString<string | undefined, "optional">;
                providerOptions: import("convex/values").VRecord<Record<string, Record<string, any>> | undefined, import("convex/values").VString<string, "required">, import("convex/values").VRecord<Record<string, any>, import("convex/values").VString<string, "required">, import("convex/values").VAny<any, "required", string>, "required", string>, "optional", string>;
            }, "required", "type" | "providerOptions" | "text" | `providerOptions.${string}` | "signature">, import("convex/values").VObject<{
                providerOptions?: Record<string, Record<string, any>> | undefined;
                type: "redacted-reasoning";
                data: string;
            }, {
                type: import("convex/values").VLiteral<"redacted-reasoning", "required">;
                data: import("convex/values").VString<string, "required">;
                providerOptions: import("convex/values").VRecord<Record<string, Record<string, any>> | undefined, import("convex/values").VString<string, "required">, import("convex/values").VRecord<Record<string, any>, import("convex/values").VString<string, "required">, import("convex/values").VAny<any, "required", string>, "required", string>, "optional", string>;
            }, "required", "type" | "providerOptions" | `providerOptions.${string}` | "data">, import("convex/values").VObject<{
                providerOptions?: Record<string, Record<string, any>> | undefined;
                type: "tool-call";
                toolCallId: string;
                toolName: string;
                args: any;
            }, {
                type: import("convex/values").VLiteral<"tool-call", "required">;
                toolCallId: import("convex/values").VString<string, "required">;
                toolName: import("convex/values").VString<string, "required">;
                args: import("convex/values").VAny<any, "required", string>;
                providerOptions: import("convex/values").VRecord<Record<string, Record<string, any>> | undefined, import("convex/values").VString<string, "required">, import("convex/values").VRecord<Record<string, any>, import("convex/values").VString<string, "required">, import("convex/values").VAny<any, "required", string>, "required", string>, "optional", string>;
            }, "required", "type" | "providerOptions" | `providerOptions.${string}` | "toolCallId" | "toolName" | "args" | `args.${string}`>], "required", "type" | "providerOptions" | "text" | `providerOptions.${string}` | "mimeType" | "data" | "filename" | "signature" | "toolCallId" | "toolName" | "args" | `args.${string}`>, "required">], "required", never>;
            providerOptions: import("convex/values").VRecord<Record<string, Record<string, any>> | undefined, import("convex/values").VString<string, "required">, import("convex/values").VRecord<Record<string, any>, import("convex/values").VString<string, "required">, import("convex/values").VAny<any, "required", string>, "required", string>, "optional", string>;
        }, "required", "providerOptions" | "role" | `providerOptions.${string}` | "content">, import("convex/values").VObject<{
            providerOptions?: Record<string, Record<string, any>> | undefined;
            role: "tool";
            content: {
                providerOptions?: Record<string, Record<string, any>> | undefined;
                args?: any;
                experimental_content?: ({
                    type: "text";
                    text: string;
                } | {
                    mimeType?: string | undefined;
                    type: "image";
                    data: string;
                })[] | undefined;
                isError?: boolean | undefined;
                type: "tool-result";
                toolCallId: string;
                toolName: string;
                result: any;
            }[];
        }, {
            role: import("convex/values").VLiteral<"tool", "required">;
            content: import("convex/values").VArray<{
                providerOptions?: Record<string, Record<string, any>> | undefined;
                args?: any;
                experimental_content?: ({
                    type: "text";
                    text: string;
                } | {
                    mimeType?: string | undefined;
                    type: "image";
                    data: string;
                })[] | undefined;
                isError?: boolean | undefined;
                type: "tool-result";
                toolCallId: string;
                toolName: string;
                result: any;
            }[], import("convex/values").VObject<{
                providerOptions?: Record<string, Record<string, any>> | undefined;
                args?: any;
                experimental_content?: ({
                    type: "text";
                    text: string;
                } | {
                    mimeType?: string | undefined;
                    type: "image";
                    data: string;
                })[] | undefined;
                isError?: boolean | undefined;
                type: "tool-result";
                toolCallId: string;
                toolName: string;
                result: any;
            }, {
                type: import("convex/values").VLiteral<"tool-result", "required">;
                toolCallId: import("convex/values").VString<string, "required">;
                toolName: import("convex/values").VString<string, "required">;
                result: import("convex/values").VAny<any, "required", string>;
                args: import("convex/values").VAny<any, "optional", string>;
                experimental_content: import("convex/values").VArray<({
                    type: "text";
                    text: string;
                } | {
                    mimeType?: string | undefined;
                    type: "image";
                    data: string;
                })[] | undefined, import("convex/values").VUnion<{
                    type: "text";
                    text: string;
                } | {
                    mimeType?: string | undefined;
                    type: "image";
                    data: string;
                }, [import("convex/values").VObject<{
                    type: "text";
                    text: string;
                }, {
                    type: import("convex/values").VLiteral<"text", "required">;
                    text: import("convex/values").VString<string, "required">;
                }, "required", "type" | "text">, import("convex/values").VObject<{
                    mimeType?: string | undefined;
                    type: "image";
                    data: string;
                }, {
                    type: import("convex/values").VLiteral<"image", "required">;
                    data: import("convex/values").VString<string, "required">;
                    mimeType: import("convex/values").VString<string | undefined, "optional">;
                }, "required", "type" | "mimeType" | "data">], "required", "type" | "text" | "mimeType" | "data">, "optional">;
                isError: import("convex/values").VBoolean<boolean | undefined, "optional">;
                providerOptions: import("convex/values").VRecord<Record<string, Record<string, any>> | undefined, import("convex/values").VString<string, "required">, import("convex/values").VRecord<Record<string, any>, import("convex/values").VString<string, "required">, import("convex/values").VAny<any, "required", string>, "required", string>, "optional", string>;
            }, "required", "type" | "providerOptions" | `providerOptions.${string}` | "toolCallId" | "toolName" | "args" | `args.${string}` | "result" | "experimental_content" | "isError" | `result.${string}`>, "required">;
            providerOptions: import("convex/values").VRecord<Record<string, Record<string, any>> | undefined, import("convex/values").VString<string, "required">, import("convex/values").VRecord<Record<string, any>, import("convex/values").VString<string, "required">, import("convex/values").VAny<any, "required", string>, "required", string>, "optional", string>;
        }, "required", "providerOptions" | "role" | `providerOptions.${string}` | "content">, import("convex/values").VObject<{
            providerOptions?: Record<string, Record<string, any>> | undefined;
            role: "system";
            content: string;
        }, {
            role: import("convex/values").VLiteral<"system", "required">;
            content: import("convex/values").VString<string, "required">;
            providerOptions: import("convex/values").VRecord<Record<string, Record<string, any>> | undefined, import("convex/values").VString<string, "required">, import("convex/values").VRecord<Record<string, any>, import("convex/values").VString<string, "required">, import("convex/values").VAny<any, "required", string>, "required", string>, "optional", string>;
        }, "required", "providerOptions" | "role" | `providerOptions.${string}` | "content">], "required", "providerOptions" | "role" | `providerOptions.${string}` | "content">;
        fileId: import("convex/values").VId<import("convex/values").GenericId<"files"> | undefined, "optional">;
    }, "required", "id" | "message" | "message.providerOptions" | "message.role" | `message.providerOptions.${string}` | "message.content" | "fileId">, "required">;
    body: import("convex/values").VAny<any, "optional", string>;
}, "required", "id" | "messages" | "body" | "headers" | `body.${string}` | `headers.${string}` | "timestamp" | "modelId">;
export declare const vResponseWithoutMessages: import("convex/values").VObject<{
    body?: any;
    headers?: Record<string, string> | undefined;
    id: string;
    timestamp: number;
    modelId: string;
}, {
    id: import("convex/values").VString<string, "required">;
    timestamp: import("convex/values").VFloat64<number, "required">;
    modelId: import("convex/values").VString<string, "required">;
    headers: import("convex/values").VRecord<Record<string, string> | undefined, import("convex/values").VString<string, "required">, import("convex/values").VString<string, "required">, "optional", string>;
    body: import("convex/values").VAny<any, "optional", string>;
}, "required", "id" | "body" | "headers" | `body.${string}` | `headers.${string}` | "timestamp" | "modelId">;
export declare const vFinishReason: import("convex/values").VUnion<"length" | "error" | "other" | "stop" | "content-filter" | "tool-calls" | "unknown", [import("convex/values").VLiteral<"stop", "required">, import("convex/values").VLiteral<"length", "required">, import("convex/values").VLiteral<"content-filter", "required">, import("convex/values").VLiteral<"tool-calls", "required">, import("convex/values").VLiteral<"error", "required">, import("convex/values").VLiteral<"other", "required">, import("convex/values").VLiteral<"unknown", "required">], "required", never>;
export declare const vUsage: import("convex/values").VObject<{
    promptTokens: number;
    completionTokens: number;
    totalTokens: number;
}, {
    promptTokens: import("convex/values").VFloat64<number, "required">;
    completionTokens: import("convex/values").VFloat64<number, "required">;
    totalTokens: import("convex/values").VFloat64<number, "required">;
}, "required", "promptTokens" | "completionTokens" | "totalTokens">;
export type Usage = Infer<typeof vUsage>;
export declare const vLanguageModelV1CallWarning: import("convex/values").VUnion<{
    details?: string | undefined;
    type: "unsupported-setting";
    setting: string;
} | {
    details?: string | undefined;
    type: "unsupported-tool";
    tool: any;
} | {
    type: "other";
    message: string;
}, [import("convex/values").VObject<{
    details?: string | undefined;
    type: "unsupported-setting";
    setting: string;
}, {
    type: import("convex/values").VLiteral<"unsupported-setting", "required">;
    setting: import("convex/values").VString<string, "required">;
    details: import("convex/values").VString<string | undefined, "optional">;
}, "required", "type" | "setting" | "details">, import("convex/values").VObject<{
    details?: string | undefined;
    type: "unsupported-tool";
    tool: any;
}, {
    type: import("convex/values").VLiteral<"unsupported-tool", "required">;
    tool: import("convex/values").VAny<any, "required", string>;
    details: import("convex/values").VString<string | undefined, "optional">;
}, "required", "type" | "tool" | "details" | `tool.${string}`>, import("convex/values").VObject<{
    type: "other";
    message: string;
}, {
    type: import("convex/values").VLiteral<"other", "required">;
    message: import("convex/values").VString<string, "required">;
}, "required", "type" | "message">], "required", "type" | "message" | "tool" | "setting" | "details" | `tool.${string}`>;
export declare const vMessageWithMetadataInternal: import("convex/values").VObject<{
    id?: string | undefined;
    fileIds?: import("convex/values").GenericId<"files">[] | undefined;
    error?: string | undefined;
    model?: string | undefined;
    provider?: string | undefined;
    text?: string | undefined;
    reasoning?: string | undefined;
    usage?: {
        promptTokens: number;
        completionTokens: number;
        totalTokens: number;
    } | undefined;
    providerMetadata?: Record<string, Record<string, any>> | undefined;
    sources?: {
        title?: string | undefined;
        providerOptions?: Record<string, Record<string, any>> | undefined;
        id: string;
        sourceType: "url";
        url: string;
    }[] | undefined;
    reasoningDetails?: ({
        signature?: string | undefined;
        type: "text";
        text: string;
    } | {
        type: "redacted";
        data: string;
    })[] | undefined;
    warnings?: ({
        details?: string | undefined;
        type: "unsupported-setting";
        setting: string;
    } | {
        details?: string | undefined;
        type: "unsupported-tool";
        tool: any;
    } | {
        type: "other";
        message: string;
    })[] | undefined;
    finishReason?: "length" | "error" | "other" | "stop" | "content-filter" | "tool-calls" | "unknown" | undefined;
    message: {
        providerOptions?: Record<string, Record<string, any>> | undefined;
        role: "user";
        content: string | ({
            providerOptions?: Record<string, Record<string, any>> | undefined;
            type: "text";
            text: string;
        } | {
            providerOptions?: Record<string, Record<string, any>> | undefined;
            mimeType?: string | undefined;
            type: "image";
            image: string | ArrayBuffer;
        } | {
            providerOptions?: Record<string, Record<string, any>> | undefined;
            filename?: string | undefined;
            type: "file";
            mimeType: string;
            data: string | ArrayBuffer;
        })[];
    } | {
        providerOptions?: Record<string, Record<string, any>> | undefined;
        role: "assistant";
        content: string | ({
            providerOptions?: Record<string, Record<string, any>> | undefined;
            type: "text";
            text: string;
        } | {
            providerOptions?: Record<string, Record<string, any>> | undefined;
            filename?: string | undefined;
            type: "file";
            mimeType: string;
            data: string | ArrayBuffer;
        } | {
            providerOptions?: Record<string, Record<string, any>> | undefined;
            signature?: string | undefined;
            type: "reasoning";
            text: string;
        } | {
            providerOptions?: Record<string, Record<string, any>> | undefined;
            type: "redacted-reasoning";
            data: string;
        } | {
            providerOptions?: Record<string, Record<string, any>> | undefined;
            type: "tool-call";
            toolCallId: string;
            toolName: string;
            args: any;
        })[];
    } | {
        providerOptions?: Record<string, Record<string, any>> | undefined;
        role: "tool";
        content: {
            providerOptions?: Record<string, Record<string, any>> | undefined;
            args?: any;
            experimental_content?: ({
                type: "text";
                text: string;
            } | {
                mimeType?: string | undefined;
                type: "image";
                data: string;
            })[] | undefined;
            isError?: boolean | undefined;
            type: "tool-result";
            toolCallId: string;
            toolName: string;
            result: any;
        }[];
    } | {
        providerOptions?: Record<string, Record<string, any>> | undefined;
        role: "system";
        content: string;
    };
}, {
    id: import("convex/values").VString<string | undefined, "optional">;
    message: import("convex/values").VUnion<{
        providerOptions?: Record<string, Record<string, any>> | undefined;
        role: "user";
        content: string | ({
            providerOptions?: Record<string, Record<string, any>> | undefined;
            type: "text";
            text: string;
        } | {
            providerOptions?: Record<string, Record<string, any>> | undefined;
            mimeType?: string | undefined;
            type: "image";
            image: string | ArrayBuffer;
        } | {
            providerOptions?: Record<string, Record<string, any>> | undefined;
            filename?: string | undefined;
            type: "file";
            mimeType: string;
            data: string | ArrayBuffer;
        })[];
    } | {
        providerOptions?: Record<string, Record<string, any>> | undefined;
        role: "assistant";
        content: string | ({
            providerOptions?: Record<string, Record<string, any>> | undefined;
            type: "text";
            text: string;
        } | {
            providerOptions?: Record<string, Record<string, any>> | undefined;
            filename?: string | undefined;
            type: "file";
            mimeType: string;
            data: string | ArrayBuffer;
        } | {
            providerOptions?: Record<string, Record<string, any>> | undefined;
            signature?: string | undefined;
            type: "reasoning";
            text: string;
        } | {
            providerOptions?: Record<string, Record<string, any>> | undefined;
            type: "redacted-reasoning";
            data: string;
        } | {
            providerOptions?: Record<string, Record<string, any>> | undefined;
            type: "tool-call";
            toolCallId: string;
            toolName: string;
            args: any;
        })[];
    } | {
        providerOptions?: Record<string, Record<string, any>> | undefined;
        role: "tool";
        content: {
            providerOptions?: Record<string, Record<string, any>> | undefined;
            args?: any;
            experimental_content?: ({
                type: "text";
                text: string;
            } | {
                mimeType?: string | undefined;
                type: "image";
                data: string;
            })[] | undefined;
            isError?: boolean | undefined;
            type: "tool-result";
            toolCallId: string;
            toolName: string;
            result: any;
        }[];
    } | {
        providerOptions?: Record<string, Record<string, any>> | undefined;
        role: "system";
        content: string;
    }, [import("convex/values").VObject<{
        providerOptions?: Record<string, Record<string, any>> | undefined;
        role: "user";
        content: string | ({
            providerOptions?: Record<string, Record<string, any>> | undefined;
            type: "text";
            text: string;
        } | {
            providerOptions?: Record<string, Record<string, any>> | undefined;
            mimeType?: string | undefined;
            type: "image";
            image: string | ArrayBuffer;
        } | {
            providerOptions?: Record<string, Record<string, any>> | undefined;
            filename?: string | undefined;
            type: "file";
            mimeType: string;
            data: string | ArrayBuffer;
        })[];
    }, {
        role: import("convex/values").VLiteral<"user", "required">;
        content: import("convex/values").VUnion<string | ({
            providerOptions?: Record<string, Record<string, any>> | undefined;
            type: "text";
            text: string;
        } | {
            providerOptions?: Record<string, Record<string, any>> | undefined;
            mimeType?: string | undefined;
            type: "image";
            image: string | ArrayBuffer;
        } | {
            providerOptions?: Record<string, Record<string, any>> | undefined;
            filename?: string | undefined;
            type: "file";
            mimeType: string;
            data: string | ArrayBuffer;
        })[], [import("convex/values").VString<string, "required">, import("convex/values").VArray<({
            providerOptions?: Record<string, Record<string, any>> | undefined;
            type: "text";
            text: string;
        } | {
            providerOptions?: Record<string, Record<string, any>> | undefined;
            mimeType?: string | undefined;
            type: "image";
            image: string | ArrayBuffer;
        } | {
            providerOptions?: Record<string, Record<string, any>> | undefined;
            filename?: string | undefined;
            type: "file";
            mimeType: string;
            data: string | ArrayBuffer;
        })[], import("convex/values").VUnion<{
            providerOptions?: Record<string, Record<string, any>> | undefined;
            type: "text";
            text: string;
        } | {
            providerOptions?: Record<string, Record<string, any>> | undefined;
            mimeType?: string | undefined;
            type: "image";
            image: string | ArrayBuffer;
        } | {
            providerOptions?: Record<string, Record<string, any>> | undefined;
            filename?: string | undefined;
            type: "file";
            mimeType: string;
            data: string | ArrayBuffer;
        }, [import("convex/values").VObject<{
            providerOptions?: Record<string, Record<string, any>> | undefined;
            type: "text";
            text: string;
        }, {
            type: import("convex/values").VLiteral<"text", "required">;
            text: import("convex/values").VString<string, "required">;
            providerOptions: import("convex/values").VRecord<Record<string, Record<string, any>> | undefined, import("convex/values").VString<string, "required">, import("convex/values").VRecord<Record<string, any>, import("convex/values").VString<string, "required">, import("convex/values").VAny<any, "required", string>, "required", string>, "optional", string>;
        }, "required", "type" | "providerOptions" | "text" | `providerOptions.${string}`>, import("convex/values").VObject<{
            providerOptions?: Record<string, Record<string, any>> | undefined;
            mimeType?: string | undefined;
            type: "image";
            image: string | ArrayBuffer;
        }, {
            type: import("convex/values").VLiteral<"image", "required">;
            image: import("convex/values").VUnion<string | ArrayBuffer, [import("convex/values").VString<string, "required">, import("convex/values").VBytes<ArrayBuffer, "required">], "required", never>;
            mimeType: import("convex/values").VString<string | undefined, "optional">;
            providerOptions: import("convex/values").VRecord<Record<string, Record<string, any>> | undefined, import("convex/values").VString<string, "required">, import("convex/values").VRecord<Record<string, any>, import("convex/values").VString<string, "required">, import("convex/values").VAny<any, "required", string>, "required", string>, "optional", string>;
        }, "required", "type" | "providerOptions" | `providerOptions.${string}` | "image" | "mimeType">, import("convex/values").VObject<{
            providerOptions?: Record<string, Record<string, any>> | undefined;
            filename?: string | undefined;
            type: "file";
            mimeType: string;
            data: string | ArrayBuffer;
        }, {
            type: import("convex/values").VLiteral<"file", "required">;
            data: import("convex/values").VUnion<string | ArrayBuffer, [import("convex/values").VString<string, "required">, import("convex/values").VBytes<ArrayBuffer, "required">], "required", never>;
            filename: import("convex/values").VString<string | undefined, "optional">;
            mimeType: import("convex/values").VString<string, "required">;
            providerOptions: import("convex/values").VRecord<Record<string, Record<string, any>> | undefined, import("convex/values").VString<string, "required">, import("convex/values").VRecord<Record<string, any>, import("convex/values").VString<string, "required">, import("convex/values").VAny<any, "required", string>, "required", string>, "optional", string>;
        }, "required", "type" | "providerOptions" | `providerOptions.${string}` | "mimeType" | "data" | "filename">], "required", "type" | "providerOptions" | "text" | `providerOptions.${string}` | "image" | "mimeType" | "data" | "filename">, "required">], "required", never>;
        providerOptions: import("convex/values").VRecord<Record<string, Record<string, any>> | undefined, import("convex/values").VString<string, "required">, import("convex/values").VRecord<Record<string, any>, import("convex/values").VString<string, "required">, import("convex/values").VAny<any, "required", string>, "required", string>, "optional", string>;
    }, "required", "providerOptions" | "role" | `providerOptions.${string}` | "content">, import("convex/values").VObject<{
        providerOptions?: Record<string, Record<string, any>> | undefined;
        role: "assistant";
        content: string | ({
            providerOptions?: Record<string, Record<string, any>> | undefined;
            type: "text";
            text: string;
        } | {
            providerOptions?: Record<string, Record<string, any>> | undefined;
            filename?: string | undefined;
            type: "file";
            mimeType: string;
            data: string | ArrayBuffer;
        } | {
            providerOptions?: Record<string, Record<string, any>> | undefined;
            signature?: string | undefined;
            type: "reasoning";
            text: string;
        } | {
            providerOptions?: Record<string, Record<string, any>> | undefined;
            type: "redacted-reasoning";
            data: string;
        } | {
            providerOptions?: Record<string, Record<string, any>> | undefined;
            type: "tool-call";
            toolCallId: string;
            toolName: string;
            args: any;
        })[];
    }, {
        role: import("convex/values").VLiteral<"assistant", "required">;
        content: import("convex/values").VUnion<string | ({
            providerOptions?: Record<string, Record<string, any>> | undefined;
            type: "text";
            text: string;
        } | {
            providerOptions?: Record<string, Record<string, any>> | undefined;
            filename?: string | undefined;
            type: "file";
            mimeType: string;
            data: string | ArrayBuffer;
        } | {
            providerOptions?: Record<string, Record<string, any>> | undefined;
            signature?: string | undefined;
            type: "reasoning";
            text: string;
        } | {
            providerOptions?: Record<string, Record<string, any>> | undefined;
            type: "redacted-reasoning";
            data: string;
        } | {
            providerOptions?: Record<string, Record<string, any>> | undefined;
            type: "tool-call";
            toolCallId: string;
            toolName: string;
            args: any;
        })[], [import("convex/values").VString<string, "required">, import("convex/values").VArray<({
            providerOptions?: Record<string, Record<string, any>> | undefined;
            type: "text";
            text: string;
        } | {
            providerOptions?: Record<string, Record<string, any>> | undefined;
            filename?: string | undefined;
            type: "file";
            mimeType: string;
            data: string | ArrayBuffer;
        } | {
            providerOptions?: Record<string, Record<string, any>> | undefined;
            signature?: string | undefined;
            type: "reasoning";
            text: string;
        } | {
            providerOptions?: Record<string, Record<string, any>> | undefined;
            type: "redacted-reasoning";
            data: string;
        } | {
            providerOptions?: Record<string, Record<string, any>> | undefined;
            type: "tool-call";
            toolCallId: string;
            toolName: string;
            args: any;
        })[], import("convex/values").VUnion<{
            providerOptions?: Record<string, Record<string, any>> | undefined;
            type: "text";
            text: string;
        } | {
            providerOptions?: Record<string, Record<string, any>> | undefined;
            filename?: string | undefined;
            type: "file";
            mimeType: string;
            data: string | ArrayBuffer;
        } | {
            providerOptions?: Record<string, Record<string, any>> | undefined;
            signature?: string | undefined;
            type: "reasoning";
            text: string;
        } | {
            providerOptions?: Record<string, Record<string, any>> | undefined;
            type: "redacted-reasoning";
            data: string;
        } | {
            providerOptions?: Record<string, Record<string, any>> | undefined;
            type: "tool-call";
            toolCallId: string;
            toolName: string;
            args: any;
        }, [import("convex/values").VObject<{
            providerOptions?: Record<string, Record<string, any>> | undefined;
            type: "text";
            text: string;
        }, {
            type: import("convex/values").VLiteral<"text", "required">;
            text: import("convex/values").VString<string, "required">;
            providerOptions: import("convex/values").VRecord<Record<string, Record<string, any>> | undefined, import("convex/values").VString<string, "required">, import("convex/values").VRecord<Record<string, any>, import("convex/values").VString<string, "required">, import("convex/values").VAny<any, "required", string>, "required", string>, "optional", string>;
        }, "required", "type" | "providerOptions" | "text" | `providerOptions.${string}`>, import("convex/values").VObject<{
            providerOptions?: Record<string, Record<string, any>> | undefined;
            filename?: string | undefined;
            type: "file";
            mimeType: string;
            data: string | ArrayBuffer;
        }, {
            type: import("convex/values").VLiteral<"file", "required">;
            data: import("convex/values").VUnion<string | ArrayBuffer, [import("convex/values").VString<string, "required">, import("convex/values").VBytes<ArrayBuffer, "required">], "required", never>;
            filename: import("convex/values").VString<string | undefined, "optional">;
            mimeType: import("convex/values").VString<string, "required">;
            providerOptions: import("convex/values").VRecord<Record<string, Record<string, any>> | undefined, import("convex/values").VString<string, "required">, import("convex/values").VRecord<Record<string, any>, import("convex/values").VString<string, "required">, import("convex/values").VAny<any, "required", string>, "required", string>, "optional", string>;
        }, "required", "type" | "providerOptions" | `providerOptions.${string}` | "mimeType" | "data" | "filename">, import("convex/values").VObject<{
            providerOptions?: Record<string, Record<string, any>> | undefined;
            signature?: string | undefined;
            type: "reasoning";
            text: string;
        }, {
            type: import("convex/values").VLiteral<"reasoning", "required">;
            text: import("convex/values").VString<string, "required">;
            signature: import("convex/values").VString<string | undefined, "optional">;
            providerOptions: import("convex/values").VRecord<Record<string, Record<string, any>> | undefined, import("convex/values").VString<string, "required">, import("convex/values").VRecord<Record<string, any>, import("convex/values").VString<string, "required">, import("convex/values").VAny<any, "required", string>, "required", string>, "optional", string>;
        }, "required", "type" | "providerOptions" | "text" | `providerOptions.${string}` | "signature">, import("convex/values").VObject<{
            providerOptions?: Record<string, Record<string, any>> | undefined;
            type: "redacted-reasoning";
            data: string;
        }, {
            type: import("convex/values").VLiteral<"redacted-reasoning", "required">;
            data: import("convex/values").VString<string, "required">;
            providerOptions: import("convex/values").VRecord<Record<string, Record<string, any>> | undefined, import("convex/values").VString<string, "required">, import("convex/values").VRecord<Record<string, any>, import("convex/values").VString<string, "required">, import("convex/values").VAny<any, "required", string>, "required", string>, "optional", string>;
        }, "required", "type" | "providerOptions" | `providerOptions.${string}` | "data">, import("convex/values").VObject<{
            providerOptions?: Record<string, Record<string, any>> | undefined;
            type: "tool-call";
            toolCallId: string;
            toolName: string;
            args: any;
        }, {
            type: import("convex/values").VLiteral<"tool-call", "required">;
            toolCallId: import("convex/values").VString<string, "required">;
            toolName: import("convex/values").VString<string, "required">;
            args: import("convex/values").VAny<any, "required", string>;
            providerOptions: import("convex/values").VRecord<Record<string, Record<string, any>> | undefined, import("convex/values").VString<string, "required">, import("convex/values").VRecord<Record<string, any>, import("convex/values").VString<string, "required">, import("convex/values").VAny<any, "required", string>, "required", string>, "optional", string>;
        }, "required", "type" | "providerOptions" | `providerOptions.${string}` | "toolCallId" | "toolName" | "args" | `args.${string}`>], "required", "type" | "providerOptions" | "text" | `providerOptions.${string}` | "mimeType" | "data" | "filename" | "signature" | "toolCallId" | "toolName" | "args" | `args.${string}`>, "required">], "required", never>;
        providerOptions: import("convex/values").VRecord<Record<string, Record<string, any>> | undefined, import("convex/values").VString<string, "required">, import("convex/values").VRecord<Record<string, any>, import("convex/values").VString<string, "required">, import("convex/values").VAny<any, "required", string>, "required", string>, "optional", string>;
    }, "required", "providerOptions" | "role" | `providerOptions.${string}` | "content">, import("convex/values").VObject<{
        providerOptions?: Record<string, Record<string, any>> | undefined;
        role: "tool";
        content: {
            providerOptions?: Record<string, Record<string, any>> | undefined;
            args?: any;
            experimental_content?: ({
                type: "text";
                text: string;
            } | {
                mimeType?: string | undefined;
                type: "image";
                data: string;
            })[] | undefined;
            isError?: boolean | undefined;
            type: "tool-result";
            toolCallId: string;
            toolName: string;
            result: any;
        }[];
    }, {
        role: import("convex/values").VLiteral<"tool", "required">;
        content: import("convex/values").VArray<{
            providerOptions?: Record<string, Record<string, any>> | undefined;
            args?: any;
            experimental_content?: ({
                type: "text";
                text: string;
            } | {
                mimeType?: string | undefined;
                type: "image";
                data: string;
            })[] | undefined;
            isError?: boolean | undefined;
            type: "tool-result";
            toolCallId: string;
            toolName: string;
            result: any;
        }[], import("convex/values").VObject<{
            providerOptions?: Record<string, Record<string, any>> | undefined;
            args?: any;
            experimental_content?: ({
                type: "text";
                text: string;
            } | {
                mimeType?: string | undefined;
                type: "image";
                data: string;
            })[] | undefined;
            isError?: boolean | undefined;
            type: "tool-result";
            toolCallId: string;
            toolName: string;
            result: any;
        }, {
            type: import("convex/values").VLiteral<"tool-result", "required">;
            toolCallId: import("convex/values").VString<string, "required">;
            toolName: import("convex/values").VString<string, "required">;
            result: import("convex/values").VAny<any, "required", string>;
            args: import("convex/values").VAny<any, "optional", string>;
            experimental_content: import("convex/values").VArray<({
                type: "text";
                text: string;
            } | {
                mimeType?: string | undefined;
                type: "image";
                data: string;
            })[] | undefined, import("convex/values").VUnion<{
                type: "text";
                text: string;
            } | {
                mimeType?: string | undefined;
                type: "image";
                data: string;
            }, [import("convex/values").VObject<{
                type: "text";
                text: string;
            }, {
                type: import("convex/values").VLiteral<"text", "required">;
                text: import("convex/values").VString<string, "required">;
            }, "required", "type" | "text">, import("convex/values").VObject<{
                mimeType?: string | undefined;
                type: "image";
                data: string;
            }, {
                type: import("convex/values").VLiteral<"image", "required">;
                data: import("convex/values").VString<string, "required">;
                mimeType: import("convex/values").VString<string | undefined, "optional">;
            }, "required", "type" | "mimeType" | "data">], "required", "type" | "text" | "mimeType" | "data">, "optional">;
            isError: import("convex/values").VBoolean<boolean | undefined, "optional">;
            providerOptions: import("convex/values").VRecord<Record<string, Record<string, any>> | undefined, import("convex/values").VString<string, "required">, import("convex/values").VRecord<Record<string, any>, import("convex/values").VString<string, "required">, import("convex/values").VAny<any, "required", string>, "required", string>, "optional", string>;
        }, "required", "type" | "providerOptions" | `providerOptions.${string}` | "toolCallId" | "toolName" | "args" | `args.${string}` | "result" | "experimental_content" | "isError" | `result.${string}`>, "required">;
        providerOptions: import("convex/values").VRecord<Record<string, Record<string, any>> | undefined, import("convex/values").VString<string, "required">, import("convex/values").VRecord<Record<string, any>, import("convex/values").VString<string, "required">, import("convex/values").VAny<any, "required", string>, "required", string>, "optional", string>;
    }, "required", "providerOptions" | "role" | `providerOptions.${string}` | "content">, import("convex/values").VObject<{
        providerOptions?: Record<string, Record<string, any>> | undefined;
        role: "system";
        content: string;
    }, {
        role: import("convex/values").VLiteral<"system", "required">;
        content: import("convex/values").VString<string, "required">;
        providerOptions: import("convex/values").VRecord<Record<string, Record<string, any>> | undefined, import("convex/values").VString<string, "required">, import("convex/values").VRecord<Record<string, any>, import("convex/values").VString<string, "required">, import("convex/values").VAny<any, "required", string>, "required", string>, "optional", string>;
    }, "required", "providerOptions" | "role" | `providerOptions.${string}` | "content">], "required", "providerOptions" | "role" | `providerOptions.${string}` | "content">;
    text: import("convex/values").VString<string | undefined, "optional">;
    fileIds: import("convex/values").VArray<import("convex/values").GenericId<"files">[] | undefined, import("convex/values").VId<import("convex/values").GenericId<"files">, "required">, "optional">;
    finishReason: import("convex/values").VUnion<"length" | "error" | "other" | "stop" | "content-filter" | "tool-calls" | "unknown" | undefined, [import("convex/values").VLiteral<"stop", "required">, import("convex/values").VLiteral<"length", "required">, import("convex/values").VLiteral<"content-filter", "required">, import("convex/values").VLiteral<"tool-calls", "required">, import("convex/values").VLiteral<"error", "required">, import("convex/values").VLiteral<"other", "required">, import("convex/values").VLiteral<"unknown", "required">], "optional", never>;
    model: import("convex/values").VString<string | undefined, "optional">;
    provider: import("convex/values").VString<string | undefined, "optional">;
    providerMetadata: import("convex/values").VRecord<Record<string, Record<string, any>> | undefined, import("convex/values").VString<string, "required">, import("convex/values").VRecord<Record<string, any>, import("convex/values").VString<string, "required">, import("convex/values").VAny<any, "required", string>, "required", string>, "optional", string>;
    sources: import("convex/values").VArray<{
        title?: string | undefined;
        providerOptions?: Record<string, Record<string, any>> | undefined;
        id: string;
        sourceType: "url";
        url: string;
    }[] | undefined, import("convex/values").VObject<{
        title?: string | undefined;
        providerOptions?: Record<string, Record<string, any>> | undefined;
        id: string;
        sourceType: "url";
        url: string;
    }, {
        sourceType: import("convex/values").VLiteral<"url", "required">;
        id: import("convex/values").VString<string, "required">;
        url: import("convex/values").VString<string, "required">;
        title: import("convex/values").VString<string | undefined, "optional">;
        providerOptions: import("convex/values").VRecord<Record<string, Record<string, any>> | undefined, import("convex/values").VString<string, "required">, import("convex/values").VRecord<Record<string, any>, import("convex/values").VString<string, "required">, import("convex/values").VAny<any, "required", string>, "required", string>, "optional", string>;
    }, "required", "id" | "title" | "providerOptions" | `providerOptions.${string}` | "sourceType" | "url">, "optional">;
    reasoning: import("convex/values").VString<string | undefined, "optional">;
    reasoningDetails: import("convex/values").VArray<({
        signature?: string | undefined;
        type: "text";
        text: string;
    } | {
        type: "redacted";
        data: string;
    })[] | undefined, import("convex/values").VUnion<{
        signature?: string | undefined;
        type: "text";
        text: string;
    } | {
        type: "redacted";
        data: string;
    }, [import("convex/values").VObject<{
        signature?: string | undefined;
        type: "text";
        text: string;
    }, {
        type: import("convex/values").VLiteral<"text", "required">;
        text: import("convex/values").VString<string, "required">;
        signature: import("convex/values").VString<string | undefined, "optional">;
    }, "required", "type" | "text" | "signature">, import("convex/values").VObject<{
        type: "redacted";
        data: string;
    }, {
        type: import("convex/values").VLiteral<"redacted", "required">;
        data: import("convex/values").VString<string, "required">;
    }, "required", "type" | "data">], "required", "type" | "text" | "data" | "signature">, "optional">;
    usage: import("convex/values").VObject<{
        promptTokens: number;
        completionTokens: number;
        totalTokens: number;
    } | undefined, {
        promptTokens: import("convex/values").VFloat64<number, "required">;
        completionTokens: import("convex/values").VFloat64<number, "required">;
        totalTokens: import("convex/values").VFloat64<number, "required">;
    }, "optional", "promptTokens" | "completionTokens" | "totalTokens">;
    warnings: import("convex/values").VArray<({
        details?: string | undefined;
        type: "unsupported-setting";
        setting: string;
    } | {
        details?: string | undefined;
        type: "unsupported-tool";
        tool: any;
    } | {
        type: "other";
        message: string;
    })[] | undefined, import("convex/values").VUnion<{
        details?: string | undefined;
        type: "unsupported-setting";
        setting: string;
    } | {
        details?: string | undefined;
        type: "unsupported-tool";
        tool: any;
    } | {
        type: "other";
        message: string;
    }, [import("convex/values").VObject<{
        details?: string | undefined;
        type: "unsupported-setting";
        setting: string;
    }, {
        type: import("convex/values").VLiteral<"unsupported-setting", "required">;
        setting: import("convex/values").VString<string, "required">;
        details: import("convex/values").VString<string | undefined, "optional">;
    }, "required", "type" | "setting" | "details">, import("convex/values").VObject<{
        details?: string | undefined;
        type: "unsupported-tool";
        tool: any;
    }, {
        type: import("convex/values").VLiteral<"unsupported-tool", "required">;
        tool: import("convex/values").VAny<any, "required", string>;
        details: import("convex/values").VString<string | undefined, "optional">;
    }, "required", "type" | "tool" | "details" | `tool.${string}`>, import("convex/values").VObject<{
        type: "other";
        message: string;
    }, {
        type: import("convex/values").VLiteral<"other", "required">;
        message: import("convex/values").VString<string, "required">;
    }, "required", "type" | "message">], "required", "type" | "message" | "tool" | "setting" | "details" | `tool.${string}`>, "optional">;
    error: import("convex/values").VString<string | undefined, "optional">;
}, "required", "id" | "fileIds" | "error" | "model" | "provider" | "message" | "text" | "reasoning" | "usage" | "providerMetadata" | "sources" | "reasoningDetails" | "warnings" | "finishReason" | "message.providerOptions" | "message.role" | `message.providerOptions.${string}` | "message.content" | "usage.promptTokens" | "usage.completionTokens" | "usage.totalTokens" | `providerMetadata.${string}`>;
export declare const vMessageWithMetadata: import("convex/values").VObject<{
    id?: string | undefined;
    fileIds?: string[] | undefined;
    error?: string | undefined;
    model?: string | undefined;
    provider?: string | undefined;
    text?: string | undefined;
    reasoning?: string | undefined;
    usage?: {
        promptTokens: number;
        completionTokens: number;
        totalTokens: number;
    } | undefined;
    providerMetadata?: Record<string, Record<string, any>> | undefined;
    sources?: {
        title?: string | undefined;
        providerOptions?: Record<string, Record<string, any>> | undefined;
        id: string;
        sourceType: "url";
        url: string;
    }[] | undefined;
    reasoningDetails?: ({
        signature?: string | undefined;
        type: "text";
        text: string;
    } | {
        type: "redacted";
        data: string;
    })[] | undefined;
    warnings?: ({
        details?: string | undefined;
        type: "unsupported-setting";
        setting: string;
    } | {
        details?: string | undefined;
        type: "unsupported-tool";
        tool: any;
    } | {
        type: "other";
        message: string;
    })[] | undefined;
    finishReason?: "length" | "error" | "other" | "stop" | "content-filter" | "tool-calls" | "unknown" | undefined;
    message: {
        providerOptions?: Record<string, Record<string, any>> | undefined;
        role: "user";
        content: string | ({
            providerOptions?: Record<string, Record<string, any>> | undefined;
            type: "text";
            text: string;
        } | {
            providerOptions?: Record<string, Record<string, any>> | undefined;
            mimeType?: string | undefined;
            type: "image";
            image: string | ArrayBuffer;
        } | {
            providerOptions?: Record<string, Record<string, any>> | undefined;
            filename?: string | undefined;
            type: "file";
            mimeType: string;
            data: string | ArrayBuffer;
        })[];
    } | {
        providerOptions?: Record<string, Record<string, any>> | undefined;
        role: "assistant";
        content: string | ({
            providerOptions?: Record<string, Record<string, any>> | undefined;
            type: "text";
            text: string;
        } | {
            providerOptions?: Record<string, Record<string, any>> | undefined;
            filename?: string | undefined;
            type: "file";
            mimeType: string;
            data: string | ArrayBuffer;
        } | {
            providerOptions?: Record<string, Record<string, any>> | undefined;
            signature?: string | undefined;
            type: "reasoning";
            text: string;
        } | {
            providerOptions?: Record<string, Record<string, any>> | undefined;
            type: "redacted-reasoning";
            data: string;
        } | {
            providerOptions?: Record<string, Record<string, any>> | undefined;
            type: "tool-call";
            toolCallId: string;
            toolName: string;
            args: any;
        })[];
    } | {
        providerOptions?: Record<string, Record<string, any>> | undefined;
        role: "tool";
        content: {
            providerOptions?: Record<string, Record<string, any>> | undefined;
            args?: any;
            experimental_content?: ({
                type: "text";
                text: string;
            } | {
                mimeType?: string | undefined;
                type: "image";
                data: string;
            })[] | undefined;
            isError?: boolean | undefined;
            type: "tool-result";
            toolCallId: string;
            toolName: string;
            result: any;
        }[];
    } | {
        providerOptions?: Record<string, Record<string, any>> | undefined;
        role: "system";
        content: string;
    };
}, {
    fileIds: import("convex/values").VArray<string[] | undefined, import("convex/values").VString<string, "required">, "optional">;
    id: import("convex/values").VString<string | undefined, "optional">;
    message: import("convex/values").VUnion<{
        providerOptions?: Record<string, Record<string, any>> | undefined;
        role: "user";
        content: string | ({
            providerOptions?: Record<string, Record<string, any>> | undefined;
            type: "text";
            text: string;
        } | {
            providerOptions?: Record<string, Record<string, any>> | undefined;
            mimeType?: string | undefined;
            type: "image";
            image: string | ArrayBuffer;
        } | {
            providerOptions?: Record<string, Record<string, any>> | undefined;
            filename?: string | undefined;
            type: "file";
            mimeType: string;
            data: string | ArrayBuffer;
        })[];
    } | {
        providerOptions?: Record<string, Record<string, any>> | undefined;
        role: "assistant";
        content: string | ({
            providerOptions?: Record<string, Record<string, any>> | undefined;
            type: "text";
            text: string;
        } | {
            providerOptions?: Record<string, Record<string, any>> | undefined;
            filename?: string | undefined;
            type: "file";
            mimeType: string;
            data: string | ArrayBuffer;
        } | {
            providerOptions?: Record<string, Record<string, any>> | undefined;
            signature?: string | undefined;
            type: "reasoning";
            text: string;
        } | {
            providerOptions?: Record<string, Record<string, any>> | undefined;
            type: "redacted-reasoning";
            data: string;
        } | {
            providerOptions?: Record<string, Record<string, any>> | undefined;
            type: "tool-call";
            toolCallId: string;
            toolName: string;
            args: any;
        })[];
    } | {
        providerOptions?: Record<string, Record<string, any>> | undefined;
        role: "tool";
        content: {
            providerOptions?: Record<string, Record<string, any>> | undefined;
            args?: any;
            experimental_content?: ({
                type: "text";
                text: string;
            } | {
                mimeType?: string | undefined;
                type: "image";
                data: string;
            })[] | undefined;
            isError?: boolean | undefined;
            type: "tool-result";
            toolCallId: string;
            toolName: string;
            result: any;
        }[];
    } | {
        providerOptions?: Record<string, Record<string, any>> | undefined;
        role: "system";
        content: string;
    }, [import("convex/values").VObject<{
        providerOptions?: Record<string, Record<string, any>> | undefined;
        role: "user";
        content: string | ({
            providerOptions?: Record<string, Record<string, any>> | undefined;
            type: "text";
            text: string;
        } | {
            providerOptions?: Record<string, Record<string, any>> | undefined;
            mimeType?: string | undefined;
            type: "image";
            image: string | ArrayBuffer;
        } | {
            providerOptions?: Record<string, Record<string, any>> | undefined;
            filename?: string | undefined;
            type: "file";
            mimeType: string;
            data: string | ArrayBuffer;
        })[];
    }, {
        role: import("convex/values").VLiteral<"user", "required">;
        content: import("convex/values").VUnion<string | ({
            providerOptions?: Record<string, Record<string, any>> | undefined;
            type: "text";
            text: string;
        } | {
            providerOptions?: Record<string, Record<string, any>> | undefined;
            mimeType?: string | undefined;
            type: "image";
            image: string | ArrayBuffer;
        } | {
            providerOptions?: Record<string, Record<string, any>> | undefined;
            filename?: string | undefined;
            type: "file";
            mimeType: string;
            data: string | ArrayBuffer;
        })[], [import("convex/values").VString<string, "required">, import("convex/values").VArray<({
            providerOptions?: Record<string, Record<string, any>> | undefined;
            type: "text";
            text: string;
        } | {
            providerOptions?: Record<string, Record<string, any>> | undefined;
            mimeType?: string | undefined;
            type: "image";
            image: string | ArrayBuffer;
        } | {
            providerOptions?: Record<string, Record<string, any>> | undefined;
            filename?: string | undefined;
            type: "file";
            mimeType: string;
            data: string | ArrayBuffer;
        })[], import("convex/values").VUnion<{
            providerOptions?: Record<string, Record<string, any>> | undefined;
            type: "text";
            text: string;
        } | {
            providerOptions?: Record<string, Record<string, any>> | undefined;
            mimeType?: string | undefined;
            type: "image";
            image: string | ArrayBuffer;
        } | {
            providerOptions?: Record<string, Record<string, any>> | undefined;
            filename?: string | undefined;
            type: "file";
            mimeType: string;
            data: string | ArrayBuffer;
        }, [import("convex/values").VObject<{
            providerOptions?: Record<string, Record<string, any>> | undefined;
            type: "text";
            text: string;
        }, {
            type: import("convex/values").VLiteral<"text", "required">;
            text: import("convex/values").VString<string, "required">;
            providerOptions: import("convex/values").VRecord<Record<string, Record<string, any>> | undefined, import("convex/values").VString<string, "required">, import("convex/values").VRecord<Record<string, any>, import("convex/values").VString<string, "required">, import("convex/values").VAny<any, "required", string>, "required", string>, "optional", string>;
        }, "required", "type" | "providerOptions" | "text" | `providerOptions.${string}`>, import("convex/values").VObject<{
            providerOptions?: Record<string, Record<string, any>> | undefined;
            mimeType?: string | undefined;
            type: "image";
            image: string | ArrayBuffer;
        }, {
            type: import("convex/values").VLiteral<"image", "required">;
            image: import("convex/values").VUnion<string | ArrayBuffer, [import("convex/values").VString<string, "required">, import("convex/values").VBytes<ArrayBuffer, "required">], "required", never>;
            mimeType: import("convex/values").VString<string | undefined, "optional">;
            providerOptions: import("convex/values").VRecord<Record<string, Record<string, any>> | undefined, import("convex/values").VString<string, "required">, import("convex/values").VRecord<Record<string, any>, import("convex/values").VString<string, "required">, import("convex/values").VAny<any, "required", string>, "required", string>, "optional", string>;
        }, "required", "type" | "providerOptions" | `providerOptions.${string}` | "image" | "mimeType">, import("convex/values").VObject<{
            providerOptions?: Record<string, Record<string, any>> | undefined;
            filename?: string | undefined;
            type: "file";
            mimeType: string;
            data: string | ArrayBuffer;
        }, {
            type: import("convex/values").VLiteral<"file", "required">;
            data: import("convex/values").VUnion<string | ArrayBuffer, [import("convex/values").VString<string, "required">, import("convex/values").VBytes<ArrayBuffer, "required">], "required", never>;
            filename: import("convex/values").VString<string | undefined, "optional">;
            mimeType: import("convex/values").VString<string, "required">;
            providerOptions: import("convex/values").VRecord<Record<string, Record<string, any>> | undefined, import("convex/values").VString<string, "required">, import("convex/values").VRecord<Record<string, any>, import("convex/values").VString<string, "required">, import("convex/values").VAny<any, "required", string>, "required", string>, "optional", string>;
        }, "required", "type" | "providerOptions" | `providerOptions.${string}` | "mimeType" | "data" | "filename">], "required", "type" | "providerOptions" | "text" | `providerOptions.${string}` | "image" | "mimeType" | "data" | "filename">, "required">], "required", never>;
        providerOptions: import("convex/values").VRecord<Record<string, Record<string, any>> | undefined, import("convex/values").VString<string, "required">, import("convex/values").VRecord<Record<string, any>, import("convex/values").VString<string, "required">, import("convex/values").VAny<any, "required", string>, "required", string>, "optional", string>;
    }, "required", "providerOptions" | "role" | `providerOptions.${string}` | "content">, import("convex/values").VObject<{
        providerOptions?: Record<string, Record<string, any>> | undefined;
        role: "assistant";
        content: string | ({
            providerOptions?: Record<string, Record<string, any>> | undefined;
            type: "text";
            text: string;
        } | {
            providerOptions?: Record<string, Record<string, any>> | undefined;
            filename?: string | undefined;
            type: "file";
            mimeType: string;
            data: string | ArrayBuffer;
        } | {
            providerOptions?: Record<string, Record<string, any>> | undefined;
            signature?: string | undefined;
            type: "reasoning";
            text: string;
        } | {
            providerOptions?: Record<string, Record<string, any>> | undefined;
            type: "redacted-reasoning";
            data: string;
        } | {
            providerOptions?: Record<string, Record<string, any>> | undefined;
            type: "tool-call";
            toolCallId: string;
            toolName: string;
            args: any;
        })[];
    }, {
        role: import("convex/values").VLiteral<"assistant", "required">;
        content: import("convex/values").VUnion<string | ({
            providerOptions?: Record<string, Record<string, any>> | undefined;
            type: "text";
            text: string;
        } | {
            providerOptions?: Record<string, Record<string, any>> | undefined;
            filename?: string | undefined;
            type: "file";
            mimeType: string;
            data: string | ArrayBuffer;
        } | {
            providerOptions?: Record<string, Record<string, any>> | undefined;
            signature?: string | undefined;
            type: "reasoning";
            text: string;
        } | {
            providerOptions?: Record<string, Record<string, any>> | undefined;
            type: "redacted-reasoning";
            data: string;
        } | {
            providerOptions?: Record<string, Record<string, any>> | undefined;
            type: "tool-call";
            toolCallId: string;
            toolName: string;
            args: any;
        })[], [import("convex/values").VString<string, "required">, import("convex/values").VArray<({
            providerOptions?: Record<string, Record<string, any>> | undefined;
            type: "text";
            text: string;
        } | {
            providerOptions?: Record<string, Record<string, any>> | undefined;
            filename?: string | undefined;
            type: "file";
            mimeType: string;
            data: string | ArrayBuffer;
        } | {
            providerOptions?: Record<string, Record<string, any>> | undefined;
            signature?: string | undefined;
            type: "reasoning";
            text: string;
        } | {
            providerOptions?: Record<string, Record<string, any>> | undefined;
            type: "redacted-reasoning";
            data: string;
        } | {
            providerOptions?: Record<string, Record<string, any>> | undefined;
            type: "tool-call";
            toolCallId: string;
            toolName: string;
            args: any;
        })[], import("convex/values").VUnion<{
            providerOptions?: Record<string, Record<string, any>> | undefined;
            type: "text";
            text: string;
        } | {
            providerOptions?: Record<string, Record<string, any>> | undefined;
            filename?: string | undefined;
            type: "file";
            mimeType: string;
            data: string | ArrayBuffer;
        } | {
            providerOptions?: Record<string, Record<string, any>> | undefined;
            signature?: string | undefined;
            type: "reasoning";
            text: string;
        } | {
            providerOptions?: Record<string, Record<string, any>> | undefined;
            type: "redacted-reasoning";
            data: string;
        } | {
            providerOptions?: Record<string, Record<string, any>> | undefined;
            type: "tool-call";
            toolCallId: string;
            toolName: string;
            args: any;
        }, [import("convex/values").VObject<{
            providerOptions?: Record<string, Record<string, any>> | undefined;
            type: "text";
            text: string;
        }, {
            type: import("convex/values").VLiteral<"text", "required">;
            text: import("convex/values").VString<string, "required">;
            providerOptions: import("convex/values").VRecord<Record<string, Record<string, any>> | undefined, import("convex/values").VString<string, "required">, import("convex/values").VRecord<Record<string, any>, import("convex/values").VString<string, "required">, import("convex/values").VAny<any, "required", string>, "required", string>, "optional", string>;
        }, "required", "type" | "providerOptions" | "text" | `providerOptions.${string}`>, import("convex/values").VObject<{
            providerOptions?: Record<string, Record<string, any>> | undefined;
            filename?: string | undefined;
            type: "file";
            mimeType: string;
            data: string | ArrayBuffer;
        }, {
            type: import("convex/values").VLiteral<"file", "required">;
            data: import("convex/values").VUnion<string | ArrayBuffer, [import("convex/values").VString<string, "required">, import("convex/values").VBytes<ArrayBuffer, "required">], "required", never>;
            filename: import("convex/values").VString<string | undefined, "optional">;
            mimeType: import("convex/values").VString<string, "required">;
            providerOptions: import("convex/values").VRecord<Record<string, Record<string, any>> | undefined, import("convex/values").VString<string, "required">, import("convex/values").VRecord<Record<string, any>, import("convex/values").VString<string, "required">, import("convex/values").VAny<any, "required", string>, "required", string>, "optional", string>;
        }, "required", "type" | "providerOptions" | `providerOptions.${string}` | "mimeType" | "data" | "filename">, import("convex/values").VObject<{
            providerOptions?: Record<string, Record<string, any>> | undefined;
            signature?: string | undefined;
            type: "reasoning";
            text: string;
        }, {
            type: import("convex/values").VLiteral<"reasoning", "required">;
            text: import("convex/values").VString<string, "required">;
            signature: import("convex/values").VString<string | undefined, "optional">;
            providerOptions: import("convex/values").VRecord<Record<string, Record<string, any>> | undefined, import("convex/values").VString<string, "required">, import("convex/values").VRecord<Record<string, any>, import("convex/values").VString<string, "required">, import("convex/values").VAny<any, "required", string>, "required", string>, "optional", string>;
        }, "required", "type" | "providerOptions" | "text" | `providerOptions.${string}` | "signature">, import("convex/values").VObject<{
            providerOptions?: Record<string, Record<string, any>> | undefined;
            type: "redacted-reasoning";
            data: string;
        }, {
            type: import("convex/values").VLiteral<"redacted-reasoning", "required">;
            data: import("convex/values").VString<string, "required">;
            providerOptions: import("convex/values").VRecord<Record<string, Record<string, any>> | undefined, import("convex/values").VString<string, "required">, import("convex/values").VRecord<Record<string, any>, import("convex/values").VString<string, "required">, import("convex/values").VAny<any, "required", string>, "required", string>, "optional", string>;
        }, "required", "type" | "providerOptions" | `providerOptions.${string}` | "data">, import("convex/values").VObject<{
            providerOptions?: Record<string, Record<string, any>> | undefined;
            type: "tool-call";
            toolCallId: string;
            toolName: string;
            args: any;
        }, {
            type: import("convex/values").VLiteral<"tool-call", "required">;
            toolCallId: import("convex/values").VString<string, "required">;
            toolName: import("convex/values").VString<string, "required">;
            args: import("convex/values").VAny<any, "required", string>;
            providerOptions: import("convex/values").VRecord<Record<string, Record<string, any>> | undefined, import("convex/values").VString<string, "required">, import("convex/values").VRecord<Record<string, any>, import("convex/values").VString<string, "required">, import("convex/values").VAny<any, "required", string>, "required", string>, "optional", string>;
        }, "required", "type" | "providerOptions" | `providerOptions.${string}` | "toolCallId" | "toolName" | "args" | `args.${string}`>], "required", "type" | "providerOptions" | "text" | `providerOptions.${string}` | "mimeType" | "data" | "filename" | "signature" | "toolCallId" | "toolName" | "args" | `args.${string}`>, "required">], "required", never>;
        providerOptions: import("convex/values").VRecord<Record<string, Record<string, any>> | undefined, import("convex/values").VString<string, "required">, import("convex/values").VRecord<Record<string, any>, import("convex/values").VString<string, "required">, import("convex/values").VAny<any, "required", string>, "required", string>, "optional", string>;
    }, "required", "providerOptions" | "role" | `providerOptions.${string}` | "content">, import("convex/values").VObject<{
        providerOptions?: Record<string, Record<string, any>> | undefined;
        role: "tool";
        content: {
            providerOptions?: Record<string, Record<string, any>> | undefined;
            args?: any;
            experimental_content?: ({
                type: "text";
                text: string;
            } | {
                mimeType?: string | undefined;
                type: "image";
                data: string;
            })[] | undefined;
            isError?: boolean | undefined;
            type: "tool-result";
            toolCallId: string;
            toolName: string;
            result: any;
        }[];
    }, {
        role: import("convex/values").VLiteral<"tool", "required">;
        content: import("convex/values").VArray<{
            providerOptions?: Record<string, Record<string, any>> | undefined;
            args?: any;
            experimental_content?: ({
                type: "text";
                text: string;
            } | {
                mimeType?: string | undefined;
                type: "image";
                data: string;
            })[] | undefined;
            isError?: boolean | undefined;
            type: "tool-result";
            toolCallId: string;
            toolName: string;
            result: any;
        }[], import("convex/values").VObject<{
            providerOptions?: Record<string, Record<string, any>> | undefined;
            args?: any;
            experimental_content?: ({
                type: "text";
                text: string;
            } | {
                mimeType?: string | undefined;
                type: "image";
                data: string;
            })[] | undefined;
            isError?: boolean | undefined;
            type: "tool-result";
            toolCallId: string;
            toolName: string;
            result: any;
        }, {
            type: import("convex/values").VLiteral<"tool-result", "required">;
            toolCallId: import("convex/values").VString<string, "required">;
            toolName: import("convex/values").VString<string, "required">;
            result: import("convex/values").VAny<any, "required", string>;
            args: import("convex/values").VAny<any, "optional", string>;
            experimental_content: import("convex/values").VArray<({
                type: "text";
                text: string;
            } | {
                mimeType?: string | undefined;
                type: "image";
                data: string;
            })[] | undefined, import("convex/values").VUnion<{
                type: "text";
                text: string;
            } | {
                mimeType?: string | undefined;
                type: "image";
                data: string;
            }, [import("convex/values").VObject<{
                type: "text";
                text: string;
            }, {
                type: import("convex/values").VLiteral<"text", "required">;
                text: import("convex/values").VString<string, "required">;
            }, "required", "type" | "text">, import("convex/values").VObject<{
                mimeType?: string | undefined;
                type: "image";
                data: string;
            }, {
                type: import("convex/values").VLiteral<"image", "required">;
                data: import("convex/values").VString<string, "required">;
                mimeType: import("convex/values").VString<string | undefined, "optional">;
            }, "required", "type" | "mimeType" | "data">], "required", "type" | "text" | "mimeType" | "data">, "optional">;
            isError: import("convex/values").VBoolean<boolean | undefined, "optional">;
            providerOptions: import("convex/values").VRecord<Record<string, Record<string, any>> | undefined, import("convex/values").VString<string, "required">, import("convex/values").VRecord<Record<string, any>, import("convex/values").VString<string, "required">, import("convex/values").VAny<any, "required", string>, "required", string>, "optional", string>;
        }, "required", "type" | "providerOptions" | `providerOptions.${string}` | "toolCallId" | "toolName" | "args" | `args.${string}` | "result" | "experimental_content" | "isError" | `result.${string}`>, "required">;
        providerOptions: import("convex/values").VRecord<Record<string, Record<string, any>> | undefined, import("convex/values").VString<string, "required">, import("convex/values").VRecord<Record<string, any>, import("convex/values").VString<string, "required">, import("convex/values").VAny<any, "required", string>, "required", string>, "optional", string>;
    }, "required", "providerOptions" | "role" | `providerOptions.${string}` | "content">, import("convex/values").VObject<{
        providerOptions?: Record<string, Record<string, any>> | undefined;
        role: "system";
        content: string;
    }, {
        role: import("convex/values").VLiteral<"system", "required">;
        content: import("convex/values").VString<string, "required">;
        providerOptions: import("convex/values").VRecord<Record<string, Record<string, any>> | undefined, import("convex/values").VString<string, "required">, import("convex/values").VRecord<Record<string, any>, import("convex/values").VString<string, "required">, import("convex/values").VAny<any, "required", string>, "required", string>, "optional", string>;
    }, "required", "providerOptions" | "role" | `providerOptions.${string}` | "content">], "required", "providerOptions" | "role" | `providerOptions.${string}` | "content">;
    text: import("convex/values").VString<string | undefined, "optional">;
    finishReason: import("convex/values").VUnion<"length" | "error" | "other" | "stop" | "content-filter" | "tool-calls" | "unknown" | undefined, [import("convex/values").VLiteral<"stop", "required">, import("convex/values").VLiteral<"length", "required">, import("convex/values").VLiteral<"content-filter", "required">, import("convex/values").VLiteral<"tool-calls", "required">, import("convex/values").VLiteral<"error", "required">, import("convex/values").VLiteral<"other", "required">, import("convex/values").VLiteral<"unknown", "required">], "optional", never>;
    model: import("convex/values").VString<string | undefined, "optional">;
    provider: import("convex/values").VString<string | undefined, "optional">;
    providerMetadata: import("convex/values").VRecord<Record<string, Record<string, any>> | undefined, import("convex/values").VString<string, "required">, import("convex/values").VRecord<Record<string, any>, import("convex/values").VString<string, "required">, import("convex/values").VAny<any, "required", string>, "required", string>, "optional", string>;
    sources: import("convex/values").VArray<{
        title?: string | undefined;
        providerOptions?: Record<string, Record<string, any>> | undefined;
        id: string;
        sourceType: "url";
        url: string;
    }[] | undefined, import("convex/values").VObject<{
        title?: string | undefined;
        providerOptions?: Record<string, Record<string, any>> | undefined;
        id: string;
        sourceType: "url";
        url: string;
    }, {
        sourceType: import("convex/values").VLiteral<"url", "required">;
        id: import("convex/values").VString<string, "required">;
        url: import("convex/values").VString<string, "required">;
        title: import("convex/values").VString<string | undefined, "optional">;
        providerOptions: import("convex/values").VRecord<Record<string, Record<string, any>> | undefined, import("convex/values").VString<string, "required">, import("convex/values").VRecord<Record<string, any>, import("convex/values").VString<string, "required">, import("convex/values").VAny<any, "required", string>, "required", string>, "optional", string>;
    }, "required", "id" | "title" | "providerOptions" | `providerOptions.${string}` | "sourceType" | "url">, "optional">;
    reasoning: import("convex/values").VString<string | undefined, "optional">;
    reasoningDetails: import("convex/values").VArray<({
        signature?: string | undefined;
        type: "text";
        text: string;
    } | {
        type: "redacted";
        data: string;
    })[] | undefined, import("convex/values").VUnion<{
        signature?: string | undefined;
        type: "text";
        text: string;
    } | {
        type: "redacted";
        data: string;
    }, [import("convex/values").VObject<{
        signature?: string | undefined;
        type: "text";
        text: string;
    }, {
        type: import("convex/values").VLiteral<"text", "required">;
        text: import("convex/values").VString<string, "required">;
        signature: import("convex/values").VString<string | undefined, "optional">;
    }, "required", "type" | "text" | "signature">, import("convex/values").VObject<{
        type: "redacted";
        data: string;
    }, {
        type: import("convex/values").VLiteral<"redacted", "required">;
        data: import("convex/values").VString<string, "required">;
    }, "required", "type" | "data">], "required", "type" | "text" | "data" | "signature">, "optional">;
    usage: import("convex/values").VObject<{
        promptTokens: number;
        completionTokens: number;
        totalTokens: number;
    } | undefined, {
        promptTokens: import("convex/values").VFloat64<number, "required">;
        completionTokens: import("convex/values").VFloat64<number, "required">;
        totalTokens: import("convex/values").VFloat64<number, "required">;
    }, "optional", "promptTokens" | "completionTokens" | "totalTokens">;
    warnings: import("convex/values").VArray<({
        details?: string | undefined;
        type: "unsupported-setting";
        setting: string;
    } | {
        details?: string | undefined;
        type: "unsupported-tool";
        tool: any;
    } | {
        type: "other";
        message: string;
    })[] | undefined, import("convex/values").VUnion<{
        details?: string | undefined;
        type: "unsupported-setting";
        setting: string;
    } | {
        details?: string | undefined;
        type: "unsupported-tool";
        tool: any;
    } | {
        type: "other";
        message: string;
    }, [import("convex/values").VObject<{
        details?: string | undefined;
        type: "unsupported-setting";
        setting: string;
    }, {
        type: import("convex/values").VLiteral<"unsupported-setting", "required">;
        setting: import("convex/values").VString<string, "required">;
        details: import("convex/values").VString<string | undefined, "optional">;
    }, "required", "type" | "setting" | "details">, import("convex/values").VObject<{
        details?: string | undefined;
        type: "unsupported-tool";
        tool: any;
    }, {
        type: import("convex/values").VLiteral<"unsupported-tool", "required">;
        tool: import("convex/values").VAny<any, "required", string>;
        details: import("convex/values").VString<string | undefined, "optional">;
    }, "required", "type" | "tool" | "details" | `tool.${string}`>, import("convex/values").VObject<{
        type: "other";
        message: string;
    }, {
        type: import("convex/values").VLiteral<"other", "required">;
        message: import("convex/values").VString<string, "required">;
    }, "required", "type" | "message">], "required", "type" | "message" | "tool" | "setting" | "details" | `tool.${string}`>, "optional">;
    error: import("convex/values").VString<string | undefined, "optional">;
}, "required", "id" | "fileIds" | "error" | "model" | "provider" | "message" | "text" | "reasoning" | "usage" | "providerMetadata" | "sources" | "reasoningDetails" | "warnings" | "finishReason" | "message.providerOptions" | "message.role" | `message.providerOptions.${string}` | "message.content" | "usage.promptTokens" | "usage.completionTokens" | "usage.totalTokens" | `providerMetadata.${string}`>;
export type MessageWithMetadata = Infer<typeof vMessageWithMetadata>;
export declare const vMessageEmbeddings: import("convex/values").VObject<{
    model: string;
    dimension: 128 | 256 | 512 | 768 | 1024 | 1408 | 1536 | 2048 | 3072 | 4096;
    vectors: (number[] | null)[];
}, {
    model: import("convex/values").VString<string, "required">;
    dimension: import("convex/values").VUnion<128 | 256 | 512 | 768 | 1024 | 1408 | 1536 | 2048 | 3072 | 4096, import("convex/values").VLiteral<128 | 256 | 512 | 768 | 1024 | 1408 | 1536 | 2048 | 3072 | 4096, "required">[], "required", never>;
    vectors: import("convex/values").VArray<(number[] | null)[], import("convex/values").VUnion<number[] | null, [import("convex/values").VArray<number[], import("convex/values").VFloat64<number, "required">, "required">, import("convex/values").VNull<null, "required">], "required", never>, "required">;
}, "required", "model" | "dimension" | "vectors">;
export type MessageEmbeddings = Infer<typeof vMessageEmbeddings>;
export declare const vObjectResult: import("convex/values").VObject<{
    error?: string | undefined;
    usage?: any;
    providerMetadata?: Record<string, Record<string, any>> | undefined;
    warnings?: ({
        details?: string | undefined;
        type: "unsupported-setting";
        setting: string;
    } | {
        details?: string | undefined;
        type: "unsupported-tool";
        tool: any;
    } | {
        type: "other";
        message: string;
    })[] | undefined;
    object: any;
    finishReason: "length" | "error" | "other" | "stop" | "content-filter" | "tool-calls" | "unknown";
    request: {
        url?: string | undefined;
        body?: any;
        headers?: Record<string, string> | undefined;
        method?: string | undefined;
    };
    response: {
        body?: any;
        headers?: Record<string, string> | undefined;
        id: string;
        timestamp: number;
        modelId: string;
    };
}, {
    request: import("convex/values").VObject<{
        url?: string | undefined;
        body?: any;
        headers?: Record<string, string> | undefined;
        method?: string | undefined;
    }, {
        body: import("convex/values").VAny<any, "optional", string>;
        headers: import("convex/values").VRecord<Record<string, string> | undefined, import("convex/values").VString<string, "required">, import("convex/values").VString<string, "required">, "optional", string>;
        method: import("convex/values").VString<string | undefined, "optional">;
        url: import("convex/values").VString<string | undefined, "optional">;
    }, "required", "url" | "body" | "headers" | "method" | `body.${string}` | `headers.${string}`>;
    response: import("convex/values").VObject<{
        body?: any;
        headers?: Record<string, string> | undefined;
        id: string;
        timestamp: number;
        modelId: string;
    }, {
        id: import("convex/values").VString<string, "required">;
        timestamp: import("convex/values").VFloat64<number, "required">;
        modelId: import("convex/values").VString<string, "required">;
        headers: import("convex/values").VRecord<Record<string, string> | undefined, import("convex/values").VString<string, "required">, import("convex/values").VString<string, "required">, "optional", string>;
        body: import("convex/values").VAny<any, "optional", string>;
    }, "required", "id" | "body" | "headers" | `body.${string}` | `headers.${string}` | "timestamp" | "modelId">;
    finishReason: import("convex/values").VUnion<"length" | "error" | "other" | "stop" | "content-filter" | "tool-calls" | "unknown", [import("convex/values").VLiteral<"stop", "required">, import("convex/values").VLiteral<"length", "required">, import("convex/values").VLiteral<"content-filter", "required">, import("convex/values").VLiteral<"tool-calls", "required">, import("convex/values").VLiteral<"error", "required">, import("convex/values").VLiteral<"other", "required">, import("convex/values").VLiteral<"unknown", "required">], "required", never>;
    usage: import("convex/values").VAny<any, "optional", string>;
    object: import("convex/values").VAny<any, "required", string>;
    error: import("convex/values").VString<string | undefined, "optional">;
    warnings: import("convex/values").VArray<({
        details?: string | undefined;
        type: "unsupported-setting";
        setting: string;
    } | {
        details?: string | undefined;
        type: "unsupported-tool";
        tool: any;
    } | {
        type: "other";
        message: string;
    })[] | undefined, import("convex/values").VUnion<{
        details?: string | undefined;
        type: "unsupported-setting";
        setting: string;
    } | {
        details?: string | undefined;
        type: "unsupported-tool";
        tool: any;
    } | {
        type: "other";
        message: string;
    }, [import("convex/values").VObject<{
        details?: string | undefined;
        type: "unsupported-setting";
        setting: string;
    }, {
        type: import("convex/values").VLiteral<"unsupported-setting", "required">;
        setting: import("convex/values").VString<string, "required">;
        details: import("convex/values").VString<string | undefined, "optional">;
    }, "required", "type" | "setting" | "details">, import("convex/values").VObject<{
        details?: string | undefined;
        type: "unsupported-tool";
        tool: any;
    }, {
        type: import("convex/values").VLiteral<"unsupported-tool", "required">;
        tool: import("convex/values").VAny<any, "required", string>;
        details: import("convex/values").VString<string | undefined, "optional">;
    }, "required", "type" | "tool" | "details" | `tool.${string}`>, import("convex/values").VObject<{
        type: "other";
        message: string;
    }, {
        type: import("convex/values").VLiteral<"other", "required">;
        message: import("convex/values").VString<string, "required">;
    }, "required", "type" | "message">], "required", "type" | "message" | "tool" | "setting" | "details" | `tool.${string}`>, "optional">;
    providerMetadata: import("convex/values").VRecord<Record<string, Record<string, any>> | undefined, import("convex/values").VString<string, "required">, import("convex/values").VRecord<Record<string, any>, import("convex/values").VString<string, "required">, import("convex/values").VAny<any, "required", string>, "required", string>, "optional", string>;
}, "required", "object" | "error" | "usage" | "providerMetadata" | "warnings" | "finishReason" | `providerMetadata.${string}` | "request" | "response" | `object.${string}` | `usage.${string}` | "request.url" | "request.body" | "request.headers" | "request.method" | `request.body.${string}` | `request.headers.${string}` | "response.id" | "response.body" | "response.headers" | `response.body.${string}` | `response.headers.${string}` | "response.timestamp" | "response.modelId">;
export type ObjectResult = Infer<typeof vObjectResult>;
export declare const vContextOptionsSearchOptions: import("convex/values").VObject<{
    textSearch?: boolean | undefined;
    vectorSearch?: boolean | undefined;
    vectorScoreThreshold?: number | undefined;
    messageRange?: {
        before: number;
        after: number;
    } | undefined;
    limit: number;
}, {
    limit: import("convex/values").VFloat64<number, "required">;
    textSearch: import("convex/values").VBoolean<boolean | undefined, "optional">;
    vectorSearch: import("convex/values").VBoolean<boolean | undefined, "optional">;
    vectorScoreThreshold: import("convex/values").VFloat64<number | undefined, "optional">;
    messageRange: import("convex/values").VObject<{
        before: number;
        after: number;
    } | undefined, {
        before: import("convex/values").VFloat64<number, "required">;
        after: import("convex/values").VFloat64<number, "required">;
    }, "optional", "before" | "after">;
}, "required", "limit" | "textSearch" | "vectorSearch" | "vectorScoreThreshold" | "messageRange" | "messageRange.before" | "messageRange.after">;
export declare const vContextOptions: import("convex/values").VObject<{
    excludeToolMessages?: boolean | undefined;
    recentMessages?: number | undefined;
    searchOptions?: {
        textSearch?: boolean | undefined;
        vectorSearch?: boolean | undefined;
        vectorScoreThreshold?: number | undefined;
        messageRange?: {
            before: number;
            after: number;
        } | undefined;
        limit: number;
    } | undefined;
    searchOtherThreads?: boolean | undefined;
}, {
    excludeToolMessages: import("convex/values").VBoolean<boolean | undefined, "optional">;
    recentMessages: import("convex/values").VFloat64<number | undefined, "optional">;
    searchOptions: import("convex/values").VObject<{
        textSearch?: boolean | undefined;
        vectorSearch?: boolean | undefined;
        vectorScoreThreshold?: number | undefined;
        messageRange?: {
            before: number;
            after: number;
        } | undefined;
        limit: number;
    } | undefined, {
        limit: import("convex/values").VFloat64<number, "required">;
        textSearch: import("convex/values").VBoolean<boolean | undefined, "optional">;
        vectorSearch: import("convex/values").VBoolean<boolean | undefined, "optional">;
        vectorScoreThreshold: import("convex/values").VFloat64<number | undefined, "optional">;
        messageRange: import("convex/values").VObject<{
            before: number;
            after: number;
        } | undefined, {
            before: import("convex/values").VFloat64<number, "required">;
            after: import("convex/values").VFloat64<number, "required">;
        }, "optional", "before" | "after">;
    }, "optional", "limit" | "textSearch" | "vectorSearch" | "vectorScoreThreshold" | "messageRange" | "messageRange.before" | "messageRange.after">;
    searchOtherThreads: import("convex/values").VBoolean<boolean | undefined, "optional">;
}, "required", "excludeToolMessages" | "recentMessages" | "searchOptions" | "searchOtherThreads" | "searchOptions.limit" | "searchOptions.textSearch" | "searchOptions.vectorSearch" | "searchOptions.vectorScoreThreshold" | "searchOptions.messageRange" | "searchOptions.messageRange.before" | "searchOptions.messageRange.after">;
export declare const vStorageOptions: import("convex/values").VObject<{
    saveMessages?: "all" | "none" | "promptAndOutput" | undefined;
}, {
    saveMessages: import("convex/values").VUnion<"all" | "none" | "promptAndOutput" | undefined, [import("convex/values").VLiteral<"all", "required">, import("convex/values").VLiteral<"none", "required">, import("convex/values").VLiteral<"promptAndOutput", "required">], "optional", never>;
}, "required", "saveMessages">;
export declare const vCallSettingsFields: {
    maxTokens: import("convex/values").VFloat64<number | undefined, "optional">;
    temperature: import("convex/values").VFloat64<number | undefined, "optional">;
    topP: import("convex/values").VFloat64<number | undefined, "optional">;
    topK: import("convex/values").VFloat64<number | undefined, "optional">;
    presencePenalty: import("convex/values").VFloat64<number | undefined, "optional">;
    frequencyPenalty: import("convex/values").VFloat64<number | undefined, "optional">;
    seed: import("convex/values").VFloat64<number | undefined, "optional">;
    maxRetries: import("convex/values").VFloat64<number | undefined, "optional">;
    headers: import("convex/values").VRecord<Record<string, string> | undefined, import("convex/values").VString<string, "required">, import("convex/values").VString<string, "required">, "optional", string>;
};
export type CallSettings = ObjectType<typeof vCallSettingsFields>;
export declare const vTextArgs: import("convex/values").VObject<{
    userId?: string | undefined;
    threadId?: string | undefined;
    providerOptions?: Record<string, Record<string, any>> | undefined;
    system?: string | undefined;
    messages?: ({
        providerOptions?: Record<string, Record<string, any>> | undefined;
        role: "user";
        content: string | ({
            providerOptions?: Record<string, Record<string, any>> | undefined;
            type: "text";
            text: string;
        } | {
            providerOptions?: Record<string, Record<string, any>> | undefined;
            mimeType?: string | undefined;
            type: "image";
            image: string | ArrayBuffer;
        } | {
            providerOptions?: Record<string, Record<string, any>> | undefined;
            filename?: string | undefined;
            type: "file";
            mimeType: string;
            data: string | ArrayBuffer;
        })[];
    } | {
        providerOptions?: Record<string, Record<string, any>> | undefined;
        role: "assistant";
        content: string | ({
            providerOptions?: Record<string, Record<string, any>> | undefined;
            type: "text";
            text: string;
        } | {
            providerOptions?: Record<string, Record<string, any>> | undefined;
            filename?: string | undefined;
            type: "file";
            mimeType: string;
            data: string | ArrayBuffer;
        } | {
            providerOptions?: Record<string, Record<string, any>> | undefined;
            signature?: string | undefined;
            type: "reasoning";
            text: string;
        } | {
            providerOptions?: Record<string, Record<string, any>> | undefined;
            type: "redacted-reasoning";
            data: string;
        } | {
            providerOptions?: Record<string, Record<string, any>> | undefined;
            type: "tool-call";
            toolCallId: string;
            toolName: string;
            args: any;
        })[];
    } | {
        providerOptions?: Record<string, Record<string, any>> | undefined;
        role: "tool";
        content: {
            providerOptions?: Record<string, Record<string, any>> | undefined;
            args?: any;
            experimental_content?: ({
                type: "text";
                text: string;
            } | {
                mimeType?: string | undefined;
                type: "image";
                data: string;
            })[] | undefined;
            isError?: boolean | undefined;
            type: "tool-result";
            toolCallId: string;
            toolName: string;
            result: any;
        }[];
    } | {
        providerOptions?: Record<string, Record<string, any>> | undefined;
        role: "system";
        content: string;
    })[] | undefined;
    headers?: Record<string, string> | undefined;
    maxTokens?: number | undefined;
    temperature?: number | undefined;
    topP?: number | undefined;
    topK?: number | undefined;
    presencePenalty?: number | undefined;
    frequencyPenalty?: number | undefined;
    seed?: number | undefined;
    maxRetries?: number | undefined;
    stream?: boolean | undefined;
    toolChoice?: "required" | "none" | "auto" | {
        type: "tool";
        toolName: string;
    } | undefined;
    maxSteps?: number | undefined;
    experimental_continueSteps?: boolean | undefined;
    prompt?: string | undefined;
    promptMessageId?: string | undefined;
    contextOptions?: {
        excludeToolMessages?: boolean | undefined;
        recentMessages?: number | undefined;
        searchOptions?: {
            textSearch?: boolean | undefined;
            vectorSearch?: boolean | undefined;
            vectorScoreThreshold?: number | undefined;
            messageRange?: {
                before: number;
                after: number;
            } | undefined;
            limit: number;
        } | undefined;
        searchOtherThreads?: boolean | undefined;
    } | undefined;
    storageOptions?: {
        saveMessages?: "all" | "none" | "promptAndOutput" | undefined;
    } | undefined;
}, {
    stream: import("convex/values").VBoolean<boolean | undefined, "optional">;
    toolChoice: import("convex/values").VUnion<"required" | "none" | "auto" | {
        type: "tool";
        toolName: string;
    } | undefined, [import("convex/values").VLiteral<"auto", "required">, import("convex/values").VLiteral<"none", "required">, import("convex/values").VLiteral<"required", "required">, import("convex/values").VObject<{
        type: "tool";
        toolName: string;
    }, {
        type: import("convex/values").VLiteral<"tool", "required">;
        toolName: import("convex/values").VString<string, "required">;
    }, "required", "type" | "toolName">], "optional", "type" | "toolName">;
    maxSteps: import("convex/values").VFloat64<number | undefined, "optional">;
    experimental_continueSteps: import("convex/values").VBoolean<boolean | undefined, "optional">;
    system: import("convex/values").VString<string | undefined, "optional">;
    prompt: import("convex/values").VString<string | undefined, "optional">;
    messages: import("convex/values").VArray<({
        providerOptions?: Record<string, Record<string, any>> | undefined;
        role: "user";
        content: string | ({
            providerOptions?: Record<string, Record<string, any>> | undefined;
            type: "text";
            text: string;
        } | {
            providerOptions?: Record<string, Record<string, any>> | undefined;
            mimeType?: string | undefined;
            type: "image";
            image: string | ArrayBuffer;
        } | {
            providerOptions?: Record<string, Record<string, any>> | undefined;
            filename?: string | undefined;
            type: "file";
            mimeType: string;
            data: string | ArrayBuffer;
        })[];
    } | {
        providerOptions?: Record<string, Record<string, any>> | undefined;
        role: "assistant";
        content: string | ({
            providerOptions?: Record<string, Record<string, any>> | undefined;
            type: "text";
            text: string;
        } | {
            providerOptions?: Record<string, Record<string, any>> | undefined;
            filename?: string | undefined;
            type: "file";
            mimeType: string;
            data: string | ArrayBuffer;
        } | {
            providerOptions?: Record<string, Record<string, any>> | undefined;
            signature?: string | undefined;
            type: "reasoning";
            text: string;
        } | {
            providerOptions?: Record<string, Record<string, any>> | undefined;
            type: "redacted-reasoning";
            data: string;
        } | {
            providerOptions?: Record<string, Record<string, any>> | undefined;
            type: "tool-call";
            toolCallId: string;
            toolName: string;
            args: any;
        })[];
    } | {
        providerOptions?: Record<string, Record<string, any>> | undefined;
        role: "tool";
        content: {
            providerOptions?: Record<string, Record<string, any>> | undefined;
            args?: any;
            experimental_content?: ({
                type: "text";
                text: string;
            } | {
                mimeType?: string | undefined;
                type: "image";
                data: string;
            })[] | undefined;
            isError?: boolean | undefined;
            type: "tool-result";
            toolCallId: string;
            toolName: string;
            result: any;
        }[];
    } | {
        providerOptions?: Record<string, Record<string, any>> | undefined;
        role: "system";
        content: string;
    })[] | undefined, import("convex/values").VUnion<{
        providerOptions?: Record<string, Record<string, any>> | undefined;
        role: "user";
        content: string | ({
            providerOptions?: Record<string, Record<string, any>> | undefined;
            type: "text";
            text: string;
        } | {
            providerOptions?: Record<string, Record<string, any>> | undefined;
            mimeType?: string | undefined;
            type: "image";
            image: string | ArrayBuffer;
        } | {
            providerOptions?: Record<string, Record<string, any>> | undefined;
            filename?: string | undefined;
            type: "file";
            mimeType: string;
            data: string | ArrayBuffer;
        })[];
    } | {
        providerOptions?: Record<string, Record<string, any>> | undefined;
        role: "assistant";
        content: string | ({
            providerOptions?: Record<string, Record<string, any>> | undefined;
            type: "text";
            text: string;
        } | {
            providerOptions?: Record<string, Record<string, any>> | undefined;
            filename?: string | undefined;
            type: "file";
            mimeType: string;
            data: string | ArrayBuffer;
        } | {
            providerOptions?: Record<string, Record<string, any>> | undefined;
            signature?: string | undefined;
            type: "reasoning";
            text: string;
        } | {
            providerOptions?: Record<string, Record<string, any>> | undefined;
            type: "redacted-reasoning";
            data: string;
        } | {
            providerOptions?: Record<string, Record<string, any>> | undefined;
            type: "tool-call";
            toolCallId: string;
            toolName: string;
            args: any;
        })[];
    } | {
        providerOptions?: Record<string, Record<string, any>> | undefined;
        role: "tool";
        content: {
            providerOptions?: Record<string, Record<string, any>> | undefined;
            args?: any;
            experimental_content?: ({
                type: "text";
                text: string;
            } | {
                mimeType?: string | undefined;
                type: "image";
                data: string;
            })[] | undefined;
            isError?: boolean | undefined;
            type: "tool-result";
            toolCallId: string;
            toolName: string;
            result: any;
        }[];
    } | {
        providerOptions?: Record<string, Record<string, any>> | undefined;
        role: "system";
        content: string;
    }, [import("convex/values").VObject<{
        providerOptions?: Record<string, Record<string, any>> | undefined;
        role: "user";
        content: string | ({
            providerOptions?: Record<string, Record<string, any>> | undefined;
            type: "text";
            text: string;
        } | {
            providerOptions?: Record<string, Record<string, any>> | undefined;
            mimeType?: string | undefined;
            type: "image";
            image: string | ArrayBuffer;
        } | {
            providerOptions?: Record<string, Record<string, any>> | undefined;
            filename?: string | undefined;
            type: "file";
            mimeType: string;
            data: string | ArrayBuffer;
        })[];
    }, {
        role: import("convex/values").VLiteral<"user", "required">;
        content: import("convex/values").VUnion<string | ({
            providerOptions?: Record<string, Record<string, any>> | undefined;
            type: "text";
            text: string;
        } | {
            providerOptions?: Record<string, Record<string, any>> | undefined;
            mimeType?: string | undefined;
            type: "image";
            image: string | ArrayBuffer;
        } | {
            providerOptions?: Record<string, Record<string, any>> | undefined;
            filename?: string | undefined;
            type: "file";
            mimeType: string;
            data: string | ArrayBuffer;
        })[], [import("convex/values").VString<string, "required">, import("convex/values").VArray<({
            providerOptions?: Record<string, Record<string, any>> | undefined;
            type: "text";
            text: string;
        } | {
            providerOptions?: Record<string, Record<string, any>> | undefined;
            mimeType?: string | undefined;
            type: "image";
            image: string | ArrayBuffer;
        } | {
            providerOptions?: Record<string, Record<string, any>> | undefined;
            filename?: string | undefined;
            type: "file";
            mimeType: string;
            data: string | ArrayBuffer;
        })[], import("convex/values").VUnion<{
            providerOptions?: Record<string, Record<string, any>> | undefined;
            type: "text";
            text: string;
        } | {
            providerOptions?: Record<string, Record<string, any>> | undefined;
            mimeType?: string | undefined;
            type: "image";
            image: string | ArrayBuffer;
        } | {
            providerOptions?: Record<string, Record<string, any>> | undefined;
            filename?: string | undefined;
            type: "file";
            mimeType: string;
            data: string | ArrayBuffer;
        }, [import("convex/values").VObject<{
            providerOptions?: Record<string, Record<string, any>> | undefined;
            type: "text";
            text: string;
        }, {
            type: import("convex/values").VLiteral<"text", "required">;
            text: import("convex/values").VString<string, "required">;
            providerOptions: import("convex/values").VRecord<Record<string, Record<string, any>> | undefined, import("convex/values").VString<string, "required">, import("convex/values").VRecord<Record<string, any>, import("convex/values").VString<string, "required">, import("convex/values").VAny<any, "required", string>, "required", string>, "optional", string>;
        }, "required", "type" | "providerOptions" | "text" | `providerOptions.${string}`>, import("convex/values").VObject<{
            providerOptions?: Record<string, Record<string, any>> | undefined;
            mimeType?: string | undefined;
            type: "image";
            image: string | ArrayBuffer;
        }, {
            type: import("convex/values").VLiteral<"image", "required">;
            image: import("convex/values").VUnion<string | ArrayBuffer, [import("convex/values").VString<string, "required">, import("convex/values").VBytes<ArrayBuffer, "required">], "required", never>;
            mimeType: import("convex/values").VString<string | undefined, "optional">;
            providerOptions: import("convex/values").VRecord<Record<string, Record<string, any>> | undefined, import("convex/values").VString<string, "required">, import("convex/values").VRecord<Record<string, any>, import("convex/values").VString<string, "required">, import("convex/values").VAny<any, "required", string>, "required", string>, "optional", string>;
        }, "required", "type" | "providerOptions" | `providerOptions.${string}` | "image" | "mimeType">, import("convex/values").VObject<{
            providerOptions?: Record<string, Record<string, any>> | undefined;
            filename?: string | undefined;
            type: "file";
            mimeType: string;
            data: string | ArrayBuffer;
        }, {
            type: import("convex/values").VLiteral<"file", "required">;
            data: import("convex/values").VUnion<string | ArrayBuffer, [import("convex/values").VString<string, "required">, import("convex/values").VBytes<ArrayBuffer, "required">], "required", never>;
            filename: import("convex/values").VString<string | undefined, "optional">;
            mimeType: import("convex/values").VString<string, "required">;
            providerOptions: import("convex/values").VRecord<Record<string, Record<string, any>> | undefined, import("convex/values").VString<string, "required">, import("convex/values").VRecord<Record<string, any>, import("convex/values").VString<string, "required">, import("convex/values").VAny<any, "required", string>, "required", string>, "optional", string>;
        }, "required", "type" | "providerOptions" | `providerOptions.${string}` | "mimeType" | "data" | "filename">], "required", "type" | "providerOptions" | "text" | `providerOptions.${string}` | "image" | "mimeType" | "data" | "filename">, "required">], "required", never>;
        providerOptions: import("convex/values").VRecord<Record<string, Record<string, any>> | undefined, import("convex/values").VString<string, "required">, import("convex/values").VRecord<Record<string, any>, import("convex/values").VString<string, "required">, import("convex/values").VAny<any, "required", string>, "required", string>, "optional", string>;
    }, "required", "providerOptions" | "role" | `providerOptions.${string}` | "content">, import("convex/values").VObject<{
        providerOptions?: Record<string, Record<string, any>> | undefined;
        role: "assistant";
        content: string | ({
            providerOptions?: Record<string, Record<string, any>> | undefined;
            type: "text";
            text: string;
        } | {
            providerOptions?: Record<string, Record<string, any>> | undefined;
            filename?: string | undefined;
            type: "file";
            mimeType: string;
            data: string | ArrayBuffer;
        } | {
            providerOptions?: Record<string, Record<string, any>> | undefined;
            signature?: string | undefined;
            type: "reasoning";
            text: string;
        } | {
            providerOptions?: Record<string, Record<string, any>> | undefined;
            type: "redacted-reasoning";
            data: string;
        } | {
            providerOptions?: Record<string, Record<string, any>> | undefined;
            type: "tool-call";
            toolCallId: string;
            toolName: string;
            args: any;
        })[];
    }, {
        role: import("convex/values").VLiteral<"assistant", "required">;
        content: import("convex/values").VUnion<string | ({
            providerOptions?: Record<string, Record<string, any>> | undefined;
            type: "text";
            text: string;
        } | {
            providerOptions?: Record<string, Record<string, any>> | undefined;
            filename?: string | undefined;
            type: "file";
            mimeType: string;
            data: string | ArrayBuffer;
        } | {
            providerOptions?: Record<string, Record<string, any>> | undefined;
            signature?: string | undefined;
            type: "reasoning";
            text: string;
        } | {
            providerOptions?: Record<string, Record<string, any>> | undefined;
            type: "redacted-reasoning";
            data: string;
        } | {
            providerOptions?: Record<string, Record<string, any>> | undefined;
            type: "tool-call";
            toolCallId: string;
            toolName: string;
            args: any;
        })[], [import("convex/values").VString<string, "required">, import("convex/values").VArray<({
            providerOptions?: Record<string, Record<string, any>> | undefined;
            type: "text";
            text: string;
        } | {
            providerOptions?: Record<string, Record<string, any>> | undefined;
            filename?: string | undefined;
            type: "file";
            mimeType: string;
            data: string | ArrayBuffer;
        } | {
            providerOptions?: Record<string, Record<string, any>> | undefined;
            signature?: string | undefined;
            type: "reasoning";
            text: string;
        } | {
            providerOptions?: Record<string, Record<string, any>> | undefined;
            type: "redacted-reasoning";
            data: string;
        } | {
            providerOptions?: Record<string, Record<string, any>> | undefined;
            type: "tool-call";
            toolCallId: string;
            toolName: string;
            args: any;
        })[], import("convex/values").VUnion<{
            providerOptions?: Record<string, Record<string, any>> | undefined;
            type: "text";
            text: string;
        } | {
            providerOptions?: Record<string, Record<string, any>> | undefined;
            filename?: string | undefined;
            type: "file";
            mimeType: string;
            data: string | ArrayBuffer;
        } | {
            providerOptions?: Record<string, Record<string, any>> | undefined;
            signature?: string | undefined;
            type: "reasoning";
            text: string;
        } | {
            providerOptions?: Record<string, Record<string, any>> | undefined;
            type: "redacted-reasoning";
            data: string;
        } | {
            providerOptions?: Record<string, Record<string, any>> | undefined;
            type: "tool-call";
            toolCallId: string;
            toolName: string;
            args: any;
        }, [import("convex/values").VObject<{
            providerOptions?: Record<string, Record<string, any>> | undefined;
            type: "text";
            text: string;
        }, {
            type: import("convex/values").VLiteral<"text", "required">;
            text: import("convex/values").VString<string, "required">;
            providerOptions: import("convex/values").VRecord<Record<string, Record<string, any>> | undefined, import("convex/values").VString<string, "required">, import("convex/values").VRecord<Record<string, any>, import("convex/values").VString<string, "required">, import("convex/values").VAny<any, "required", string>, "required", string>, "optional", string>;
        }, "required", "type" | "providerOptions" | "text" | `providerOptions.${string}`>, import("convex/values").VObject<{
            providerOptions?: Record<string, Record<string, any>> | undefined;
            filename?: string | undefined;
            type: "file";
            mimeType: string;
            data: string | ArrayBuffer;
        }, {
            type: import("convex/values").VLiteral<"file", "required">;
            data: import("convex/values").VUnion<string | ArrayBuffer, [import("convex/values").VString<string, "required">, import("convex/values").VBytes<ArrayBuffer, "required">], "required", never>;
            filename: import("convex/values").VString<string | undefined, "optional">;
            mimeType: import("convex/values").VString<string, "required">;
            providerOptions: import("convex/values").VRecord<Record<string, Record<string, any>> | undefined, import("convex/values").VString<string, "required">, import("convex/values").VRecord<Record<string, any>, import("convex/values").VString<string, "required">, import("convex/values").VAny<any, "required", string>, "required", string>, "optional", string>;
        }, "required", "type" | "providerOptions" | `providerOptions.${string}` | "mimeType" | "data" | "filename">, import("convex/values").VObject<{
            providerOptions?: Record<string, Record<string, any>> | undefined;
            signature?: string | undefined;
            type: "reasoning";
            text: string;
        }, {
            type: import("convex/values").VLiteral<"reasoning", "required">;
            text: import("convex/values").VString<string, "required">;
            signature: import("convex/values").VString<string | undefined, "optional">;
            providerOptions: import("convex/values").VRecord<Record<string, Record<string, any>> | undefined, import("convex/values").VString<string, "required">, import("convex/values").VRecord<Record<string, any>, import("convex/values").VString<string, "required">, import("convex/values").VAny<any, "required", string>, "required", string>, "optional", string>;
        }, "required", "type" | "providerOptions" | "text" | `providerOptions.${string}` | "signature">, import("convex/values").VObject<{
            providerOptions?: Record<string, Record<string, any>> | undefined;
            type: "redacted-reasoning";
            data: string;
        }, {
            type: import("convex/values").VLiteral<"redacted-reasoning", "required">;
            data: import("convex/values").VString<string, "required">;
            providerOptions: import("convex/values").VRecord<Record<string, Record<string, any>> | undefined, import("convex/values").VString<string, "required">, import("convex/values").VRecord<Record<string, any>, import("convex/values").VString<string, "required">, import("convex/values").VAny<any, "required", string>, "required", string>, "optional", string>;
        }, "required", "type" | "providerOptions" | `providerOptions.${string}` | "data">, import("convex/values").VObject<{
            providerOptions?: Record<string, Record<string, any>> | undefined;
            type: "tool-call";
            toolCallId: string;
            toolName: string;
            args: any;
        }, {
            type: import("convex/values").VLiteral<"tool-call", "required">;
            toolCallId: import("convex/values").VString<string, "required">;
            toolName: import("convex/values").VString<string, "required">;
            args: import("convex/values").VAny<any, "required", string>;
            providerOptions: import("convex/values").VRecord<Record<string, Record<string, any>> | undefined, import("convex/values").VString<string, "required">, import("convex/values").VRecord<Record<string, any>, import("convex/values").VString<string, "required">, import("convex/values").VAny<any, "required", string>, "required", string>, "optional", string>;
        }, "required", "type" | "providerOptions" | `providerOptions.${string}` | "toolCallId" | "toolName" | "args" | `args.${string}`>], "required", "type" | "providerOptions" | "text" | `providerOptions.${string}` | "mimeType" | "data" | "filename" | "signature" | "toolCallId" | "toolName" | "args" | `args.${string}`>, "required">], "required", never>;
        providerOptions: import("convex/values").VRecord<Record<string, Record<string, any>> | undefined, import("convex/values").VString<string, "required">, import("convex/values").VRecord<Record<string, any>, import("convex/values").VString<string, "required">, import("convex/values").VAny<any, "required", string>, "required", string>, "optional", string>;
    }, "required", "providerOptions" | "role" | `providerOptions.${string}` | "content">, import("convex/values").VObject<{
        providerOptions?: Record<string, Record<string, any>> | undefined;
        role: "tool";
        content: {
            providerOptions?: Record<string, Record<string, any>> | undefined;
            args?: any;
            experimental_content?: ({
                type: "text";
                text: string;
            } | {
                mimeType?: string | undefined;
                type: "image";
                data: string;
            })[] | undefined;
            isError?: boolean | undefined;
            type: "tool-result";
            toolCallId: string;
            toolName: string;
            result: any;
        }[];
    }, {
        role: import("convex/values").VLiteral<"tool", "required">;
        content: import("convex/values").VArray<{
            providerOptions?: Record<string, Record<string, any>> | undefined;
            args?: any;
            experimental_content?: ({
                type: "text";
                text: string;
            } | {
                mimeType?: string | undefined;
                type: "image";
                data: string;
            })[] | undefined;
            isError?: boolean | undefined;
            type: "tool-result";
            toolCallId: string;
            toolName: string;
            result: any;
        }[], import("convex/values").VObject<{
            providerOptions?: Record<string, Record<string, any>> | undefined;
            args?: any;
            experimental_content?: ({
                type: "text";
                text: string;
            } | {
                mimeType?: string | undefined;
                type: "image";
                data: string;
            })[] | undefined;
            isError?: boolean | undefined;
            type: "tool-result";
            toolCallId: string;
            toolName: string;
            result: any;
        }, {
            type: import("convex/values").VLiteral<"tool-result", "required">;
            toolCallId: import("convex/values").VString<string, "required">;
            toolName: import("convex/values").VString<string, "required">;
            result: import("convex/values").VAny<any, "required", string>;
            args: import("convex/values").VAny<any, "optional", string>;
            experimental_content: import("convex/values").VArray<({
                type: "text";
                text: string;
            } | {
                mimeType?: string | undefined;
                type: "image";
                data: string;
            })[] | undefined, import("convex/values").VUnion<{
                type: "text";
                text: string;
            } | {
                mimeType?: string | undefined;
                type: "image";
                data: string;
            }, [import("convex/values").VObject<{
                type: "text";
                text: string;
            }, {
                type: import("convex/values").VLiteral<"text", "required">;
                text: import("convex/values").VString<string, "required">;
            }, "required", "type" | "text">, import("convex/values").VObject<{
                mimeType?: string | undefined;
                type: "image";
                data: string;
            }, {
                type: import("convex/values").VLiteral<"image", "required">;
                data: import("convex/values").VString<string, "required">;
                mimeType: import("convex/values").VString<string | undefined, "optional">;
            }, "required", "type" | "mimeType" | "data">], "required", "type" | "text" | "mimeType" | "data">, "optional">;
            isError: import("convex/values").VBoolean<boolean | undefined, "optional">;
            providerOptions: import("convex/values").VRecord<Record<string, Record<string, any>> | undefined, import("convex/values").VString<string, "required">, import("convex/values").VRecord<Record<string, any>, import("convex/values").VString<string, "required">, import("convex/values").VAny<any, "required", string>, "required", string>, "optional", string>;
        }, "required", "type" | "providerOptions" | `providerOptions.${string}` | "toolCallId" | "toolName" | "args" | `args.${string}` | "result" | "experimental_content" | "isError" | `result.${string}`>, "required">;
        providerOptions: import("convex/values").VRecord<Record<string, Record<string, any>> | undefined, import("convex/values").VString<string, "required">, import("convex/values").VRecord<Record<string, any>, import("convex/values").VString<string, "required">, import("convex/values").VAny<any, "required", string>, "required", string>, "optional", string>;
    }, "required", "providerOptions" | "role" | `providerOptions.${string}` | "content">, import("convex/values").VObject<{
        providerOptions?: Record<string, Record<string, any>> | undefined;
        role: "system";
        content: string;
    }, {
        role: import("convex/values").VLiteral<"system", "required">;
        content: import("convex/values").VString<string, "required">;
        providerOptions: import("convex/values").VRecord<Record<string, Record<string, any>> | undefined, import("convex/values").VString<string, "required">, import("convex/values").VRecord<Record<string, any>, import("convex/values").VString<string, "required">, import("convex/values").VAny<any, "required", string>, "required", string>, "optional", string>;
    }, "required", "providerOptions" | "role" | `providerOptions.${string}` | "content">], "required", "providerOptions" | "role" | `providerOptions.${string}` | "content">, "optional">;
    promptMessageId: import("convex/values").VString<string | undefined, "optional">;
    maxTokens: import("convex/values").VFloat64<number | undefined, "optional">;
    temperature: import("convex/values").VFloat64<number | undefined, "optional">;
    topP: import("convex/values").VFloat64<number | undefined, "optional">;
    topK: import("convex/values").VFloat64<number | undefined, "optional">;
    presencePenalty: import("convex/values").VFloat64<number | undefined, "optional">;
    frequencyPenalty: import("convex/values").VFloat64<number | undefined, "optional">;
    seed: import("convex/values").VFloat64<number | undefined, "optional">;
    maxRetries: import("convex/values").VFloat64<number | undefined, "optional">;
    headers: import("convex/values").VRecord<Record<string, string> | undefined, import("convex/values").VString<string, "required">, import("convex/values").VString<string, "required">, "optional", string>;
    userId: import("convex/values").VString<string | undefined, "optional">;
    threadId: import("convex/values").VString<string | undefined, "optional">;
    contextOptions: import("convex/values").VObject<{
        excludeToolMessages?: boolean | undefined;
        recentMessages?: number | undefined;
        searchOptions?: {
            textSearch?: boolean | undefined;
            vectorSearch?: boolean | undefined;
            vectorScoreThreshold?: number | undefined;
            messageRange?: {
                before: number;
                after: number;
            } | undefined;
            limit: number;
        } | undefined;
        searchOtherThreads?: boolean | undefined;
    } | undefined, {
        excludeToolMessages: import("convex/values").VBoolean<boolean | undefined, "optional">;
        recentMessages: import("convex/values").VFloat64<number | undefined, "optional">;
        searchOptions: import("convex/values").VObject<{
            textSearch?: boolean | undefined;
            vectorSearch?: boolean | undefined;
            vectorScoreThreshold?: number | undefined;
            messageRange?: {
                before: number;
                after: number;
            } | undefined;
            limit: number;
        } | undefined, {
            limit: import("convex/values").VFloat64<number, "required">;
            textSearch: import("convex/values").VBoolean<boolean | undefined, "optional">;
            vectorSearch: import("convex/values").VBoolean<boolean | undefined, "optional">;
            vectorScoreThreshold: import("convex/values").VFloat64<number | undefined, "optional">;
            messageRange: import("convex/values").VObject<{
                before: number;
                after: number;
            } | undefined, {
                before: import("convex/values").VFloat64<number, "required">;
                after: import("convex/values").VFloat64<number, "required">;
            }, "optional", "before" | "after">;
        }, "optional", "limit" | "textSearch" | "vectorSearch" | "vectorScoreThreshold" | "messageRange" | "messageRange.before" | "messageRange.after">;
        searchOtherThreads: import("convex/values").VBoolean<boolean | undefined, "optional">;
    }, "optional", "excludeToolMessages" | "recentMessages" | "searchOptions" | "searchOtherThreads" | "searchOptions.limit" | "searchOptions.textSearch" | "searchOptions.vectorSearch" | "searchOptions.vectorScoreThreshold" | "searchOptions.messageRange" | "searchOptions.messageRange.before" | "searchOptions.messageRange.after">;
    storageOptions: import("convex/values").VObject<{
        saveMessages?: "all" | "none" | "promptAndOutput" | undefined;
    } | undefined, {
        saveMessages: import("convex/values").VUnion<"all" | "none" | "promptAndOutput" | undefined, [import("convex/values").VLiteral<"all", "required">, import("convex/values").VLiteral<"none", "required">, import("convex/values").VLiteral<"promptAndOutput", "required">], "optional", never>;
    }, "optional", "saveMessages">;
    providerOptions: import("convex/values").VRecord<Record<string, Record<string, any>> | undefined, import("convex/values").VString<string, "required">, import("convex/values").VRecord<Record<string, any>, import("convex/values").VString<string, "required">, import("convex/values").VAny<any, "required", string>, "required", string>, "optional", string>;
}, "required", "userId" | "threadId" | "providerOptions" | `providerOptions.${string}` | "system" | "messages" | "headers" | `headers.${string}` | "maxTokens" | "temperature" | "topP" | "topK" | "presencePenalty" | "frequencyPenalty" | "seed" | "maxRetries" | "stream" | "toolChoice" | "maxSteps" | "experimental_continueSteps" | "prompt" | "promptMessageId" | "contextOptions" | "storageOptions" | "toolChoice.type" | "toolChoice.toolName" | "contextOptions.excludeToolMessages" | "contextOptions.recentMessages" | "contextOptions.searchOptions" | "contextOptions.searchOtherThreads" | "contextOptions.searchOptions.limit" | "contextOptions.searchOptions.textSearch" | "contextOptions.searchOptions.vectorSearch" | "contextOptions.searchOptions.vectorScoreThreshold" | "contextOptions.searchOptions.messageRange" | "contextOptions.searchOptions.messageRange.before" | "contextOptions.searchOptions.messageRange.after" | "storageOptions.saveMessages">;
export type TextArgs = Infer<typeof vTextArgs>;
export declare const vSafeObjectArgs: import("convex/values").VObject<{
    userId?: string | undefined;
    threadId?: string | undefined;
    providerOptions?: Record<string, Record<string, any>> | undefined;
    system?: string | undefined;
    messages?: ({
        providerOptions?: Record<string, Record<string, any>> | undefined;
        role: "user";
        content: string | ({
            providerOptions?: Record<string, Record<string, any>> | undefined;
            type: "text";
            text: string;
        } | {
            providerOptions?: Record<string, Record<string, any>> | undefined;
            mimeType?: string | undefined;
            type: "image";
            image: string | ArrayBuffer;
        } | {
            providerOptions?: Record<string, Record<string, any>> | undefined;
            filename?: string | undefined;
            type: "file";
            mimeType: string;
            data: string | ArrayBuffer;
        })[];
    } | {
        providerOptions?: Record<string, Record<string, any>> | undefined;
        role: "assistant";
        content: string | ({
            providerOptions?: Record<string, Record<string, any>> | undefined;
            type: "text";
            text: string;
        } | {
            providerOptions?: Record<string, Record<string, any>> | undefined;
            filename?: string | undefined;
            type: "file";
            mimeType: string;
            data: string | ArrayBuffer;
        } | {
            providerOptions?: Record<string, Record<string, any>> | undefined;
            signature?: string | undefined;
            type: "reasoning";
            text: string;
        } | {
            providerOptions?: Record<string, Record<string, any>> | undefined;
            type: "redacted-reasoning";
            data: string;
        } | {
            providerOptions?: Record<string, Record<string, any>> | undefined;
            type: "tool-call";
            toolCallId: string;
            toolName: string;
            args: any;
        })[];
    } | {
        providerOptions?: Record<string, Record<string, any>> | undefined;
        role: "tool";
        content: {
            providerOptions?: Record<string, Record<string, any>> | undefined;
            args?: any;
            experimental_content?: ({
                type: "text";
                text: string;
            } | {
                mimeType?: string | undefined;
                type: "image";
                data: string;
            })[] | undefined;
            isError?: boolean | undefined;
            type: "tool-result";
            toolCallId: string;
            toolName: string;
            result: any;
        }[];
    } | {
        providerOptions?: Record<string, Record<string, any>> | undefined;
        role: "system";
        content: string;
    })[] | undefined;
    headers?: Record<string, string> | undefined;
    maxTokens?: number | undefined;
    temperature?: number | undefined;
    topP?: number | undefined;
    topK?: number | undefined;
    presencePenalty?: number | undefined;
    frequencyPenalty?: number | undefined;
    seed?: number | undefined;
    maxRetries?: number | undefined;
    prompt?: string | undefined;
    promptMessageId?: string | undefined;
    contextOptions?: {
        excludeToolMessages?: boolean | undefined;
        recentMessages?: number | undefined;
        searchOptions?: {
            textSearch?: boolean | undefined;
            vectorSearch?: boolean | undefined;
            vectorScoreThreshold?: number | undefined;
            messageRange?: {
                before: number;
                after: number;
            } | undefined;
            limit: number;
        } | undefined;
        searchOtherThreads?: boolean | undefined;
    } | undefined;
    storageOptions?: {
        saveMessages?: "all" | "none" | "promptAndOutput" | undefined;
    } | undefined;
}, {
    system: import("convex/values").VString<string | undefined, "optional">;
    prompt: import("convex/values").VString<string | undefined, "optional">;
    messages: import("convex/values").VArray<({
        providerOptions?: Record<string, Record<string, any>> | undefined;
        role: "user";
        content: string | ({
            providerOptions?: Record<string, Record<string, any>> | undefined;
            type: "text";
            text: string;
        } | {
            providerOptions?: Record<string, Record<string, any>> | undefined;
            mimeType?: string | undefined;
            type: "image";
            image: string | ArrayBuffer;
        } | {
            providerOptions?: Record<string, Record<string, any>> | undefined;
            filename?: string | undefined;
            type: "file";
            mimeType: string;
            data: string | ArrayBuffer;
        })[];
    } | {
        providerOptions?: Record<string, Record<string, any>> | undefined;
        role: "assistant";
        content: string | ({
            providerOptions?: Record<string, Record<string, any>> | undefined;
            type: "text";
            text: string;
        } | {
            providerOptions?: Record<string, Record<string, any>> | undefined;
            filename?: string | undefined;
            type: "file";
            mimeType: string;
            data: string | ArrayBuffer;
        } | {
            providerOptions?: Record<string, Record<string, any>> | undefined;
            signature?: string | undefined;
            type: "reasoning";
            text: string;
        } | {
            providerOptions?: Record<string, Record<string, any>> | undefined;
            type: "redacted-reasoning";
            data: string;
        } | {
            providerOptions?: Record<string, Record<string, any>> | undefined;
            type: "tool-call";
            toolCallId: string;
            toolName: string;
            args: any;
        })[];
    } | {
        providerOptions?: Record<string, Record<string, any>> | undefined;
        role: "tool";
        content: {
            providerOptions?: Record<string, Record<string, any>> | undefined;
            args?: any;
            experimental_content?: ({
                type: "text";
                text: string;
            } | {
                mimeType?: string | undefined;
                type: "image";
                data: string;
            })[] | undefined;
            isError?: boolean | undefined;
            type: "tool-result";
            toolCallId: string;
            toolName: string;
            result: any;
        }[];
    } | {
        providerOptions?: Record<string, Record<string, any>> | undefined;
        role: "system";
        content: string;
    })[] | undefined, import("convex/values").VUnion<{
        providerOptions?: Record<string, Record<string, any>> | undefined;
        role: "user";
        content: string | ({
            providerOptions?: Record<string, Record<string, any>> | undefined;
            type: "text";
            text: string;
        } | {
            providerOptions?: Record<string, Record<string, any>> | undefined;
            mimeType?: string | undefined;
            type: "image";
            image: string | ArrayBuffer;
        } | {
            providerOptions?: Record<string, Record<string, any>> | undefined;
            filename?: string | undefined;
            type: "file";
            mimeType: string;
            data: string | ArrayBuffer;
        })[];
    } | {
        providerOptions?: Record<string, Record<string, any>> | undefined;
        role: "assistant";
        content: string | ({
            providerOptions?: Record<string, Record<string, any>> | undefined;
            type: "text";
            text: string;
        } | {
            providerOptions?: Record<string, Record<string, any>> | undefined;
            filename?: string | undefined;
            type: "file";
            mimeType: string;
            data: string | ArrayBuffer;
        } | {
            providerOptions?: Record<string, Record<string, any>> | undefined;
            signature?: string | undefined;
            type: "reasoning";
            text: string;
        } | {
            providerOptions?: Record<string, Record<string, any>> | undefined;
            type: "redacted-reasoning";
            data: string;
        } | {
            providerOptions?: Record<string, Record<string, any>> | undefined;
            type: "tool-call";
            toolCallId: string;
            toolName: string;
            args: any;
        })[];
    } | {
        providerOptions?: Record<string, Record<string, any>> | undefined;
        role: "tool";
        content: {
            providerOptions?: Record<string, Record<string, any>> | undefined;
            args?: any;
            experimental_content?: ({
                type: "text";
                text: string;
            } | {
                mimeType?: string | undefined;
                type: "image";
                data: string;
            })[] | undefined;
            isError?: boolean | undefined;
            type: "tool-result";
            toolCallId: string;
            toolName: string;
            result: any;
        }[];
    } | {
        providerOptions?: Record<string, Record<string, any>> | undefined;
        role: "system";
        content: string;
    }, [import("convex/values").VObject<{
        providerOptions?: Record<string, Record<string, any>> | undefined;
        role: "user";
        content: string | ({
            providerOptions?: Record<string, Record<string, any>> | undefined;
            type: "text";
            text: string;
        } | {
            providerOptions?: Record<string, Record<string, any>> | undefined;
            mimeType?: string | undefined;
            type: "image";
            image: string | ArrayBuffer;
        } | {
            providerOptions?: Record<string, Record<string, any>> | undefined;
            filename?: string | undefined;
            type: "file";
            mimeType: string;
            data: string | ArrayBuffer;
        })[];
    }, {
        role: import("convex/values").VLiteral<"user", "required">;
        content: import("convex/values").VUnion<string | ({
            providerOptions?: Record<string, Record<string, any>> | undefined;
            type: "text";
            text: string;
        } | {
            providerOptions?: Record<string, Record<string, any>> | undefined;
            mimeType?: string | undefined;
            type: "image";
            image: string | ArrayBuffer;
        } | {
            providerOptions?: Record<string, Record<string, any>> | undefined;
            filename?: string | undefined;
            type: "file";
            mimeType: string;
            data: string | ArrayBuffer;
        })[], [import("convex/values").VString<string, "required">, import("convex/values").VArray<({
            providerOptions?: Record<string, Record<string, any>> | undefined;
            type: "text";
            text: string;
        } | {
            providerOptions?: Record<string, Record<string, any>> | undefined;
            mimeType?: string | undefined;
            type: "image";
            image: string | ArrayBuffer;
        } | {
            providerOptions?: Record<string, Record<string, any>> | undefined;
            filename?: string | undefined;
            type: "file";
            mimeType: string;
            data: string | ArrayBuffer;
        })[], import("convex/values").VUnion<{
            providerOptions?: Record<string, Record<string, any>> | undefined;
            type: "text";
            text: string;
        } | {
            providerOptions?: Record<string, Record<string, any>> | undefined;
            mimeType?: string | undefined;
            type: "image";
            image: string | ArrayBuffer;
        } | {
            providerOptions?: Record<string, Record<string, any>> | undefined;
            filename?: string | undefined;
            type: "file";
            mimeType: string;
            data: string | ArrayBuffer;
        }, [import("convex/values").VObject<{
            providerOptions?: Record<string, Record<string, any>> | undefined;
            type: "text";
            text: string;
        }, {
            type: import("convex/values").VLiteral<"text", "required">;
            text: import("convex/values").VString<string, "required">;
            providerOptions: import("convex/values").VRecord<Record<string, Record<string, any>> | undefined, import("convex/values").VString<string, "required">, import("convex/values").VRecord<Record<string, any>, import("convex/values").VString<string, "required">, import("convex/values").VAny<any, "required", string>, "required", string>, "optional", string>;
        }, "required", "type" | "providerOptions" | "text" | `providerOptions.${string}`>, import("convex/values").VObject<{
            providerOptions?: Record<string, Record<string, any>> | undefined;
            mimeType?: string | undefined;
            type: "image";
            image: string | ArrayBuffer;
        }, {
            type: import("convex/values").VLiteral<"image", "required">;
            image: import("convex/values").VUnion<string | ArrayBuffer, [import("convex/values").VString<string, "required">, import("convex/values").VBytes<ArrayBuffer, "required">], "required", never>;
            mimeType: import("convex/values").VString<string | undefined, "optional">;
            providerOptions: import("convex/values").VRecord<Record<string, Record<string, any>> | undefined, import("convex/values").VString<string, "required">, import("convex/values").VRecord<Record<string, any>, import("convex/values").VString<string, "required">, import("convex/values").VAny<any, "required", string>, "required", string>, "optional", string>;
        }, "required", "type" | "providerOptions" | `providerOptions.${string}` | "image" | "mimeType">, import("convex/values").VObject<{
            providerOptions?: Record<string, Record<string, any>> | undefined;
            filename?: string | undefined;
            type: "file";
            mimeType: string;
            data: string | ArrayBuffer;
        }, {
            type: import("convex/values").VLiteral<"file", "required">;
            data: import("convex/values").VUnion<string | ArrayBuffer, [import("convex/values").VString<string, "required">, import("convex/values").VBytes<ArrayBuffer, "required">], "required", never>;
            filename: import("convex/values").VString<string | undefined, "optional">;
            mimeType: import("convex/values").VString<string, "required">;
            providerOptions: import("convex/values").VRecord<Record<string, Record<string, any>> | undefined, import("convex/values").VString<string, "required">, import("convex/values").VRecord<Record<string, any>, import("convex/values").VString<string, "required">, import("convex/values").VAny<any, "required", string>, "required", string>, "optional", string>;
        }, "required", "type" | "providerOptions" | `providerOptions.${string}` | "mimeType" | "data" | "filename">], "required", "type" | "providerOptions" | "text" | `providerOptions.${string}` | "image" | "mimeType" | "data" | "filename">, "required">], "required", never>;
        providerOptions: import("convex/values").VRecord<Record<string, Record<string, any>> | undefined, import("convex/values").VString<string, "required">, import("convex/values").VRecord<Record<string, any>, import("convex/values").VString<string, "required">, import("convex/values").VAny<any, "required", string>, "required", string>, "optional", string>;
    }, "required", "providerOptions" | "role" | `providerOptions.${string}` | "content">, import("convex/values").VObject<{
        providerOptions?: Record<string, Record<string, any>> | undefined;
        role: "assistant";
        content: string | ({
            providerOptions?: Record<string, Record<string, any>> | undefined;
            type: "text";
            text: string;
        } | {
            providerOptions?: Record<string, Record<string, any>> | undefined;
            filename?: string | undefined;
            type: "file";
            mimeType: string;
            data: string | ArrayBuffer;
        } | {
            providerOptions?: Record<string, Record<string, any>> | undefined;
            signature?: string | undefined;
            type: "reasoning";
            text: string;
        } | {
            providerOptions?: Record<string, Record<string, any>> | undefined;
            type: "redacted-reasoning";
            data: string;
        } | {
            providerOptions?: Record<string, Record<string, any>> | undefined;
            type: "tool-call";
            toolCallId: string;
            toolName: string;
            args: any;
        })[];
    }, {
        role: import("convex/values").VLiteral<"assistant", "required">;
        content: import("convex/values").VUnion<string | ({
            providerOptions?: Record<string, Record<string, any>> | undefined;
            type: "text";
            text: string;
        } | {
            providerOptions?: Record<string, Record<string, any>> | undefined;
            filename?: string | undefined;
            type: "file";
            mimeType: string;
            data: string | ArrayBuffer;
        } | {
            providerOptions?: Record<string, Record<string, any>> | undefined;
            signature?: string | undefined;
            type: "reasoning";
            text: string;
        } | {
            providerOptions?: Record<string, Record<string, any>> | undefined;
            type: "redacted-reasoning";
            data: string;
        } | {
            providerOptions?: Record<string, Record<string, any>> | undefined;
            type: "tool-call";
            toolCallId: string;
            toolName: string;
            args: any;
        })[], [import("convex/values").VString<string, "required">, import("convex/values").VArray<({
            providerOptions?: Record<string, Record<string, any>> | undefined;
            type: "text";
            text: string;
        } | {
            providerOptions?: Record<string, Record<string, any>> | undefined;
            filename?: string | undefined;
            type: "file";
            mimeType: string;
            data: string | ArrayBuffer;
        } | {
            providerOptions?: Record<string, Record<string, any>> | undefined;
            signature?: string | undefined;
            type: "reasoning";
            text: string;
        } | {
            providerOptions?: Record<string, Record<string, any>> | undefined;
            type: "redacted-reasoning";
            data: string;
        } | {
            providerOptions?: Record<string, Record<string, any>> | undefined;
            type: "tool-call";
            toolCallId: string;
            toolName: string;
            args: any;
        })[], import("convex/values").VUnion<{
            providerOptions?: Record<string, Record<string, any>> | undefined;
            type: "text";
            text: string;
        } | {
            providerOptions?: Record<string, Record<string, any>> | undefined;
            filename?: string | undefined;
            type: "file";
            mimeType: string;
            data: string | ArrayBuffer;
        } | {
            providerOptions?: Record<string, Record<string, any>> | undefined;
            signature?: string | undefined;
            type: "reasoning";
            text: string;
        } | {
            providerOptions?: Record<string, Record<string, any>> | undefined;
            type: "redacted-reasoning";
            data: string;
        } | {
            providerOptions?: Record<string, Record<string, any>> | undefined;
            type: "tool-call";
            toolCallId: string;
            toolName: string;
            args: any;
        }, [import("convex/values").VObject<{
            providerOptions?: Record<string, Record<string, any>> | undefined;
            type: "text";
            text: string;
        }, {
            type: import("convex/values").VLiteral<"text", "required">;
            text: import("convex/values").VString<string, "required">;
            providerOptions: import("convex/values").VRecord<Record<string, Record<string, any>> | undefined, import("convex/values").VString<string, "required">, import("convex/values").VRecord<Record<string, any>, import("convex/values").VString<string, "required">, import("convex/values").VAny<any, "required", string>, "required", string>, "optional", string>;
        }, "required", "type" | "providerOptions" | "text" | `providerOptions.${string}`>, import("convex/values").VObject<{
            providerOptions?: Record<string, Record<string, any>> | undefined;
            filename?: string | undefined;
            type: "file";
            mimeType: string;
            data: string | ArrayBuffer;
        }, {
            type: import("convex/values").VLiteral<"file", "required">;
            data: import("convex/values").VUnion<string | ArrayBuffer, [import("convex/values").VString<string, "required">, import("convex/values").VBytes<ArrayBuffer, "required">], "required", never>;
            filename: import("convex/values").VString<string | undefined, "optional">;
            mimeType: import("convex/values").VString<string, "required">;
            providerOptions: import("convex/values").VRecord<Record<string, Record<string, any>> | undefined, import("convex/values").VString<string, "required">, import("convex/values").VRecord<Record<string, any>, import("convex/values").VString<string, "required">, import("convex/values").VAny<any, "required", string>, "required", string>, "optional", string>;
        }, "required", "type" | "providerOptions" | `providerOptions.${string}` | "mimeType" | "data" | "filename">, import("convex/values").VObject<{
            providerOptions?: Record<string, Record<string, any>> | undefined;
            signature?: string | undefined;
            type: "reasoning";
            text: string;
        }, {
            type: import("convex/values").VLiteral<"reasoning", "required">;
            text: import("convex/values").VString<string, "required">;
            signature: import("convex/values").VString<string | undefined, "optional">;
            providerOptions: import("convex/values").VRecord<Record<string, Record<string, any>> | undefined, import("convex/values").VString<string, "required">, import("convex/values").VRecord<Record<string, any>, import("convex/values").VString<string, "required">, import("convex/values").VAny<any, "required", string>, "required", string>, "optional", string>;
        }, "required", "type" | "providerOptions" | "text" | `providerOptions.${string}` | "signature">, import("convex/values").VObject<{
            providerOptions?: Record<string, Record<string, any>> | undefined;
            type: "redacted-reasoning";
            data: string;
        }, {
            type: import("convex/values").VLiteral<"redacted-reasoning", "required">;
            data: import("convex/values").VString<string, "required">;
            providerOptions: import("convex/values").VRecord<Record<string, Record<string, any>> | undefined, import("convex/values").VString<string, "required">, import("convex/values").VRecord<Record<string, any>, import("convex/values").VString<string, "required">, import("convex/values").VAny<any, "required", string>, "required", string>, "optional", string>;
        }, "required", "type" | "providerOptions" | `providerOptions.${string}` | "data">, import("convex/values").VObject<{
            providerOptions?: Record<string, Record<string, any>> | undefined;
            type: "tool-call";
            toolCallId: string;
            toolName: string;
            args: any;
        }, {
            type: import("convex/values").VLiteral<"tool-call", "required">;
            toolCallId: import("convex/values").VString<string, "required">;
            toolName: import("convex/values").VString<string, "required">;
            args: import("convex/values").VAny<any, "required", string>;
            providerOptions: import("convex/values").VRecord<Record<string, Record<string, any>> | undefined, import("convex/values").VString<string, "required">, import("convex/values").VRecord<Record<string, any>, import("convex/values").VString<string, "required">, import("convex/values").VAny<any, "required", string>, "required", string>, "optional", string>;
        }, "required", "type" | "providerOptions" | `providerOptions.${string}` | "toolCallId" | "toolName" | "args" | `args.${string}`>], "required", "type" | "providerOptions" | "text" | `providerOptions.${string}` | "mimeType" | "data" | "filename" | "signature" | "toolCallId" | "toolName" | "args" | `args.${string}`>, "required">], "required", never>;
        providerOptions: import("convex/values").VRecord<Record<string, Record<string, any>> | undefined, import("convex/values").VString<string, "required">, import("convex/values").VRecord<Record<string, any>, import("convex/values").VString<string, "required">, import("convex/values").VAny<any, "required", string>, "required", string>, "optional", string>;
    }, "required", "providerOptions" | "role" | `providerOptions.${string}` | "content">, import("convex/values").VObject<{
        providerOptions?: Record<string, Record<string, any>> | undefined;
        role: "tool";
        content: {
            providerOptions?: Record<string, Record<string, any>> | undefined;
            args?: any;
            experimental_content?: ({
                type: "text";
                text: string;
            } | {
                mimeType?: string | undefined;
                type: "image";
                data: string;
            })[] | undefined;
            isError?: boolean | undefined;
            type: "tool-result";
            toolCallId: string;
            toolName: string;
            result: any;
        }[];
    }, {
        role: import("convex/values").VLiteral<"tool", "required">;
        content: import("convex/values").VArray<{
            providerOptions?: Record<string, Record<string, any>> | undefined;
            args?: any;
            experimental_content?: ({
                type: "text";
                text: string;
            } | {
                mimeType?: string | undefined;
                type: "image";
                data: string;
            })[] | undefined;
            isError?: boolean | undefined;
            type: "tool-result";
            toolCallId: string;
            toolName: string;
            result: any;
        }[], import("convex/values").VObject<{
            providerOptions?: Record<string, Record<string, any>> | undefined;
            args?: any;
            experimental_content?: ({
                type: "text";
                text: string;
            } | {
                mimeType?: string | undefined;
                type: "image";
                data: string;
            })[] | undefined;
            isError?: boolean | undefined;
            type: "tool-result";
            toolCallId: string;
            toolName: string;
            result: any;
        }, {
            type: import("convex/values").VLiteral<"tool-result", "required">;
            toolCallId: import("convex/values").VString<string, "required">;
            toolName: import("convex/values").VString<string, "required">;
            result: import("convex/values").VAny<any, "required", string>;
            args: import("convex/values").VAny<any, "optional", string>;
            experimental_content: import("convex/values").VArray<({
                type: "text";
                text: string;
            } | {
                mimeType?: string | undefined;
                type: "image";
                data: string;
            })[] | undefined, import("convex/values").VUnion<{
                type: "text";
                text: string;
            } | {
                mimeType?: string | undefined;
                type: "image";
                data: string;
            }, [import("convex/values").VObject<{
                type: "text";
                text: string;
            }, {
                type: import("convex/values").VLiteral<"text", "required">;
                text: import("convex/values").VString<string, "required">;
            }, "required", "type" | "text">, import("convex/values").VObject<{
                mimeType?: string | undefined;
                type: "image";
                data: string;
            }, {
                type: import("convex/values").VLiteral<"image", "required">;
                data: import("convex/values").VString<string, "required">;
                mimeType: import("convex/values").VString<string | undefined, "optional">;
            }, "required", "type" | "mimeType" | "data">], "required", "type" | "text" | "mimeType" | "data">, "optional">;
            isError: import("convex/values").VBoolean<boolean | undefined, "optional">;
            providerOptions: import("convex/values").VRecord<Record<string, Record<string, any>> | undefined, import("convex/values").VString<string, "required">, import("convex/values").VRecord<Record<string, any>, import("convex/values").VString<string, "required">, import("convex/values").VAny<any, "required", string>, "required", string>, "optional", string>;
        }, "required", "type" | "providerOptions" | `providerOptions.${string}` | "toolCallId" | "toolName" | "args" | `args.${string}` | "result" | "experimental_content" | "isError" | `result.${string}`>, "required">;
        providerOptions: import("convex/values").VRecord<Record<string, Record<string, any>> | undefined, import("convex/values").VString<string, "required">, import("convex/values").VRecord<Record<string, any>, import("convex/values").VString<string, "required">, import("convex/values").VAny<any, "required", string>, "required", string>, "optional", string>;
    }, "required", "providerOptions" | "role" | `providerOptions.${string}` | "content">, import("convex/values").VObject<{
        providerOptions?: Record<string, Record<string, any>> | undefined;
        role: "system";
        content: string;
    }, {
        role: import("convex/values").VLiteral<"system", "required">;
        content: import("convex/values").VString<string, "required">;
        providerOptions: import("convex/values").VRecord<Record<string, Record<string, any>> | undefined, import("convex/values").VString<string, "required">, import("convex/values").VRecord<Record<string, any>, import("convex/values").VString<string, "required">, import("convex/values").VAny<any, "required", string>, "required", string>, "optional", string>;
    }, "required", "providerOptions" | "role" | `providerOptions.${string}` | "content">], "required", "providerOptions" | "role" | `providerOptions.${string}` | "content">, "optional">;
    promptMessageId: import("convex/values").VString<string | undefined, "optional">;
    maxTokens: import("convex/values").VFloat64<number | undefined, "optional">;
    temperature: import("convex/values").VFloat64<number | undefined, "optional">;
    topP: import("convex/values").VFloat64<number | undefined, "optional">;
    topK: import("convex/values").VFloat64<number | undefined, "optional">;
    presencePenalty: import("convex/values").VFloat64<number | undefined, "optional">;
    frequencyPenalty: import("convex/values").VFloat64<number | undefined, "optional">;
    seed: import("convex/values").VFloat64<number | undefined, "optional">;
    maxRetries: import("convex/values").VFloat64<number | undefined, "optional">;
    headers: import("convex/values").VRecord<Record<string, string> | undefined, import("convex/values").VString<string, "required">, import("convex/values").VString<string, "required">, "optional", string>;
    userId: import("convex/values").VString<string | undefined, "optional">;
    threadId: import("convex/values").VString<string | undefined, "optional">;
    contextOptions: import("convex/values").VObject<{
        excludeToolMessages?: boolean | undefined;
        recentMessages?: number | undefined;
        searchOptions?: {
            textSearch?: boolean | undefined;
            vectorSearch?: boolean | undefined;
            vectorScoreThreshold?: number | undefined;
            messageRange?: {
                before: number;
                after: number;
            } | undefined;
            limit: number;
        } | undefined;
        searchOtherThreads?: boolean | undefined;
    } | undefined, {
        excludeToolMessages: import("convex/values").VBoolean<boolean | undefined, "optional">;
        recentMessages: import("convex/values").VFloat64<number | undefined, "optional">;
        searchOptions: import("convex/values").VObject<{
            textSearch?: boolean | undefined;
            vectorSearch?: boolean | undefined;
            vectorScoreThreshold?: number | undefined;
            messageRange?: {
                before: number;
                after: number;
            } | undefined;
            limit: number;
        } | undefined, {
            limit: import("convex/values").VFloat64<number, "required">;
            textSearch: import("convex/values").VBoolean<boolean | undefined, "optional">;
            vectorSearch: import("convex/values").VBoolean<boolean | undefined, "optional">;
            vectorScoreThreshold: import("convex/values").VFloat64<number | undefined, "optional">;
            messageRange: import("convex/values").VObject<{
                before: number;
                after: number;
            } | undefined, {
                before: import("convex/values").VFloat64<number, "required">;
                after: import("convex/values").VFloat64<number, "required">;
            }, "optional", "before" | "after">;
        }, "optional", "limit" | "textSearch" | "vectorSearch" | "vectorScoreThreshold" | "messageRange" | "messageRange.before" | "messageRange.after">;
        searchOtherThreads: import("convex/values").VBoolean<boolean | undefined, "optional">;
    }, "optional", "excludeToolMessages" | "recentMessages" | "searchOptions" | "searchOtherThreads" | "searchOptions.limit" | "searchOptions.textSearch" | "searchOptions.vectorSearch" | "searchOptions.vectorScoreThreshold" | "searchOptions.messageRange" | "searchOptions.messageRange.before" | "searchOptions.messageRange.after">;
    storageOptions: import("convex/values").VObject<{
        saveMessages?: "all" | "none" | "promptAndOutput" | undefined;
    } | undefined, {
        saveMessages: import("convex/values").VUnion<"all" | "none" | "promptAndOutput" | undefined, [import("convex/values").VLiteral<"all", "required">, import("convex/values").VLiteral<"none", "required">, import("convex/values").VLiteral<"promptAndOutput", "required">], "optional", never>;
    }, "optional", "saveMessages">;
    providerOptions: import("convex/values").VRecord<Record<string, Record<string, any>> | undefined, import("convex/values").VString<string, "required">, import("convex/values").VRecord<Record<string, any>, import("convex/values").VString<string, "required">, import("convex/values").VAny<any, "required", string>, "required", string>, "optional", string>;
}, "required", "userId" | "threadId" | "providerOptions" | `providerOptions.${string}` | "system" | "messages" | "headers" | `headers.${string}` | "maxTokens" | "temperature" | "topP" | "topK" | "presencePenalty" | "frequencyPenalty" | "seed" | "maxRetries" | "prompt" | "promptMessageId" | "contextOptions" | "storageOptions" | "contextOptions.excludeToolMessages" | "contextOptions.recentMessages" | "contextOptions.searchOptions" | "contextOptions.searchOtherThreads" | "contextOptions.searchOptions.limit" | "contextOptions.searchOptions.textSearch" | "contextOptions.searchOptions.vectorSearch" | "contextOptions.searchOptions.vectorScoreThreshold" | "contextOptions.searchOptions.messageRange" | "contextOptions.searchOptions.messageRange.before" | "contextOptions.searchOptions.messageRange.after" | "storageOptions.saveMessages">;
export type SafeObjectArgs = Infer<typeof vSafeObjectArgs>;
export declare const vEmbeddingsWithMetadata: import("convex/values").VObject<{
    model: string;
    dimension: 128 | 256 | 512 | 768 | 1024 | 1408 | 1536 | 2048 | 3072 | 4096;
    vectors: (number[] | null)[];
}, {
    vectors: import("convex/values").VArray<(number[] | null)[], import("convex/values").VUnion<number[] | null, [import("convex/values").VArray<number[], import("convex/values").VFloat64<number, "required">, "required">, import("convex/values").VNull<null, "required">], "required", never>, "required">;
    dimension: import("convex/values").VUnion<128 | 256 | 512 | 768 | 1024 | 1408 | 1536 | 2048 | 3072 | 4096, import("convex/values").VLiteral<128 | 256 | 512 | 768 | 1024 | 1408 | 1536 | 2048 | 3072 | 4096, "required">[], "required", never>;
    model: import("convex/values").VString<string, "required">;
}, "required", "model" | "dimension" | "vectors">;
export type EmbeddingsWithMetadata = Infer<typeof vEmbeddingsWithMetadata>;
export declare function vPaginationResult<T extends Validator<Value, "required", string>>(itemValidator: T): import("convex/values").VObject<{
    splitCursor?: string | null | undefined;
    pageStatus?: "SplitRecommended" | "SplitRequired" | null | undefined;
    page: T["type"][];
    continueCursor: string;
    isDone: boolean;
}, {
    page: import("convex/values").VArray<T["type"][], T, "required">;
    continueCursor: import("convex/values").VString<string, "required">;
    isDone: import("convex/values").VBoolean<boolean, "required">;
    splitCursor: import("convex/values").VUnion<string | null | undefined, [import("convex/values").VString<string, "required">, import("convex/values").VNull<null, "required">], "optional", never>;
    pageStatus: import("convex/values").VUnion<"SplitRecommended" | "SplitRequired" | null | undefined, [import("convex/values").VLiteral<"SplitRecommended", "required">, import("convex/values").VLiteral<"SplitRequired", "required">, import("convex/values").VNull<null, "required">], "optional", never>;
}, "required", "page" | "continueCursor" | "isDone" | "splitCursor" | "pageStatus">;
export declare const vTextStreamPart: import("convex/values").VUnion<{
    providerOptions?: Record<string, Record<string, any>> | undefined;
    type: "tool-call";
    toolCallId: string;
    toolName: string;
    args: any;
} | {
    providerOptions?: Record<string, Record<string, any>> | undefined;
    args?: any;
    experimental_content?: ({
        type: "text";
        text: string;
    } | {
        mimeType?: string | undefined;
        type: "image";
        data: string;
    })[] | undefined;
    isError?: boolean | undefined;
    type: "tool-result";
    toolCallId: string;
    toolName: string;
    result: any;
} | {
    type: "text-delta";
    textDelta: string;
} | {
    type: "reasoning";
    textDelta: string;
} | {
    type: "source";
    source: {
        title?: string | undefined;
        providerOptions?: Record<string, Record<string, any>> | undefined;
        id: string;
        sourceType: "url";
        url: string;
    };
} | {
    type: "tool-call-streaming-start";
    toolCallId: string;
    toolName: string;
} | {
    type: "tool-call-delta";
    toolCallId: string;
    toolName: string;
    argsTextDelta: string;
}, [import("convex/values").VObject<{
    type: "text-delta";
    textDelta: string;
}, {
    type: import("convex/values").VLiteral<"text-delta", "required">;
    textDelta: import("convex/values").VString<string, "required">;
}, "required", "type" | "textDelta">, import("convex/values").VObject<{
    type: "reasoning";
    textDelta: string;
}, {
    type: import("convex/values").VLiteral<"reasoning", "required">;
    textDelta: import("convex/values").VString<string, "required">;
}, "required", "type" | "textDelta">, import("convex/values").VObject<{
    type: "source";
    source: {
        title?: string | undefined;
        providerOptions?: Record<string, Record<string, any>> | undefined;
        id: string;
        sourceType: "url";
        url: string;
    };
}, {
    type: import("convex/values").VLiteral<"source", "required">;
    source: import("convex/values").VObject<{
        title?: string | undefined;
        providerOptions?: Record<string, Record<string, any>> | undefined;
        id: string;
        sourceType: "url";
        url: string;
    }, {
        sourceType: import("convex/values").VLiteral<"url", "required">;
        id: import("convex/values").VString<string, "required">;
        url: import("convex/values").VString<string, "required">;
        title: import("convex/values").VString<string | undefined, "optional">;
        providerOptions: import("convex/values").VRecord<Record<string, Record<string, any>> | undefined, import("convex/values").VString<string, "required">, import("convex/values").VRecord<Record<string, any>, import("convex/values").VString<string, "required">, import("convex/values").VAny<any, "required", string>, "required", string>, "optional", string>;
    }, "required", "id" | "title" | "providerOptions" | `providerOptions.${string}` | "sourceType" | "url">;
}, "required", "type" | "source" | "source.id" | "source.title" | "source.providerOptions" | `source.providerOptions.${string}` | "source.sourceType" | "source.url">, import("convex/values").VObject<{
    providerOptions?: Record<string, Record<string, any>> | undefined;
    type: "tool-call";
    toolCallId: string;
    toolName: string;
    args: any;
}, {
    type: import("convex/values").VLiteral<"tool-call", "required">;
    toolCallId: import("convex/values").VString<string, "required">;
    toolName: import("convex/values").VString<string, "required">;
    args: import("convex/values").VAny<any, "required", string>;
    providerOptions: import("convex/values").VRecord<Record<string, Record<string, any>> | undefined, import("convex/values").VString<string, "required">, import("convex/values").VRecord<Record<string, any>, import("convex/values").VString<string, "required">, import("convex/values").VAny<any, "required", string>, "required", string>, "optional", string>;
}, "required", "type" | "providerOptions" | `providerOptions.${string}` | "toolCallId" | "toolName" | "args" | `args.${string}`>, import("convex/values").VObject<{
    type: "tool-call-streaming-start";
    toolCallId: string;
    toolName: string;
}, {
    type: import("convex/values").VLiteral<"tool-call-streaming-start", "required">;
    toolCallId: import("convex/values").VString<string, "required">;
    toolName: import("convex/values").VString<string, "required">;
}, "required", "type" | "toolCallId" | "toolName">, import("convex/values").VObject<{
    type: "tool-call-delta";
    toolCallId: string;
    toolName: string;
    argsTextDelta: string;
}, {
    type: import("convex/values").VLiteral<"tool-call-delta", "required">;
    toolCallId: import("convex/values").VString<string, "required">;
    toolName: import("convex/values").VString<string, "required">;
    argsTextDelta: import("convex/values").VString<string, "required">;
}, "required", "type" | "toolCallId" | "toolName" | "argsTextDelta">, import("convex/values").VObject<{
    providerOptions?: Record<string, Record<string, any>> | undefined;
    args?: any;
    experimental_content?: ({
        type: "text";
        text: string;
    } | {
        mimeType?: string | undefined;
        type: "image";
        data: string;
    })[] | undefined;
    isError?: boolean | undefined;
    type: "tool-result";
    toolCallId: string;
    toolName: string;
    result: any;
}, {
    type: import("convex/values").VLiteral<"tool-result", "required">;
    toolCallId: import("convex/values").VString<string, "required">;
    toolName: import("convex/values").VString<string, "required">;
    result: import("convex/values").VAny<any, "required", string>;
    args: import("convex/values").VAny<any, "optional", string>;
    experimental_content: import("convex/values").VArray<({
        type: "text";
        text: string;
    } | {
        mimeType?: string | undefined;
        type: "image";
        data: string;
    })[] | undefined, import("convex/values").VUnion<{
        type: "text";
        text: string;
    } | {
        mimeType?: string | undefined;
        type: "image";
        data: string;
    }, [import("convex/values").VObject<{
        type: "text";
        text: string;
    }, {
        type: import("convex/values").VLiteral<"text", "required">;
        text: import("convex/values").VString<string, "required">;
    }, "required", "type" | "text">, import("convex/values").VObject<{
        mimeType?: string | undefined;
        type: "image";
        data: string;
    }, {
        type: import("convex/values").VLiteral<"image", "required">;
        data: import("convex/values").VString<string, "required">;
        mimeType: import("convex/values").VString<string | undefined, "optional">;
    }, "required", "type" | "mimeType" | "data">], "required", "type" | "text" | "mimeType" | "data">, "optional">;
    isError: import("convex/values").VBoolean<boolean | undefined, "optional">;
    providerOptions: import("convex/values").VRecord<Record<string, Record<string, any>> | undefined, import("convex/values").VString<string, "required">, import("convex/values").VRecord<Record<string, any>, import("convex/values").VString<string, "required">, import("convex/values").VAny<any, "required", string>, "required", string>, "optional", string>;
}, "required", "type" | "providerOptions" | `providerOptions.${string}` | "toolCallId" | "toolName" | "args" | `args.${string}` | "result" | "experimental_content" | "isError" | `result.${string}`>], "required", "type" | "providerOptions" | `providerOptions.${string}` | "toolCallId" | "toolName" | "args" | `args.${string}` | "result" | "experimental_content" | "isError" | `result.${string}` | "textDelta" | "source" | "source.id" | "source.title" | "source.providerOptions" | `source.providerOptions.${string}` | "source.sourceType" | "source.url" | "argsTextDelta">;
export type TextStreamPart = Infer<typeof vTextStreamPart>;
export declare const vStreamCursor: import("convex/values").VObject<{
    streamId: string;
    cursor: number;
}, {
    streamId: import("convex/values").VString<string, "required">;
    cursor: import("convex/values").VFloat64<number, "required">;
}, "required", "streamId" | "cursor">;
export type StreamCursor = Infer<typeof vStreamCursor>;
export declare const vStreamArgs: import("convex/values").VUnion<{
    startOrder?: number | undefined;
    kind: "list";
} | {
    kind: "deltas";
    cursors: {
        streamId: string;
        cursor: number;
    }[];
} | undefined, [import("convex/values").VObject<{
    startOrder?: number | undefined;
    kind: "list";
}, {
    kind: import("convex/values").VLiteral<"list", "required">;
    startOrder: import("convex/values").VFloat64<number | undefined, "optional">;
}, "required", "kind" | "startOrder">, import("convex/values").VObject<{
    kind: "deltas";
    cursors: {
        streamId: string;
        cursor: number;
    }[];
}, {
    kind: import("convex/values").VLiteral<"deltas", "required">;
    cursors: import("convex/values").VArray<{
        streamId: string;
        cursor: number;
    }[], import("convex/values").VObject<{
        streamId: string;
        cursor: number;
    }, {
        streamId: import("convex/values").VString<string, "required">;
        cursor: import("convex/values").VFloat64<number, "required">;
    }, "required", "streamId" | "cursor">, "required">;
}, "required", "kind" | "cursors">], "optional", "kind" | "startOrder" | "cursors">;
export type StreamArgs = Infer<typeof vStreamArgs>;
export declare const vStreamMessage: import("convex/values").VObject<{
    userId?: string | undefined;
    agentName?: string | undefined;
    model?: string | undefined;
    provider?: string | undefined;
    providerOptions?: Record<string, Record<string, any>> | undefined;
    status: "streaming" | "finished" | "aborted";
    order: number;
    stepOrder: number;
    streamId: string;
}, {
    streamId: import("convex/values").VString<string, "required">;
    status: import("convex/values").VUnion<"streaming" | "finished" | "aborted", [import("convex/values").VLiteral<"streaming", "required">, import("convex/values").VLiteral<"finished", "required">, import("convex/values").VLiteral<"aborted", "required">], "required", never>;
    order: import("convex/values").VFloat64<number, "required">;
    stepOrder: import("convex/values").VFloat64<number, "required">;
    userId: import("convex/values").VString<string | undefined, "optional">;
    agentName: import("convex/values").VString<string | undefined, "optional">;
    model: import("convex/values").VString<string | undefined, "optional">;
    provider: import("convex/values").VString<string | undefined, "optional">;
    providerOptions: import("convex/values").VRecord<Record<string, Record<string, any>> | undefined, import("convex/values").VString<string, "required">, import("convex/values").VRecord<Record<string, any>, import("convex/values").VString<string, "required">, import("convex/values").VAny<any, "required", string>, "required", string>, "optional", string>;
}, "required", "status" | "userId" | "order" | "stepOrder" | "agentName" | "model" | "provider" | "providerOptions" | `providerOptions.${string}` | "streamId">;
export type StreamMessage = Infer<typeof vStreamMessage>;
export declare const vStreamDelta: import("convex/values").VObject<{
    streamId: string;
    start: number;
    end: number;
    parts: ({
        providerOptions?: Record<string, Record<string, any>> | undefined;
        type: "tool-call";
        toolCallId: string;
        toolName: string;
        args: any;
    } | {
        providerOptions?: Record<string, Record<string, any>> | undefined;
        args?: any;
        experimental_content?: ({
            type: "text";
            text: string;
        } | {
            mimeType?: string | undefined;
            type: "image";
            data: string;
        })[] | undefined;
        isError?: boolean | undefined;
        type: "tool-result";
        toolCallId: string;
        toolName: string;
        result: any;
    } | {
        type: "text-delta";
        textDelta: string;
    } | {
        type: "reasoning";
        textDelta: string;
    } | {
        type: "source";
        source: {
            title?: string | undefined;
            providerOptions?: Record<string, Record<string, any>> | undefined;
            id: string;
            sourceType: "url";
            url: string;
        };
    } | {
        type: "tool-call-streaming-start";
        toolCallId: string;
        toolName: string;
    } | {
        type: "tool-call-delta";
        toolCallId: string;
        toolName: string;
        argsTextDelta: string;
    })[];
}, {
    streamId: import("convex/values").VString<string, "required">;
    start: import("convex/values").VFloat64<number, "required">;
    end: import("convex/values").VFloat64<number, "required">;
    parts: import("convex/values").VArray<({
        providerOptions?: Record<string, Record<string, any>> | undefined;
        type: "tool-call";
        toolCallId: string;
        toolName: string;
        args: any;
    } | {
        providerOptions?: Record<string, Record<string, any>> | undefined;
        args?: any;
        experimental_content?: ({
            type: "text";
            text: string;
        } | {
            mimeType?: string | undefined;
            type: "image";
            data: string;
        })[] | undefined;
        isError?: boolean | undefined;
        type: "tool-result";
        toolCallId: string;
        toolName: string;
        result: any;
    } | {
        type: "text-delta";
        textDelta: string;
    } | {
        type: "reasoning";
        textDelta: string;
    } | {
        type: "source";
        source: {
            title?: string | undefined;
            providerOptions?: Record<string, Record<string, any>> | undefined;
            id: string;
            sourceType: "url";
            url: string;
        };
    } | {
        type: "tool-call-streaming-start";
        toolCallId: string;
        toolName: string;
    } | {
        type: "tool-call-delta";
        toolCallId: string;
        toolName: string;
        argsTextDelta: string;
    })[], import("convex/values").VUnion<{
        providerOptions?: Record<string, Record<string, any>> | undefined;
        type: "tool-call";
        toolCallId: string;
        toolName: string;
        args: any;
    } | {
        providerOptions?: Record<string, Record<string, any>> | undefined;
        args?: any;
        experimental_content?: ({
            type: "text";
            text: string;
        } | {
            mimeType?: string | undefined;
            type: "image";
            data: string;
        })[] | undefined;
        isError?: boolean | undefined;
        type: "tool-result";
        toolCallId: string;
        toolName: string;
        result: any;
    } | {
        type: "text-delta";
        textDelta: string;
    } | {
        type: "reasoning";
        textDelta: string;
    } | {
        type: "source";
        source: {
            title?: string | undefined;
            providerOptions?: Record<string, Record<string, any>> | undefined;
            id: string;
            sourceType: "url";
            url: string;
        };
    } | {
        type: "tool-call-streaming-start";
        toolCallId: string;
        toolName: string;
    } | {
        type: "tool-call-delta";
        toolCallId: string;
        toolName: string;
        argsTextDelta: string;
    }, [import("convex/values").VObject<{
        type: "text-delta";
        textDelta: string;
    }, {
        type: import("convex/values").VLiteral<"text-delta", "required">;
        textDelta: import("convex/values").VString<string, "required">;
    }, "required", "type" | "textDelta">, import("convex/values").VObject<{
        type: "reasoning";
        textDelta: string;
    }, {
        type: import("convex/values").VLiteral<"reasoning", "required">;
        textDelta: import("convex/values").VString<string, "required">;
    }, "required", "type" | "textDelta">, import("convex/values").VObject<{
        type: "source";
        source: {
            title?: string | undefined;
            providerOptions?: Record<string, Record<string, any>> | undefined;
            id: string;
            sourceType: "url";
            url: string;
        };
    }, {
        type: import("convex/values").VLiteral<"source", "required">;
        source: import("convex/values").VObject<{
            title?: string | undefined;
            providerOptions?: Record<string, Record<string, any>> | undefined;
            id: string;
            sourceType: "url";
            url: string;
        }, {
            sourceType: import("convex/values").VLiteral<"url", "required">;
            id: import("convex/values").VString<string, "required">;
            url: import("convex/values").VString<string, "required">;
            title: import("convex/values").VString<string | undefined, "optional">;
            providerOptions: import("convex/values").VRecord<Record<string, Record<string, any>> | undefined, import("convex/values").VString<string, "required">, import("convex/values").VRecord<Record<string, any>, import("convex/values").VString<string, "required">, import("convex/values").VAny<any, "required", string>, "required", string>, "optional", string>;
        }, "required", "id" | "title" | "providerOptions" | `providerOptions.${string}` | "sourceType" | "url">;
    }, "required", "type" | "source" | "source.id" | "source.title" | "source.providerOptions" | `source.providerOptions.${string}` | "source.sourceType" | "source.url">, import("convex/values").VObject<{
        providerOptions?: Record<string, Record<string, any>> | undefined;
        type: "tool-call";
        toolCallId: string;
        toolName: string;
        args: any;
    }, {
        type: import("convex/values").VLiteral<"tool-call", "required">;
        toolCallId: import("convex/values").VString<string, "required">;
        toolName: import("convex/values").VString<string, "required">;
        args: import("convex/values").VAny<any, "required", string>;
        providerOptions: import("convex/values").VRecord<Record<string, Record<string, any>> | undefined, import("convex/values").VString<string, "required">, import("convex/values").VRecord<Record<string, any>, import("convex/values").VString<string, "required">, import("convex/values").VAny<any, "required", string>, "required", string>, "optional", string>;
    }, "required", "type" | "providerOptions" | `providerOptions.${string}` | "toolCallId" | "toolName" | "args" | `args.${string}`>, import("convex/values").VObject<{
        type: "tool-call-streaming-start";
        toolCallId: string;
        toolName: string;
    }, {
        type: import("convex/values").VLiteral<"tool-call-streaming-start", "required">;
        toolCallId: import("convex/values").VString<string, "required">;
        toolName: import("convex/values").VString<string, "required">;
    }, "required", "type" | "toolCallId" | "toolName">, import("convex/values").VObject<{
        type: "tool-call-delta";
        toolCallId: string;
        toolName: string;
        argsTextDelta: string;
    }, {
        type: import("convex/values").VLiteral<"tool-call-delta", "required">;
        toolCallId: import("convex/values").VString<string, "required">;
        toolName: import("convex/values").VString<string, "required">;
        argsTextDelta: import("convex/values").VString<string, "required">;
    }, "required", "type" | "toolCallId" | "toolName" | "argsTextDelta">, import("convex/values").VObject<{
        providerOptions?: Record<string, Record<string, any>> | undefined;
        args?: any;
        experimental_content?: ({
            type: "text";
            text: string;
        } | {
            mimeType?: string | undefined;
            type: "image";
            data: string;
        })[] | undefined;
        isError?: boolean | undefined;
        type: "tool-result";
        toolCallId: string;
        toolName: string;
        result: any;
    }, {
        type: import("convex/values").VLiteral<"tool-result", "required">;
        toolCallId: import("convex/values").VString<string, "required">;
        toolName: import("convex/values").VString<string, "required">;
        result: import("convex/values").VAny<any, "required", string>;
        args: import("convex/values").VAny<any, "optional", string>;
        experimental_content: import("convex/values").VArray<({
            type: "text";
            text: string;
        } | {
            mimeType?: string | undefined;
            type: "image";
            data: string;
        })[] | undefined, import("convex/values").VUnion<{
            type: "text";
            text: string;
        } | {
            mimeType?: string | undefined;
            type: "image";
            data: string;
        }, [import("convex/values").VObject<{
            type: "text";
            text: string;
        }, {
            type: import("convex/values").VLiteral<"text", "required">;
            text: import("convex/values").VString<string, "required">;
        }, "required", "type" | "text">, import("convex/values").VObject<{
            mimeType?: string | undefined;
            type: "image";
            data: string;
        }, {
            type: import("convex/values").VLiteral<"image", "required">;
            data: import("convex/values").VString<string, "required">;
            mimeType: import("convex/values").VString<string | undefined, "optional">;
        }, "required", "type" | "mimeType" | "data">], "required", "type" | "text" | "mimeType" | "data">, "optional">;
        isError: import("convex/values").VBoolean<boolean | undefined, "optional">;
        providerOptions: import("convex/values").VRecord<Record<string, Record<string, any>> | undefined, import("convex/values").VString<string, "required">, import("convex/values").VRecord<Record<string, any>, import("convex/values").VString<string, "required">, import("convex/values").VAny<any, "required", string>, "required", string>, "optional", string>;
    }, "required", "type" | "providerOptions" | `providerOptions.${string}` | "toolCallId" | "toolName" | "args" | `args.${string}` | "result" | "experimental_content" | "isError" | `result.${string}`>], "required", "type" | "providerOptions" | `providerOptions.${string}` | "toolCallId" | "toolName" | "args" | `args.${string}` | "result" | "experimental_content" | "isError" | `result.${string}` | "textDelta" | "source" | "source.id" | "source.title" | "source.providerOptions" | `source.providerOptions.${string}` | "source.sourceType" | "source.url" | "argsTextDelta">, "required">;
}, "required", "streamId" | "start" | "end" | "parts">;
export type StreamDelta = Infer<typeof vStreamDelta>;
export {};
//# sourceMappingURL=validators.d.ts.map