export declare const listUsersWithThreads: import("convex/server").RegisteredQuery<"public", {
    paginationOpts: {
        id?: number | undefined;
        endCursor?: string | null | undefined;
        maximumRowsRead?: number | undefined;
        maximumBytesRead?: number | undefined;
        numItems: number;
        cursor: string | null;
    };
}, Promise<{
    page: string[];
    isDone: boolean;
    continueCursor: import("convex/server").Cursor;
    splitCursor?: import("convex/server").Cursor | null;
    pageStatus?: "SplitRecommended" | "SplitRequired" | null;
}>>;
export declare const deleteAllForUserId: import("convex/server").RegisteredAction<"public", {
    userId: string;
}, Promise<void>>;
export declare const deleteAllForUserIdAsync: import("convex/server").RegisteredMutation<"public", {
    userId: string;
}, Promise<boolean>>;
export declare const _deleteAllForUserIdAsync: import("convex/server").RegisteredMutation<"internal", {
    deltaCursor?: string | undefined;
    streamOrder?: number | undefined;
    streamsInProgress?: boolean | undefined;
    userId: string;
    messagesCursor: string | null;
    threadsCursor: string | null;
    threadInProgress: import("convex/values").GenericId<"threads"> | null;
}, Promise<boolean>>;
export declare const _deletePageForUserId: import("convex/server").RegisteredMutation<"internal", {
    deltaCursor?: string | undefined;
    streamOrder?: number | undefined;
    streamsInProgress?: boolean | undefined;
    userId: string;
    messagesCursor: string | null;
    threadsCursor: string | null;
    threadInProgress: import("convex/values").GenericId<"threads"> | null;
}, Promise<{
    deltaCursor?: string | undefined;
    streamOrder?: number | undefined;
    streamsInProgress?: boolean | undefined;
    isDone: boolean;
    messagesCursor: string | null;
    threadsCursor: string;
    threadInProgress: import("convex/values").GenericId<"threads"> | null;
}>>;
export declare const getThreadUserId: import("convex/server").RegisteredQuery<"internal", {
    threadId: import("convex/values").GenericId<"threads">;
}, Promise<string | null>>;
//# sourceMappingURL=users.d.ts.map