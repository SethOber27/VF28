import type { Id } from "./_generated/dataModel.js";
import { type MutationCtx } from "./_generated/server.js";
export declare const addDelta: import("convex/server").RegisteredMutation<"public", {
    streamId: import("convex/values").GenericId<"streamingMessages">;
    start: number;
    end: number;
    parts: ({
        providerOptions?: Record<string, Record<string, any>> | undefined;
        type: "tool-call";
        toolCallId: string;
        toolName: string;
        args: any;
    } | {
        providerOptions?: Record<string, Record<string, any>> | undefined;
        args?: any;
        experimental_content?: ({
            type: "text";
            text: string;
        } | {
            mimeType?: string | undefined;
            type: "image";
            data: string;
        })[] | undefined;
        isError?: boolean | undefined;
        type: "tool-result";
        toolCallId: string;
        toolName: string;
        result: any;
    } | {
        type: "text-delta";
        textDelta: string;
    } | {
        type: "reasoning";
        textDelta: string;
    } | {
        type: "source";
        source: {
            title?: string | undefined;
            providerOptions?: Record<string, Record<string, any>> | undefined;
            id: string;
            sourceType: "url";
            url: string;
        };
    } | {
        type: "tool-call-streaming-start";
        toolCallId: string;
        toolName: string;
    } | {
        type: "tool-call-delta";
        toolCallId: string;
        toolName: string;
        argsTextDelta: string;
    })[];
}, Promise<boolean>>;
export declare const listDeltas: import("convex/server").RegisteredQuery<"public", {
    threadId: import("convex/values").GenericId<"threads">;
    cursors: {
        streamId: import("convex/values").GenericId<"streamingMessages">;
        cursor: number;
    }[];
}, Promise<{
    streamId: string;
    start: number;
    end: number;
    parts: ({
        providerOptions?: Record<string, Record<string, any>> | undefined;
        type: "tool-call";
        toolCallId: string;
        toolName: string;
        args: any;
    } | {
        providerOptions?: Record<string, Record<string, any>> | undefined;
        args?: any;
        experimental_content?: ({
            type: "text";
            text: string;
        } | {
            mimeType?: string | undefined;
            type: "image";
            data: string;
        })[] | undefined;
        isError?: boolean | undefined;
        type: "tool-result";
        toolCallId: string;
        toolName: string;
        result: any;
    } | {
        type: "text-delta";
        textDelta: string;
    } | {
        type: "reasoning";
        textDelta: string;
    } | {
        type: "source";
        source: {
            title?: string | undefined;
            providerOptions?: Record<string, Record<string, any>> | undefined;
            id: string;
            sourceType: "url";
            url: string;
        };
    } | {
        type: "tool-call-streaming-start";
        toolCallId: string;
        toolName: string;
    } | {
        type: "tool-call-delta";
        toolCallId: string;
        toolName: string;
        argsTextDelta: string;
    })[];
}[]>>;
export declare const create: import("convex/server").RegisteredMutation<"public", {
    userId?: string | undefined;
    agentName?: string | undefined;
    model?: string | undefined;
    provider?: string | undefined;
    providerOptions?: Record<string, Record<string, any>> | undefined;
    order: number;
    threadId: import("convex/values").GenericId<"threads">;
    stepOrder: number;
}, Promise<import("convex/values").GenericId<"streamingMessages">>>;
export declare const list: import("convex/server").RegisteredQuery<"public", {
    startOrder?: number | undefined;
    statuses?: ("streaming" | "finished" | "aborted")[] | undefined;
    threadId: import("convex/values").GenericId<"threads">;
}, Promise<{
    userId: string | undefined;
    order: number;
    stepOrder: number;
    agentName: string | undefined;
    model: string | undefined;
    provider: string | undefined;
    providerOptions: Record<string, Record<string, any>> | undefined;
    streamId: import("convex/values").GenericId<"streamingMessages">;
    status: "streaming" | "finished" | "aborted";
}[]>>;
export declare const abortByOrder: import("convex/server").RegisteredMutation<"public", {
    order: number;
    threadId: import("convex/values").GenericId<"threads">;
    reason: string;
}, Promise<boolean>>;
export declare const abort: import("convex/server").RegisteredMutation<"public", {
    streamId: Id<"streamingMessages">;
    reason: string;
}, Promise<boolean>>;
export declare const finish: import("convex/server").RegisteredMutation<"public", {
    finalDelta?: {
        streamId: import("convex/values").GenericId<"streamingMessages">;
        start: number;
        end: number;
        parts: ({
            providerOptions?: Record<string, Record<string, any>> | undefined;
            type: "tool-call";
            toolCallId: string;
            toolName: string;
            args: any;
        } | {
            providerOptions?: Record<string, Record<string, any>> | undefined;
            args?: any;
            experimental_content?: ({
                type: "text";
                text: string;
            } | {
                mimeType?: string | undefined;
                type: "image";
                data: string;
            })[] | undefined;
            isError?: boolean | undefined;
            type: "tool-result";
            toolCallId: string;
            toolName: string;
            result: any;
        } | {
            type: "text-delta";
            textDelta: string;
        } | {
            type: "reasoning";
            textDelta: string;
        } | {
            type: "source";
            source: {
                title?: string | undefined;
                providerOptions?: Record<string, Record<string, any>> | undefined;
                id: string;
                sourceType: "url";
                url: string;
            };
        } | {
            type: "tool-call-streaming-start";
            toolCallId: string;
            toolName: string;
        } | {
            type: "tool-call-delta";
            toolCallId: string;
            toolName: string;
            argsTextDelta: string;
        })[];
    } | undefined;
    streamId: import("convex/values").GenericId<"streamingMessages">;
}, Promise<void>>;
export declare const timeoutStream: import("convex/server").RegisteredMutation<"internal", {
    streamId: import("convex/values").GenericId<"streamingMessages">;
}, Promise<void>>;
export declare function deleteStreamsPageForThreadId(ctx: MutationCtx, args: {
    threadId: Id<"threads">;
    streamOrder?: number;
    deltaCursor?: string;
}): Promise<{
    isDone: boolean;
    streamOrder: undefined;
    deltaCursor: undefined;
} | {
    isDone: boolean;
    streamOrder: number;
    deltaCursor: string | undefined;
}>;
export declare const deleteStreamsPageForThreadIdMutation: import("convex/server").RegisteredMutation<"internal", {
    threadId: Id<"threads">;
    streamOrder?: number;
    deltaCursor?: string;
}, Promise<{
    isDone: boolean;
    streamOrder: undefined;
    deltaCursor: undefined;
} | {
    isDone: boolean;
    streamOrder: number;
    deltaCursor: string | undefined;
}>>;
export declare const deleteAllStreamsForThreadIdAsync: import("convex/server").RegisteredMutation<"public", {
    deltaCursor?: string | undefined;
    streamOrder?: number | undefined;
    threadId: import("convex/values").GenericId<"threads">;
}, Promise<{
    isDone: boolean;
    streamOrder: undefined;
    deltaCursor: undefined;
} | {
    isDone: boolean;
    streamOrder: number;
    deltaCursor: string | undefined;
}>>;
export declare const deleteStreamSync: import("convex/server").RegisteredMutation<"public", {
    streamId: import("convex/values").GenericId<"streamingMessages">;
}, Promise<void>>;
export declare const deleteStreamAsync: import("convex/server").RegisteredMutation<"public", {
    cursor?: string | undefined;
    streamId: import("convex/values").GenericId<"streamingMessages">;
}, Promise<void>>;
export declare const deleteAllStreamsForThreadIdSync: import("convex/server").RegisteredAction<"public", {
    threadId: import("convex/values").GenericId<"threads">;
}, Promise<void>>;
//# sourceMappingURL=streams.d.ts.map