import { embedMany, generateObject, generateText, streamObject, streamText, } from "ai";
import { assert } from "convex-helpers";
import { internalActionGeneric, internalMutationGeneric, } from "convex/server";
import { v } from "convex/values";
import { validateVectorDimension, } from "../component/vector/tables.js";
import { deserializeMessage, promptOrMessagesToCoreMessages, serializeMessage, serializeNewMessagesInStep, serializeObjectResult, } from "../mapping.js";
import { extractText, isTool } from "../shared.js";
import { vMessageWithMetadata, vSafeObjectArgs, vTextArgs, } from "../validators.js";
import { createTool, wrapTools } from "./createTool.js";
import { listMessages } from "./listMessages.js";
import { fetchContextMessages } from "./search.js";
import { DeltaStreamer, mergeTransforms, syncStreams, } from "./streaming.js";
export { vMessageDoc, vThreadDoc } from "../component/schema.js";
export { serializeDataOrUrl } from "../mapping.js";
// NOTE: these are also exported via @convex-dev/agent/validators
// a future version may put them all here or move these over there
export { vAssistantMessage, vContextOptions, vMessage, vPaginationResult, vProviderMetadata, vStorageOptions, vStreamArgs, vSystemMessage, vToolMessage, vUsage, vUserMessage, } from "../validators.js";
export { getFile, storeFile } from "./files.js";
export { filterOutOrphanedToolMessages } from "./search.js";
export { abortStream, listStreams } from "./streaming.js";
export { createTool, extractText, fetchContextMessages, isTool, listMessages, syncStreams, };
export { definePlaygroundAPI, } from "./definePlaygroundAPI.js";
export class Agent {
    component;
    options;
    constructor(component, options) {
        this.component = component;
        this.options = options;
    }
    async createThread(ctx, args) {
        const threadId = await createThread(ctx, this.component, args);
        if (!("runAction" in ctx) || "workflowId" in ctx) {
            return { threadId };
        }
        const { thread } = await this.continueThread(ctx, {
            threadId,
            userId: args?.userId,
            usageHandler: args?.usageHandler,
            tools: args?.tools,
        });
        return {
            threadId,
            thread,
        };
    }
    /**
     * Continues a thread using this agent. Note: threads can be continued
     * by different agents. This is a convenience around calling the various
     * generate and stream functions with explicit userId and threadId parameters.
     * @param ctx The ctx object passed to the action handler
     * @param { threadId, userId }: the thread and user to associate the messages with.
     * @returns Functions bound to the userId and threadId on a `{thread}` object.
     */
    async continueThread(ctx, args) {
        return {
            thread: {
                threadId: args.threadId,
                getMetadata: this.getThreadMetadata.bind(this, ctx, {
                    threadId: args.threadId,
                }),
                updateMetadata: (patch) => ctx.runMutation(this.component.threads.updateThread, {
                    threadId: args.threadId,
                    patch,
                }),
                generateText: this.generateText.bind(this, ctx, args),
                streamText: this.streamText.bind(this, ctx, args),
                generateObject: this.generateObject.bind(this, ctx, args),
                streamObject: this.streamObject.bind(this, ctx, args),
            },
        };
    }
    /**
     * Search for threads by title, paginated.
     * @param ctx The context passed from the query/mutation/action.
     * @returns The threads matching the search, paginated.
     */
    async searchThreadTitles(ctx, { userId, query, limit, }) {
        return ctx.runQuery(this.component.threads.searchThreadTitles, {
            userId,
            query,
            limit: limit ?? 10,
        });
    }
    /**
     * This behaves like {@link generateText} from the "ai" package except that
     * it add context based on the userId and threadId and saves the input and
     * resulting messages to the thread, if specified.
     * Use {@link continueThread} to get a version of this function already scoped
     * to a thread (and optionally userId).
     * @param ctx The context passed from the action function calling this.
     * @param { userId, threadId }: The user and thread to associate the message with
     * @param args The arguments to the generateText function, along with extra controls
     * for the {@link ContextOptions} and {@link StorageOptions}.
     * @returns The result of the generateText function.
     */
    async generateText(ctx, { userId: argsUserId, threadId, usageHandler, tools: threadTools, }, args, options) {
        const context = await this._saveMessagesAndFetchContext(ctx, args, {
            userId: argsUserId ?? undefined,
            threadId,
            ...options,
        });
        const { args: aiArgs, messageId, order, userId } = context;
        const toolCtx = {
            ...ctx,
            userId,
            threadId,
            messageId,
            agent: this,
        };
        const tools = wrapTools(toolCtx, args.tools ?? threadTools ?? this.options.tools);
        const saveOutputMessages = this._shouldSaveOutputMessages(options?.storageOptions);
        const trackUsage = usageHandler ?? this.options.usageHandler;
        try {
            const result = (await generateText({
                // Can be overridden
                maxSteps: this.options.maxSteps,
                ...aiArgs,
                tools,
                onStepFinish: async (step) => {
                    if (threadId && messageId && saveOutputMessages) {
                        await this.saveStep(ctx, {
                            userId,
                            threadId,
                            promptMessageId: messageId,
                            model: aiArgs.model.modelId,
                            provider: aiArgs.model.provider,
                            step,
                        });
                    }
                    if (this.options.rawRequestResponseHandler) {
                        await this.options.rawRequestResponseHandler(ctx, {
                            userId,
                            threadId,
                            agentName: this.options.name,
                            request: step.request,
                            response: step.response,
                        });
                    }
                    if (trackUsage && step.usage) {
                        await trackUsage(ctx, {
                            userId,
                            threadId,
                            agentName: this.options.name,
                            model: aiArgs.model.modelId,
                            provider: aiArgs.model.provider,
                            usage: step.usage,
                            providerMetadata: step.providerMetadata,
                        });
                    }
                    return args.onStepFinish?.(step);
                },
            }));
            result.messageId = messageId;
            result.order = order;
            return result;
        }
        catch (error) {
            if (threadId && messageId) {
                console.error("RollbackMessage", messageId);
                await ctx.runMutation(this.component.messages.rollbackMessage, {
                    messageId,
                    error: error.message,
                });
            }
            throw error;
        }
    }
    /**
     * This behaves like {@link streamText} from the "ai" package except that
     * it add context based on the userId and threadId and saves the input and
     * resulting messages to the thread, if specified.
     * Use {@link continueThread} to get a version of this function already scoped
     * to a thread (and optionally userId).
     */
    async streamText(ctx, { userId: argsUserId, threadId, usageHandler, 
    /** Note: to get better type inference, pass tools in the next arg */
    tools: threadTools, }, 
    /**
     * The arguments to the streamText function, similar to the ai `streamText` function.
     */
    args, 
    /**
     * The {@link ContextOptions} and {@link StorageOptions}
     * options to use for fetching contextual messages and saving input/output messages.
     */
    options) {
        const context = await this._saveMessagesAndFetchContext(ctx, args, {
            userId: argsUserId ?? undefined,
            threadId,
            ...options,
        });
        const { args: aiArgs, messageId, order, stepOrder, userId } = context;
        const toolCtx = {
            ...ctx,
            userId,
            threadId,
            messageId,
            agent: this,
        };
        const tools = wrapTools(toolCtx, args.tools ?? threadTools ?? this.options.tools);
        const saveOutputMessages = this._shouldSaveOutputMessages(options?.storageOptions);
        const trackUsage = usageHandler ?? this.options.usageHandler;
        const streamer = threadId && options?.saveStreamDeltas
            ? new DeltaStreamer(this.component, ctx, options.saveStreamDeltas, {
                threadId,
                userId,
                agentName: this.options.name,
                model: aiArgs.model.modelId,
                provider: aiArgs.model.provider,
                providerOptions: aiArgs.providerOptions,
                order,
                stepOrder,
                abortSignal: aiArgs.abortSignal,
            })
            : undefined;
        const result = streamText({
            // Can be overridden
            maxSteps: this.options.maxSteps,
            ...aiArgs,
            tools,
            abortSignal: streamer?.abortController.signal ?? aiArgs.abortSignal,
            experimental_transform: mergeTransforms(options?.saveStreamDeltas, args.experimental_transform),
            onChunk: async (event) => {
                await streamer?.addParts([event.chunk]);
                // console.log("onChunk", chunk);
                return args.onChunk?.(event);
            },
            onError: async (error) => {
                console.error("onError", error);
                if (threadId && messageId && saveOutputMessages) {
                    await ctx.runMutation(this.component.messages.rollbackMessage, {
                        messageId,
                        error: error.error.message,
                    });
                }
                // TODO: update the streamer to error state
                return args.onError?.(error);
            },
            onStepFinish: async (step) => {
                // console.log("onStepFinish", step);
                if (threadId && messageId && saveOutputMessages) {
                    const saved = await this.saveStep(ctx, {
                        userId,
                        threadId,
                        model: aiArgs.model.modelId,
                        provider: aiArgs.model.provider,
                        promptMessageId: messageId,
                        step,
                    });
                    await streamer?.finish(saved.messages);
                }
                if (this.options.rawRequestResponseHandler) {
                    await this.options.rawRequestResponseHandler(ctx, {
                        userId,
                        threadId,
                        agentName: this.options.name,
                        request: step.request,
                        response: step.response,
                    });
                }
                if (trackUsage && step.usage) {
                    await trackUsage(ctx, {
                        userId,
                        threadId,
                        agentName: this.options.name,
                        model: aiArgs.model.modelId,
                        provider: aiArgs.model.provider,
                        usage: step.usage,
                        providerMetadata: step.providerMetadata,
                    });
                }
                return args.onStepFinish?.(step);
            },
        });
        result.messageId = messageId;
        result.order = order;
        return result;
    }
    /**
     * This behaves like {@link generateObject} from the "ai" package except that
     * it add context based on the userId and threadId and saves the input and
     * resulting messages to the thread, if specified.
     * Use {@link continueThread} to get a version of this function already scoped
     * to a thread (and optionally userId).
     */
    async generateObject(ctx, { userId: argsUserId, threadId, usageHandler, }, 
    /**
     * The arguments to the generateObject function, similar to the ai.generateObject function.
     */
    args, 
    /**
     * The {@link ContextOptions} and {@link StorageOptions}
     * options to use for fetching contextual messages and saving input/output messages.
     */
    options) {
        const context = await this._saveMessagesAndFetchContext(ctx, args, {
            userId: argsUserId ?? undefined,
            threadId,
            ...options,
        });
        const { args: aiArgs, messageId, order, userId } = context;
        const trackUsage = usageHandler ?? this.options.usageHandler;
        const saveOutputMessages = this._shouldSaveOutputMessages(options?.storageOptions);
        try {
            const result = (await generateObject(
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            aiArgs));
            if (threadId && messageId && saveOutputMessages) {
                await this.saveObject(ctx, {
                    threadId,
                    promptMessageId: messageId,
                    result,
                    userId,
                    model: aiArgs.model.modelId,
                    provider: aiArgs.model.provider,
                });
            }
            result.messageId = messageId;
            result.order = order;
            if (this.options.rawRequestResponseHandler) {
                await this.options.rawRequestResponseHandler(ctx, {
                    userId,
                    threadId,
                    agentName: this.options.name,
                    request: result.request,
                    response: result.response,
                });
            }
            if (trackUsage && result.usage) {
                await trackUsage(ctx, {
                    userId,
                    threadId,
                    agentName: this.options.name,
                    model: aiArgs.model.modelId,
                    provider: aiArgs.model.provider,
                    usage: result.usage,
                    providerMetadata: result.providerMetadata,
                });
            }
            return result;
        }
        catch (error) {
            if (threadId && messageId) {
                await ctx.runMutation(this.component.messages.rollbackMessage, {
                    messageId,
                    error: error.message,
                });
            }
            throw error;
        }
    }
    /**
     * This behaves like `streamObject` from the "ai" package except that
     * it add context based on the userId and threadId and saves the input and
     * resulting messages to the thread, if specified.
     * Use {@link continueThread} to get a version of this function already scoped
     * to a thread (and optionally userId).
     */
    async streamObject(ctx, { userId: argsUserId, threadId, usageHandler, }, 
    /**
     * The arguments to the streamObject function, similar to the ai `streamObject` function.
     */
    args, 
    /**
     * The {@link ContextOptions} and {@link StorageOptions}
     * options to use for fetching contextual messages and saving input/output messages.
     */
    options) {
        // TODO: unify all this shared code between all the generate* and stream* functions
        const context = await this._saveMessagesAndFetchContext(ctx, args, {
            userId: argsUserId ?? undefined,
            threadId,
            ...options,
        });
        const { args: aiArgs, messageId, order, userId } = context;
        const trackUsage = usageHandler ?? this.options.usageHandler;
        const saveOutputMessages = this._shouldSaveOutputMessages(options?.storageOptions);
        const stream = streamObject({
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            ...aiArgs,
            onError: async (error) => {
                console.error("onError", error);
                return args.onError?.(error);
            },
            onFinish: async (result) => {
                if (threadId && messageId && saveOutputMessages) {
                    await this.saveObject(ctx, {
                        userId,
                        threadId,
                        promptMessageId: messageId,
                        result: {
                            object: result.object,
                            finishReason: "stop",
                            usage: result.usage,
                            warnings: result.warnings,
                            request: await stream.request,
                            response: result.response,
                            providerMetadata: result.providerMetadata,
                            experimental_providerMetadata: result.experimental_providerMetadata,
                            logprobs: undefined,
                            toJsonResponse: stream.toTextStreamResponse,
                        },
                        model: aiArgs.model.modelId,
                        provider: aiArgs.model.provider,
                    });
                }
                if (trackUsage && result.usage) {
                    await trackUsage(ctx, {
                        userId,
                        threadId,
                        agentName: this.options.name,
                        model: aiArgs.model.modelId,
                        provider: aiArgs.model.provider,
                        usage: result.usage,
                        providerMetadata: result.providerMetadata,
                    });
                }
                if (this.options.rawRequestResponseHandler) {
                    await this.options.rawRequestResponseHandler(ctx, {
                        userId,
                        threadId,
                        agentName: this.options.name,
                        request: await stream.request,
                        response: result.response,
                    });
                }
                // eslint-disable-next-line @typescript-eslint/no-explicit-any
                return args.onFinish?.(result);
            },
        });
        stream.messageId = messageId;
        stream.order = order;
        return stream;
    }
    /**
     * Save a message to the thread.
     * @param ctx A ctx object from a mutation or action.
     * @param args The message and what to associate it with (user / thread)
     * You can pass extra metadata alongside the message, e.g. associated fileIds.
     * @returns The messageId of the saved message.
     */
    async saveMessage(ctx, args) {
        const { lastMessageId, messages } = await this.saveMessages(ctx, {
            threadId: args.threadId,
            userId: args.userId,
            embeddings: args.embedding
                ? {
                    model: args.embedding.model,
                    vectors: [args.embedding.vector],
                }
                : undefined,
            messages: args.prompt !== undefined
                ? [{ role: "user", content: args.prompt }]
                : [args.message],
            metadata: args.metadata ? [args.metadata] : undefined,
            skipEmbeddings: args.skipEmbeddings,
        });
        return { messageId: lastMessageId, message: messages.at(-1) };
    }
    /**
     * Explicitly save messages associated with the thread (& user if provided)
     * If you have an embedding model set, it will also generate embeddings for
     * the messages.
     * @param ctx The ctx parameter to a mutation or action.
     * @param args The messages and context to save
     * @returns
     */
    async saveMessages(ctx, args) {
        let embeddings;
        const { skipEmbeddings, ...rest } = args;
        if (args.embeddings) {
            embeddings = args.embeddings;
        }
        else if (!skipEmbeddings && this.options.textEmbedding) {
            if (!("runAction" in ctx)) {
                console.warn("You're trying to save messages and generate embeddings, but you're in a mutation. " +
                    "Pass `skipEmbeddings: true` to skip generating embeddings in the mutation and skip this warning. " +
                    "They will be generated lazily when you generate or stream text / objects. " +
                    "You can explicitly generate them asynchronously by using the scheduler to run an action later that calls `agent.generateAndSaveEmbeddings`.");
            }
            else if ("workflowId" in ctx) {
                console.warn("You're trying to save messages and generate embeddings, but you're in a workflow. " +
                    "Pass `skipEmbeddings: true` to skip generating embeddings in the workflow and skip this warning. " +
                    "They will be generated lazily when you generate or stream text / objects. " +
                    "You can explicitly generate them asynchronously by using the scheduler to run an action later that calls `agent.generateAndSaveEmbeddings`.");
            }
            else {
                embeddings = await this.generateEmbeddings(ctx, {
                    userId: args.userId ?? undefined,
                    threadId: args.threadId,
                }, args.messages);
            }
        }
        return saveMessages(ctx, this.component, {
            ...rest,
            agentName: this.options.name,
            embeddings,
        });
    }
    /**
     * List messages from a thread.
     * @param ctx A ctx object from a query, mutation, or action.
     * @param args.threadId The thread to list messages from.
     * @param args.paginationOpts Pagination options (e.g. via usePaginatedQuery).
     * @param args.excludeToolMessages Whether to exclude tool messages.
     *   False by default.
     * @param args.statuses What statuses to include. All by default.
     * @returns The MessageDoc's in a format compatible with usePaginatedQuery.
     */
    async listMessages(ctx, args) {
        return listMessages(ctx, this.component, args);
    }
    /**
     * A function that handles fetching stream deltas, used with the React hooks
     * `useThreadMessages` or `useStreamingThreadMessages`.
     * @param ctx A ctx object from a query, mutation, or action.
     * @param args.threadId The thread to sync streams for.
     * @param args.streamArgs The stream arguments with per-stream cursors.
     * @returns The deltas for each stream from their existing cursor.
     */
    async syncStreams(ctx, args) {
        return syncStreams(ctx, this.component, args);
    }
    /**
     * Fetch the context messages for a thread.
     * @param ctx Either a query, mutation, or action ctx.
     *   If it is not an action context, you can't do text or
     *   vector search.
     * @param args The associated thread, user, message
     * @returns
     */
    async fetchContextMessages(ctx, args) {
        assert(args.userId || args.threadId, "Specify userId or threadId");
        const opts = this._mergedContextOptions(args.contextOptions);
        return fetchContextMessages(ctx, this.component, {
            ...args,
            contextOptions: opts,
            getEmbedding: async (text) => {
                assert("runAction" in ctx);
                assert(this.options.textEmbedding, "A textEmbedding model is required to be set on the Agent that you're doing vector search with");
                return {
                    embedding: (await this.doEmbed(ctx, {
                        userId: args.userId,
                        threadId: args.threadId,
                        values: [text],
                    })).embeddings[0],
                    embeddingModel: this.options.textEmbedding.modelId,
                };
            },
        });
    }
    /**
     * Get the metadata for a thread.
     * @param ctx A ctx object from a query, mutation, or action.
     * @param args.threadId The thread to get the metadata for.
     * @returns The metadata for the thread.
     */
    async getThreadMetadata(ctx, args) {
        return getThreadMetadata(ctx, this.component, args);
    }
    /**
     * Update the metadata for a thread.
     * @param ctx A ctx object from a mutation or action.
     * @param args.threadId The thread to update the metadata for.
     * @param args.patch The patch to apply to the thread.
     * @returns The updated thread metadata.
     */
    async updateThreadMetadata(ctx, args) {
        const thread = await ctx.runMutation(this.component.threads.updateThread, args);
        return thread;
    }
    /**
     * Get the embeddings for a set of messages.
     * @param messages The messages to get the embeddings for.
     * @returns The embeddings for the messages.
     */
    async generateEmbeddings(ctx, { userId, threadId, }, messages) {
        if (!this.options.textEmbedding) {
            return undefined;
        }
        let embeddings;
        const messageTexts = messages.map((m) => !isTool(m) && extractText(m));
        // Find the indexes of the messages that have text.
        const textIndexes = messageTexts
            .map((t, i) => (t ? i : undefined))
            .filter((i) => i !== undefined);
        if (textIndexes.length === 0) {
            return undefined;
        }
        // Then embed those messages.
        const textEmbeddings = await this.doEmbed(ctx, {
            userId,
            threadId,
            values: messageTexts.filter((t) => !!t),
        });
        // TODO: record usage of embeddings
        // Then assemble the embeddings into a single array with nulls for the messages without text.
        const embeddingsOrNull = Array(messages.length).fill(null);
        textIndexes.forEach((i, j) => {
            embeddingsOrNull[i] = textEmbeddings.embeddings[j];
        });
        if (textEmbeddings.embeddings.length > 0) {
            const dimension = textEmbeddings.embeddings[0].length;
            validateVectorDimension(dimension);
            embeddings = {
                vectors: embeddingsOrNull,
                dimension,
                model: this.options.textEmbedding.modelId,
            };
        }
        return embeddings;
    }
    /**
     * Generate embeddings for a set of messages, and save them to the database.
     * It will not generate or save embeddings for messages that already have an
     * embedding.
     * @param ctx The ctx parameter to an action.
     * @param args The messageIds to generate embeddings for.
     */
    async generateAndSaveEmbeddings(ctx, args) {
        const messages = (await ctx.runQuery(this.component.messages.getMessagesByIds, {
            messageIds: args.messageIds,
        })).filter((m) => m !== null);
        if (messages.length !== args.messageIds.length) {
            throw new Error("Some messages were not found: " +
                args.messageIds
                    .filter((id) => !messages.some((m) => m?._id === id))
                    .join(", "));
        }
        await this._generateAndSaveEmbeddings(ctx, messages);
    }
    async _generateAndSaveEmbeddings(ctx, messages) {
        if (messages.some((m) => !m.message)) {
            throw new Error("Some messages don't have a message: " +
                messages
                    .filter((m) => !m.message)
                    .map((m) => m._id)
                    .join(", "));
        }
        const messagesMissingEmbeddings = messages.filter((m) => !m.embeddingId);
        if (messagesMissingEmbeddings.length === 0) {
            return;
        }
        const embeddings = await this.generateEmbeddings(ctx, {
            userId: messagesMissingEmbeddings[0].userId,
            threadId: messagesMissingEmbeddings[0].threadId,
        }, messagesMissingEmbeddings.map((m) => m.message));
        if (!embeddings) {
            if (!this.options.textEmbedding) {
                throw new Error("No embeddings were generated for the messages. You must pass a textEmbedding model to the agent constructor.");
            }
            throw new Error("No embeddings were generated for these messages: " +
                messagesMissingEmbeddings.map((m) => m._id).join(", "));
        }
        await ctx.runMutation(this.component.vector.index.insertBatch, {
            vectorDimension: embeddings.dimension,
            vectors: messagesMissingEmbeddings
                .map((m, i) => ({
                messageId: m._id,
                model: embeddings.model,
                table: "messages",
                userId: m.userId,
                threadId: m.threadId,
                vector: embeddings.vectors[i],
            }))
                .filter((v) => v.vector !== null),
        });
    }
    /**
     * Explicitly save a "step" created by the AI SDK.
     * @param ctx The ctx argument to a mutation or action.
     * @param args The Step generated by the AI SDK.
     */
    async saveStep(ctx, args) {
        const messages = await serializeNewMessagesInStep(ctx, this.component, args.step, {
            provider: args.provider ?? this.options.chat.provider,
            model: args.model ?? this.options.chat.modelId,
        });
        const embeddings = await this.generateEmbeddings(ctx, { userId: args.userId, threadId: args.threadId }, messages.map((m) => m.message));
        const saved = await ctx.runMutation(this.component.messages.addMessages, {
            userId: args.userId,
            threadId: args.threadId,
            agentName: this.options.name,
            promptMessageId: args.promptMessageId,
            messages,
            embeddings,
            failPendingSteps: false,
        });
        return saved;
    }
    /**
     * Manually save the result of a generateObject call to the thread.
     * This happens automatically when using {@link generateObject} or {@link streamObject}
     * from the `thread` object created by {@link continueThread} or {@link createThread}.
     * @param ctx The context passed from the mutation or action function calling this.
     * @param args The arguments to the saveObject function.
     */
    async saveObject(ctx, args) {
        const { messages } = await serializeObjectResult(ctx, this.component, args.result, {
            model: args.model ?? this.options.chat.modelId,
            provider: args.provider ?? this.options.chat.provider,
        });
        const embeddings = await this.generateEmbeddings(ctx, { userId: args.userId, threadId: args.threadId }, messages.map((m) => m.message));
        await ctx.runMutation(this.component.messages.addMessages, {
            userId: args.userId,
            threadId: args.threadId,
            promptMessageId: args.promptMessageId,
            failPendingSteps: false,
            messages,
            embeddings,
            agentName: this.options.name,
            pending: false,
        });
    }
    /**
     * Commit or rollback a message that was pending.
     * This is done automatically when saving messages by default.
     * If creating pending messages, you can call this when the full "transaction" is done.
     * @param ctx The ctx argument to your mutation or action.
     * @param args What message to save. Generally the parent message sent into
     *   the generateText call.
     */
    async completeMessage(ctx, args) {
        const result = args.result;
        if (result.kind === "success") {
            await ctx.runMutation(this.component.messages.commitMessage, {
                messageId: args.messageId,
            });
        }
        else {
            await ctx.runMutation(this.component.messages.rollbackMessage, {
                messageId: args.messageId,
                error: result.error,
            });
        }
    }
    /**
     * Update a message by its id.
     * @param ctx The ctx argument to your mutation or action.
     * @param args The message fields to update.
     */
    async updateMessage(ctx, args) {
        const { message, fileIds } = await serializeMessage(ctx, this.component, args.patch.message);
        await ctx.runMutation(this.component.messages.updateMessage, {
            messageId: args.messageId,
            patch: {
                message,
                fileIds: args.patch.fileIds
                    ? [...args.patch.fileIds, ...(fileIds ?? [])]
                    : fileIds,
                status: args.patch.status === "success" ? "success" : "failed",
                error: args.patch.error,
            },
        });
    }
    /**
     * Delete multiple messages by their ids, including their embeddings
     * and reduce the refcount of any files they reference.
     * @param ctx The ctx argument to your mutation or action.
     * @param args The ids of the messages to delete.
     */
    async deleteMessages(ctx, args) {
        await ctx.runMutation(this.component.messages.deleteByIds, args);
    }
    /**
     * Delete a single message by its id, including its embedding
     * and reduce the refcount of any files it references.
     * @param ctx The ctx argument to your mutation or action.
     * @param args The id of the message to delete.
     */
    async deleteMessage(ctx, args) {
        await ctx.runMutation(this.component.messages.deleteByIds, {
            messageIds: [args.messageId],
        });
    }
    /**
     * Delete a range of messages by their order and step order.
     * Each "order" is a set of associated messages in response to the message
     * at stepOrder 0.
     * The (startOrder, startStepOrder) is inclusive
     * and the (endOrder, endStepOrder) is exclusive.
     * To delete all messages at "order" 1, you can pass:
     * `{ startOrder: 1, endOrder: 2 }`
     * To delete a message at step (order=1, stepOrder=1), you can pass:
     * `{ startOrder: 1, startStepOrder: 1, endOrder: 1, endStepOrder: 2 }`
     * To delete all messages between (1, 1) up to and including (3, 5), you can pass:
     * `{ startOrder: 1, startStepOrder: 1, endOrder: 3, endStepOrder: 6 }`
     *
     * If it cannot do it in one transaction, it returns information you can use
     * to resume the deletion.
     * e.g.
     * ```ts
     * let isDone = false;
     * let lastOrder = args.startOrder;
     * let lastStepOrder = args.startStepOrder ?? 0;
     * while (!isDone) {
     *   // eslint-disable-next-line @typescript-eslint/no-explicit-any
     *   ({ isDone, lastOrder, lastStepOrder } = await agent.deleteMessageRange(
     *     ctx,
     *     {
     *       threadId: args.threadId,
     *       startOrder: lastOrder,
     *       startStepOrder: lastStepOrder,
     *       endOrder: args.endOrder,
     *       endStepOrder: args.endStepOrder,
     *     }
     *   ));
     * }
     * ```
     * @param ctx The ctx argument to your mutation or action.
     * @param args The range of messages to delete.
     */
    async deleteMessageRange(ctx, args) {
        await ctx.runMutation(this.component.messages.deleteByOrder, {
            threadId: args.threadId,
            startOrder: args.startOrder,
            startStepOrder: args.startStepOrder,
            endOrder: args.endOrder,
            endStepOrder: args.endStepOrder,
        });
    }
    /**
     * Delete a thread and all its messages and streams asynchronously (in batches)
     * This uses a mutation to that processes one page and recursively queues the
     * next page for deletion.
     * @param ctx The ctx argument to your mutation or action.
     * @param args The id of the thread to delete and optionally the page size to use for the delete.
     */
    async deleteThreadAsync(ctx, args) {
        await ctx.runMutation(this.component.threads.deleteAllForThreadIdAsync, {
            threadId: args.threadId,
            limit: args.pageSize,
        });
    }
    /**
     * Delete a thread and all its messages and streams synchronously.
     * This uses an action to iterate through all pages. If the action fails
     * partway, it will not automatically restart.
     * @param ctx The ctx argument to your action.
     * @param args The id of the thread to delete and optionally the page size to use for the delete.
     */
    async deleteThreadSync(ctx, args) {
        await ctx.runAction(this.component.threads.deleteAllForThreadIdSync, {
            threadId: args.threadId,
            limit: args.pageSize,
        });
    }
    async _saveMessagesAndFetchContext(ctx, args, { userId: argsUserId, threadId, contextOptions, storageOptions, }) {
        contextOptions ||= this.options.contextOptions;
        storageOptions ||= this.options.storageOptions;
        // If only a promptMessageId is provided, this will be empty.
        const messages = promptOrMessagesToCoreMessages(args);
        const userId = argsUserId ??
            (threadId &&
                (await ctx.runQuery(this.component.threads.getThread, { threadId }))
                    ?.userId);
        // If only a messageId is provided, this will add that message to the end.
        const contextMessages = await this.fetchContextMessages(ctx, {
            userId,
            threadId,
            upToAndIncludingMessageId: args.promptMessageId,
            messages,
            contextOptions,
        });
        // If it was a promptMessageId, pop it off context messages
        // and add to the end of messages.
        // TODO: slice it from the prompt message, to append all of them
        const promptMessage = !!args.promptMessageId &&
            contextMessages.at(-1)?._id === args.promptMessageId
            ? contextMessages.pop()
            : undefined;
        if (promptMessage && args.prompt) {
            // If they specify both a promptMessageId and a prompt, we prefer
            // the prompt to stand in for the promptMessageId message.
            promptMessage.message = { role: "user", content: args.prompt };
        }
        let messageId = promptMessage?._id;
        let order = promptMessage?.order;
        let stepOrder = promptMessage?.stepOrder;
        if (threadId &&
            messages.length &&
            storageOptions?.saveMessages !== "none" &&
            // If it was a promptMessageId, we don't want to save it again.
            (!args.promptMessageId || storageOptions?.saveMessages === "all")) {
            const saveAll = storageOptions?.saveMessages === "all";
            const coreMessages = saveAll ? messages : messages.slice(-1);
            const saved = await this.saveMessages(ctx, {
                threadId,
                userId,
                messages: coreMessages,
                metadata: coreMessages.map((_, i) => i === coreMessages.length - 1 ? { id: args.id } : {}),
                failPendingSteps: true,
            });
            messageId = saved.lastMessageId;
            order = saved.messages.at(-1)?.order;
            stepOrder = saved.messages.at(-1)?.stepOrder;
        }
        if (promptMessage?.message) {
            // Add the message after saving the messages, so it's not saved again.
            messages.push(deserializeMessage(promptMessage.message));
            // Lazily generate embeddings for the prompt message, if it doesn't have
            // embeddings yet. This can happen if the message was saved in a mutation
            // where the LLM is not available.
            if (!promptMessage.embeddingId && this.options.textEmbedding) {
                await this._generateAndSaveEmbeddings(ctx, [promptMessage]);
            }
        }
        let processedMessages = [
            ...contextMessages.map((m) => deserializeMessage(m.message)),
            ...messages,
        ];
        // Process messages to inline localhost files (if not, file urls pointing to localhost will be sent to LLM providers)
        if (process.env.CONVEX_CLOUD_URL?.startsWith("http://127.0.0.1")) {
            processedMessages = await this._inlineMessagesFiles(processedMessages);
        }
        const { prompt: _, model, ...rest } = args;
        return {
            args: {
                ...rest,
                maxRetries: args.maxRetries ?? this.options.maxRetries,
                model: model ?? this.options.chat,
                system: args.system ?? this.options.instructions,
                messages: processedMessages,
            },
            userId,
            messageId,
            order,
            stepOrder,
        };
    }
    _shouldSaveOutputMessages(storageOpts) {
        const opts = storageOpts ?? this.options.storageOptions;
        return opts?.saveMessages !== "none";
    }
    _mergedContextOptions(opts) {
        const searchOptions = {
            ...this.options.contextOptions?.searchOptions,
            ...opts?.searchOptions,
        };
        return {
            ...this.options.contextOptions,
            ...opts,
            searchOptions: searchOptions.limit
                ? searchOptions
                : undefined,
        };
    }
    async doEmbed(ctx, options) {
        const embeddingModel = this.options.textEmbedding;
        assert(embeddingModel, "a textEmbedding model is required to be set on the Agent that you're doing vector search with");
        const result = await embedMany({
            model: embeddingModel,
            values: options.values,
            abortSignal: options.abortSignal,
            headers: options.headers,
            maxRetries: this.options.maxRetries,
        });
        if (this.options.usageHandler && result.usage) {
            await this.options.usageHandler(ctx, {
                userId: options.userId,
                threadId: options.threadId,
                agentName: this.options.name,
                model: embeddingModel.modelId,
                provider: embeddingModel.provider,
                providerMetadata: undefined,
                usage: {
                    promptTokens: result.usage.tokens,
                    completionTokens: 0,
                    totalTokens: result.usage.tokens,
                },
            });
        }
        return { embeddings: result.embeddings };
    }
    /**
     * Process messages to inline file and image URLs that point to localhost
     * by converting them to base64. This solves the problem of LLMs not being
     * able to access localhost URLs.
     */
    async _inlineMessagesFiles(messages) {
        // Process each message to convert localhost URLs to base64
        return Promise.all(messages.map(async (message) => {
            if ((message.role !== "user" && message.role !== "assistant") ||
                typeof message.content === "string" ||
                !Array.isArray(message.content)) {
                return message;
            }
            const processedContent = await Promise.all(message.content.map(async (part) => {
                if (part.type === "image" && part.image instanceof URL) {
                    assert(message.role === "user", "Images can only be in user messages");
                    if (this._isLocalhostUrl(part.image)) {
                        const imageData = await this._downloadFile(part.image);
                        return {
                            ...part,
                            image: imageData,
                        };
                    }
                }
                // Handle file parts
                if (part.type === "file" && part.data instanceof URL) {
                    if (this._isLocalhostUrl(part.data)) {
                        const fileData = await this._downloadFile(part.data);
                        return {
                            ...part,
                            data: fileData,
                        };
                    }
                }
                return part;
            }));
            if (message.role === "user") {
                return {
                    ...message,
                    content: processedContent,
                };
            }
            else {
                return {
                    ...message,
                    content: processedContent,
                };
            }
        }));
    }
    /**
     * Check if a URL points to localhost
     */
    _isLocalhostUrl(url) {
        return (url.hostname === "localhost" ||
            url.hostname === "127.0.0.1" ||
            url.hostname === "::1" ||
            url.hostname === "0.0.0.0");
    }
    /**
     * Download a file from a URL
     */
    async _downloadFile(url) {
        // Fetch the file
        const response = await fetch(url);
        if (!response.ok) {
            throw new Error(`Failed to fetch ${url}: ${response.statusText}`);
        }
        return await response.arrayBuffer();
    }
    /**
     * WORKFLOW UTILITIES
     */
    /**
     * Create a mutation that creates a thread so you can call it from a Workflow.
     * e.g.
     * ```ts
     * // in convex/foo.ts
     * export const createThread = weatherAgent.createThreadMutation();
     *
     * const workflow = new WorkflowManager(components.workflow);
     * export const myWorkflow = workflow.define({
     *   args: {},
     *   handler: async (step) => {
     *     const { threadId } = await step.runMutation(internal.foo.createThread);
     *     // use the threadId to generate text, object, etc.
     *   },
     * });
     * ```
     * @returns A mutation that creates a thread.
     */
    createThreadMutation() {
        return internalMutationGeneric({
            args: {
                userId: v.optional(v.string()),
                title: v.optional(v.string()),
                summary: v.optional(v.string()),
            },
            handler: async (ctx, args) => {
                const { threadId } = await this.createThread(ctx, args);
                return { threadId };
            },
        });
    }
    /**
     * Create an action out of this agent so you can call it from workflows or other actions
     * without a wrapping function.
     * @param spec Configuration for the agent acting as an action, including
     *   {@link ContextOptions}, {@link StorageOptions}, and maxSteps.
     */
    asTextAction(spec) {
        const maxSteps = spec?.maxSteps ?? this.options.maxSteps;
        return internalActionGeneric({
            args: vTextArgs,
            handler: async (ctx, args) => {
                const { contextOptions, storageOptions, ...rest } = args;
                const stream = args.stream === true ? spec?.stream || true : spec?.stream ?? false;
                const targetArgs = { userId: args.userId, threadId: args.threadId };
                const llmArgs = { maxSteps, ...rest };
                const opts = {
                    contextOptions: contextOptions ??
                        spec?.contextOptions ??
                        this.options.contextOptions,
                    storageOptions: storageOptions ??
                        spec?.storageOptions ??
                        this.options.storageOptions,
                    saveStreamDeltas: stream,
                };
                if (stream) {
                    const result = await this.streamText(ctx, targetArgs, llmArgs, opts);
                    await result.consumeStream();
                    return {
                        text: await result.text,
                        messageId: result.messageId,
                        order: result.order,
                        finishReason: await result.finishReason,
                        warnings: result.warnings,
                    };
                }
                else {
                    const res = await this.generateText(ctx, targetArgs, llmArgs, opts);
                    return {
                        text: res.text,
                        messageId: res.messageId,
                        order: res.order,
                        finishReason: res.finishReason,
                        warnings: res.warnings,
                    };
                }
            },
        });
    }
    /**
     * Create an action that generates an object out of this agent so you can call
     * it from workflows or other actions without a wrapping function.
     * @param spec Configuration for the agent acting as an action, including
     * the normal parameters to {@link generateObject}, plus {@link ContextOptions}
     * and maxSteps.
     */
    asObjectAction(spec, options) {
        const maxSteps = spec?.maxSteps ?? this.options.maxSteps;
        return internalActionGeneric({
            args: vSafeObjectArgs,
            handler: async (ctx, args) => {
                const { contextOptions, storageOptions, ...rest } = args;
                const value = await this.generateObject(ctx, { userId: args.userId, threadId: args.threadId }, {
                    ...spec,
                    maxSteps,
                    ...rest,
                }, {
                    contextOptions: contextOptions ??
                        options?.contextOptions ??
                        this.options.contextOptions,
                    storageOptions: storageOptions ??
                        options?.storageOptions ??
                        this.options.storageOptions,
                });
                return {
                    object: value.object,
                    messageId: value.messageId,
                    order: value.order,
                    finishReason: value.finishReason,
                    warnings: value.warnings,
                };
            },
        });
    }
    /**
     * Save messages to the thread.
     * Useful as a step in Workflows, e.g.
     * ```ts
     * const saveMessages = agent.asSaveMessagesMutation();
     *
     * const myWorkflow = workflow.define({
     *   args: {...},
     *   handler: async (step, args) => {
     *     // do things to create (but not save)messages
     *     const { messageIds } = await step.runMutation(internal.foo.saveMessages, {
     *       threadId: args.threadId,
     *       messages: args.messages,
     *     });
     *     // ...
     *   },
     * })
     * ```
     * @returns A mutation that can be used to save messages to the thread.
     */
    asSaveMessagesMutation() {
        return internalMutationGeneric({
            args: {
                threadId: v.string(),
                userId: v.optional(v.string()),
                promptMessageId: v.optional(v.string()),
                messages: v.array(vMessageWithMetadata),
                pending: v.optional(v.boolean()),
                failPendingSteps: v.optional(v.boolean()),
            },
            handler: async (ctx, args) => {
                const { lastMessageId, messages } = await this.saveMessages(ctx, {
                    ...args,
                    messages: args.messages.map((m) => m.message),
                    metadata: args.messages.map(({ message: _, ...m }) => m),
                });
                return {
                    lastMessageId,
                    messageIds: messages.map((m) => m._id),
                };
            },
        });
    }
}
/**
 * Create a thread to store messages with an Agent.
 * @param ctx The context from a mutation or action.
 * @param component The Agent component, usually `components.agent`.
 * @param args The associated thread metadata.
 * @returns The id of the created thread.
 */
export async function createThread(ctx, component, args) {
    const { _id: threadId } = await ctx.runMutation(component.threads.createThread, {
        userId: args?.userId ?? undefined,
        title: args?.title,
        summary: args?.summary,
    });
    return threadId;
}
/**
 * Get the metadata for a thread.
 * @param ctx A ctx object from a query, mutation, or action.
 * @param args.threadId The thread to get the metadata for.
 * @returns The metadata for the thread.
 */
export async function getThreadMetadata(ctx, component, args) {
    const thread = await ctx.runQuery(component.threads.getThread, {
        threadId: args.threadId,
    });
    if (!thread) {
        throw new Error("Thread not found");
    }
    return thread;
}
/**
 * Explicitly save messages associated with the thread (& user if provided)
 */
export async function saveMessages(ctx, component, args) {
    let embeddings;
    if (args.embeddings) {
        const dimension = args.embeddings.vectors.find((v) => v !== null)?.length;
        if (dimension) {
            validateVectorDimension(dimension);
            embeddings = {
                model: args.embeddings.model,
                dimension,
                vectors: args.embeddings.vectors,
            };
        }
    }
    const result = await ctx.runMutation(component.messages.addMessages, {
        threadId: args.threadId,
        userId: args.userId ?? undefined,
        agentName: args.agentName,
        promptMessageId: args.promptMessageId,
        embeddings,
        messages: await Promise.all(args.messages.map(async (m, i) => {
            const { message, fileIds } = await serializeMessage(ctx, component, m);
            return {
                ...args.metadata?.[i],
                message,
                fileIds,
            };
        })),
        failPendingSteps: args.failPendingSteps ?? false,
        pending: args.pending ?? false,
    });
    return {
        lastMessageId: result.messages.at(-1)._id,
        messages: result.messages,
    };
}
/**
 * Save a message to the thread.
 * @param ctx A ctx object from a mutation or action.
 * @param args The message and what to associate it with (user / thread)
 * You can pass extra metadata alongside the message, e.g. associated fileIds.
 * @returns The messageId of the saved message.
 */
export async function saveMessage(ctx, component, args) {
    let embeddings;
    if (args.embedding && args.embedding.vector) {
        embeddings = {
            model: args.embedding.model,
            vectors: [args.embedding.vector],
        };
    }
    const { lastMessageId, messages } = await saveMessages(ctx, component, {
        threadId: args.threadId,
        userId: args.userId ?? undefined,
        agentName: args.agentName,
        messages: args.prompt !== undefined
            ? [{ role: "user", content: args.prompt }]
            : [args.message],
        metadata: args.metadata ? [args.metadata] : undefined,
        embeddings,
    });
    return { messageId: lastMessageId, message: messages.at(-1) };
}
//# sourceMappingURL=index.js.map